{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"K9n_H_aelgKW"},"outputs":[],"source":["import pandas as pd\n","import sklearn\n","import matplotlib\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn import metrics\n","from sklearn.metrics import mean_squared_error\n","var = pd.read_csv('/content/covid,flu diff.csv')"]},{"cell_type":"markdown","metadata":{"id":"fogLXwcjAppC"},"source":["#**1. Preprocessing**"]},{"cell_type":"markdown","metadata":{"id":"ds2a0Zb4A1Uv"},"source":["## Exploring data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1715742723905,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"mB0Zwi-UcS5U","outputId":"617117ec-0d08-4299-b68f-f412a2d2cfb8"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"var"},"text/html":["\n","  <div id=\"df-8049cc31-dc3f-4379-b3da-81c1430620a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>COUGH</th>\n","      <th>MUSCLE_ACHES</th>\n","      <th>TIREDNESS</th>\n","      <th>SORE_THROAT</th>\n","      <th>RUNNY_NOSE</th>\n","      <th>STUFFY_NOSE</th>\n","      <th>FEVER</th>\n","      <th>NAUSEA</th>\n","      <th>VOMITING</th>\n","      <th>DIARRHEA</th>\n","      <th>...</th>\n","      <th>DIFFICULTY_BREATHING</th>\n","      <th>LOSS_OF_TASTE</th>\n","      <th>LOSS_OF_SMELL</th>\n","      <th>ITCHY_NOSE</th>\n","      <th>ITCHY_EYES</th>\n","      <th>ITCHY_MOUTH</th>\n","      <th>ITCHY_INNER_EAR</th>\n","      <th>SNEEZING</th>\n","      <th>PINK_EYE</th>\n","      <th>TYPE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>ALLERGY</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>ALLERGY</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>ALLERGY</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>ALLERGY</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>ALLERGY</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>44448</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>FLU</td>\n","    </tr>\n","    <tr>\n","      <th>44449</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>FLU</td>\n","    </tr>\n","    <tr>\n","      <th>44450</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>FLU</td>\n","    </tr>\n","    <tr>\n","      <th>44451</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>FLU</td>\n","    </tr>\n","    <tr>\n","      <th>44452</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>FLU</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>44453 rows Ã— 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8049cc31-dc3f-4379-b3da-81c1430620a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-8049cc31-dc3f-4379-b3da-81c1430620a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-8049cc31-dc3f-4379-b3da-81c1430620a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-5ff9b11e-c1b1-4115-9a95-92105757187e\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5ff9b11e-c1b1-4115-9a95-92105757187e')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-5ff9b11e-c1b1-4115-9a95-92105757187e button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_8219381c-e304-49ca-bb5e-4b106e3b19ff\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('var')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_8219381c-e304-49ca-bb5e-4b106e3b19ff button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('var');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["       COUGH  MUSCLE_ACHES  TIREDNESS  SORE_THROAT  RUNNY_NOSE  STUFFY_NOSE  \\\n","0          0             0          1            0           1            0   \n","1          0             0          1            0           0            0   \n","2          0             1          1            1           0            0   \n","3          0             0          0            1           1            0   \n","4          0             0          1            0           1            0   \n","...      ...           ...        ...          ...         ...          ...   \n","44448      1             0          0            1           0            0   \n","44449      1             1          0            1           1            0   \n","44450      0             0          1            0           1            0   \n","44451      0             0          0            1           1            1   \n","44452      1             1          0            0           0            1   \n","\n","       FEVER  NAUSEA  VOMITING  DIARRHEA  ...  DIFFICULTY_BREATHING  \\\n","0          0       0         0         0  ...                     0   \n","1          0       0         0         0  ...                     0   \n","2          0       0         0         0  ...                     0   \n","3          0       0         0         0  ...                     0   \n","4          0       0         0         0  ...                     0   \n","...      ...     ...       ...       ...  ...                   ...   \n","44448      1       0         1         1  ...                     0   \n","44449      1       1         0         1  ...                     0   \n","44450      0       0         1         1  ...                     1   \n","44451      0       0         1         0  ...                     0   \n","44452      0       0         1         0  ...                     1   \n","\n","       LOSS_OF_TASTE  LOSS_OF_SMELL  ITCHY_NOSE  ITCHY_EYES  ITCHY_MOUTH  \\\n","0                  1              0           1           0            0   \n","1                  1              0           1           0            1   \n","2                  1              0           1           0            0   \n","3                  1              1           0           0            1   \n","4                  1              1           0           1            0   \n","...              ...            ...         ...         ...          ...   \n","44448              0              0           0           0            0   \n","44449              1              1           0           0            0   \n","44450              1              0           0           0            0   \n","44451              0              1           0           0            0   \n","44452              0              1           0           0            0   \n","\n","       ITCHY_INNER_EAR  SNEEZING  PINK_EYE     TYPE  \n","0                    1         0         1  ALLERGY  \n","1                    1         1         1  ALLERGY  \n","2                    0         0         1  ALLERGY  \n","3                    0         1         1  ALLERGY  \n","4                    1         1         1  ALLERGY  \n","...                ...       ...       ...      ...  \n","44448                0         1         0      FLU  \n","44449                0         1         0      FLU  \n","44450                0         1         0      FLU  \n","44451                0         0         0      FLU  \n","44452                0         0         0      FLU  \n","\n","[44453 rows x 21 columns]"]},"execution_count":2,"metadata":{},"output_type":"execute_result"}],"source":["var"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":560,"status":"ok","timestamp":1715742724446,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"DpvHoLu9cXgf","outputId":"f1eb9c91-507f-4d66-fe2a-1f993d710707"},"outputs":[{"data":{"text/plain":["44453"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["len(var)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1715742724446,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"HKGpYye0c_8R","outputId":"57e852fa-1ed9-431e-bd24-1e91068e2708"},"outputs":[{"data":{"text/plain":["COUGH                   44453\n","MUSCLE_ACHES            44453\n","TIREDNESS               44453\n","SORE_THROAT             44453\n","RUNNY_NOSE              44453\n","STUFFY_NOSE             44453\n","FEVER                   44453\n","NAUSEA                  44453\n","VOMITING                44453\n","DIARRHEA                44453\n","SHORTNESS_OF_BREATH     44453\n","DIFFICULTY_BREATHING    44453\n","LOSS_OF_TASTE           44453\n","LOSS_OF_SMELL           44453\n","ITCHY_NOSE              44453\n","ITCHY_EYES              44453\n","ITCHY_MOUTH             44453\n","ITCHY_INNER_EAR         44453\n","SNEEZING                44453\n","PINK_EYE                44453\n","TYPE                    44453\n","dtype: int64"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["# No of entries of each column\n","var.count()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":29,"status":"ok","timestamp":1715742724446,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"sOSEMGhDdGZR","outputId":"16ae172a-0137-4ef7-a42c-7e306400a8ed"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"var"},"text/html":["\n","  <div id=\"df-ad554a27-1510-4f80-8d55-c3f1eab45cf6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>COUGH</th>\n","      <th>MUSCLE_ACHES</th>\n","      <th>TIREDNESS</th>\n","      <th>SORE_THROAT</th>\n","      <th>RUNNY_NOSE</th>\n","      <th>STUFFY_NOSE</th>\n","      <th>FEVER</th>\n","      <th>NAUSEA</th>\n","      <th>VOMITING</th>\n","      <th>DIARRHEA</th>\n","      <th>...</th>\n","      <th>DIFFICULTY_BREATHING</th>\n","      <th>LOSS_OF_TASTE</th>\n","      <th>LOSS_OF_SMELL</th>\n","      <th>ITCHY_NOSE</th>\n","      <th>ITCHY_EYES</th>\n","      <th>ITCHY_MOUTH</th>\n","      <th>ITCHY_INNER_EAR</th>\n","      <th>SNEEZING</th>\n","      <th>PINK_EYE</th>\n","      <th>TYPE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>ALLERGY</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>ALLERGY</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>ALLERGY</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>ALLERGY</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>ALLERGY</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows Ã— 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad554a27-1510-4f80-8d55-c3f1eab45cf6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ad554a27-1510-4f80-8d55-c3f1eab45cf6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ad554a27-1510-4f80-8d55-c3f1eab45cf6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c3ba7354-69d6-432d-bbf8-4a387f80bae4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3ba7354-69d6-432d-bbf8-4a387f80bae4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c3ba7354-69d6-432d-bbf8-4a387f80bae4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["   COUGH  MUSCLE_ACHES  TIREDNESS  SORE_THROAT  RUNNY_NOSE  STUFFY_NOSE  \\\n","0      0             0          1            0           1            0   \n","1      0             0          1            0           0            0   \n","2      0             1          1            1           0            0   \n","3      0             0          0            1           1            0   \n","4      0             0          1            0           1            0   \n","\n","   FEVER  NAUSEA  VOMITING  DIARRHEA  ...  DIFFICULTY_BREATHING  \\\n","0      0       0         0         0  ...                     0   \n","1      0       0         0         0  ...                     0   \n","2      0       0         0         0  ...                     0   \n","3      0       0         0         0  ...                     0   \n","4      0       0         0         0  ...                     0   \n","\n","   LOSS_OF_TASTE  LOSS_OF_SMELL  ITCHY_NOSE  ITCHY_EYES  ITCHY_MOUTH  \\\n","0              1              0           1           0            0   \n","1              1              0           1           0            1   \n","2              1              0           1           0            0   \n","3              1              1           0           0            1   \n","4              1              1           0           1            0   \n","\n","   ITCHY_INNER_EAR  SNEEZING  PINK_EYE     TYPE  \n","0                1         0         1  ALLERGY  \n","1                1         1         1  ALLERGY  \n","2                0         0         1  ALLERGY  \n","3                0         1         1  ALLERGY  \n","4                1         1         1  ALLERGY  \n","\n","[5 rows x 21 columns]"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["# First 5 entries of data\n","var.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1715742724447,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"ct3nIDn4dQW2","outputId":"19b8254f-cc91-4eb4-cf05-c8b008ea33b6"},"outputs":[{"name":"stdout","output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 44453 entries, 0 to 44452\n","Data columns (total 21 columns):\n"," #   Column                Non-Null Count  Dtype \n","---  ------                --------------  ----- \n"," 0   COUGH                 44453 non-null  int64 \n"," 1   MUSCLE_ACHES          44453 non-null  int64 \n"," 2   TIREDNESS             44453 non-null  int64 \n"," 3   SORE_THROAT           44453 non-null  int64 \n"," 4   RUNNY_NOSE            44453 non-null  int64 \n"," 5   STUFFY_NOSE           44453 non-null  int64 \n"," 6   FEVER                 44453 non-null  int64 \n"," 7   NAUSEA                44453 non-null  int64 \n"," 8   VOMITING              44453 non-null  int64 \n"," 9   DIARRHEA              44453 non-null  int64 \n"," 10  SHORTNESS_OF_BREATH   44453 non-null  int64 \n"," 11  DIFFICULTY_BREATHING  44453 non-null  int64 \n"," 12  LOSS_OF_TASTE         44453 non-null  int64 \n"," 13  LOSS_OF_SMELL         44453 non-null  int64 \n"," 14  ITCHY_NOSE            44453 non-null  int64 \n"," 15  ITCHY_EYES            44453 non-null  int64 \n"," 16  ITCHY_MOUTH           44453 non-null  int64 \n"," 17  ITCHY_INNER_EAR       44453 non-null  int64 \n"," 18  SNEEZING              44453 non-null  int64 \n"," 19  PINK_EYE              44453 non-null  int64 \n"," 20  TYPE                  44453 non-null  object\n","dtypes: int64(20), object(1)\n","memory usage: 7.1+ MB\n"]}],"source":["# Tells the no of non-null entries and data type of each column\n","var.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":24,"status":"ok","timestamp":1715742724447,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"QbGbZbTwdbEj","outputId":"378980e6-50d6-4809-f554-d9dfea09b06c"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"var\",\n  \"rows\": 20,\n  \"fields\": [\n    {\n      \"column\": \"count\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 44453.0,\n        \"max\": 44453.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          44453.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"mean\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.13261386787955698,\n        \"min\": 0.18423953388972622,\n        \"max\": 0.5206622725125414,\n        \"num_unique_values\": 17,\n        \"samples\": [\n          0.5206622725125414\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"std\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.045786702111161814,\n        \"min\": 0.3876837746307184,\n        \"max\": 0.4999914256411893,\n        \"num_unique_values\": 18,\n        \"samples\": [\n          0.4995785072781344\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"min\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"25%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 0.0,\n        \"max\": 0.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"50%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4442616583193193,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"75%\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4442616583193193,\n        \"min\": 0.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"max\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.0,\n        \"min\": 1.0,\n        \"max\": 1.0,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe"},"text/html":["\n","  <div id=\"df-2089f767-622f-4387-8579-8b61f79529ea\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>COUGH</th>\n","      <td>44453.0</td>\n","      <td>0.520662</td>\n","      <td>0.499579</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>MUSCLE_ACHES</th>\n","      <td>44453.0</td>\n","      <td>0.519762</td>\n","      <td>0.499615</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>TIREDNESS</th>\n","      <td>44453.0</td>\n","      <td>0.519897</td>\n","      <td>0.499610</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>SORE_THROAT</th>\n","      <td>44453.0</td>\n","      <td>0.519358</td>\n","      <td>0.499631</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>RUNNY_NOSE</th>\n","      <td>44453.0</td>\n","      <td>0.496232</td>\n","      <td>0.499991</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>STUFFY_NOSE</th>\n","      <td>44453.0</td>\n","      <td>0.495850</td>\n","      <td>0.499988</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>FEVER</th>\n","      <td>44453.0</td>\n","      <td>0.325400</td>\n","      <td>0.468529</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>NAUSEA</th>\n","      <td>44453.0</td>\n","      <td>0.324253</td>\n","      <td>0.468100</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>VOMITING</th>\n","      <td>44453.0</td>\n","      <td>0.324523</td>\n","      <td>0.468201</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>DIARRHEA</th>\n","      <td>44453.0</td>\n","      <td>0.323465</td>\n","      <td>0.467804</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>SHORTNESS_OF_BREATH</th>\n","      <td>44453.0</td>\n","      <td>0.323893</td>\n","      <td>0.467965</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>DIFFICULTY_BREATHING</th>\n","      <td>44453.0</td>\n","      <td>0.324455</td>\n","      <td>0.468176</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>LOSS_OF_TASTE</th>\n","      <td>44453.0</td>\n","      <td>0.422986</td>\n","      <td>0.494039</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>LOSS_OF_SMELL</th>\n","      <td>44453.0</td>\n","      <td>0.423234</td>\n","      <td>0.494077</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>ITCHY_NOSE</th>\n","      <td>44453.0</td>\n","      <td>0.184285</td>\n","      <td>0.387720</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>ITCHY_EYES</th>\n","      <td>44453.0</td>\n","      <td>0.184285</td>\n","      <td>0.387720</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>ITCHY_MOUTH</th>\n","      <td>44453.0</td>\n","      <td>0.184285</td>\n","      <td>0.387720</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>ITCHY_INNER_EAR</th>\n","      <td>44453.0</td>\n","      <td>0.184285</td>\n","      <td>0.387720</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>SNEEZING</th>\n","      <td>44453.0</td>\n","      <td>0.519313</td>\n","      <td>0.499633</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>PINK_EYE</th>\n","      <td>44453.0</td>\n","      <td>0.184240</td>\n","      <td>0.387684</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2089f767-622f-4387-8579-8b61f79529ea')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2089f767-622f-4387-8579-8b61f79529ea button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2089f767-622f-4387-8579-8b61f79529ea');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7b32b390-e338-4930-aa3b-511780abfe73\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7b32b390-e338-4930-aa3b-511780abfe73')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7b32b390-e338-4930-aa3b-511780abfe73 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["                        count      mean       std  min  25%  50%  75%  max\n","COUGH                 44453.0  0.520662  0.499579  0.0  0.0  1.0  1.0  1.0\n","MUSCLE_ACHES          44453.0  0.519762  0.499615  0.0  0.0  1.0  1.0  1.0\n","TIREDNESS             44453.0  0.519897  0.499610  0.0  0.0  1.0  1.0  1.0\n","SORE_THROAT           44453.0  0.519358  0.499631  0.0  0.0  1.0  1.0  1.0\n","RUNNY_NOSE            44453.0  0.496232  0.499991  0.0  0.0  0.0  1.0  1.0\n","STUFFY_NOSE           44453.0  0.495850  0.499988  0.0  0.0  0.0  1.0  1.0\n","FEVER                 44453.0  0.325400  0.468529  0.0  0.0  0.0  1.0  1.0\n","NAUSEA                44453.0  0.324253  0.468100  0.0  0.0  0.0  1.0  1.0\n","VOMITING              44453.0  0.324523  0.468201  0.0  0.0  0.0  1.0  1.0\n","DIARRHEA              44453.0  0.323465  0.467804  0.0  0.0  0.0  1.0  1.0\n","SHORTNESS_OF_BREATH   44453.0  0.323893  0.467965  0.0  0.0  0.0  1.0  1.0\n","DIFFICULTY_BREATHING  44453.0  0.324455  0.468176  0.0  0.0  0.0  1.0  1.0\n","LOSS_OF_TASTE         44453.0  0.422986  0.494039  0.0  0.0  0.0  1.0  1.0\n","LOSS_OF_SMELL         44453.0  0.423234  0.494077  0.0  0.0  0.0  1.0  1.0\n","ITCHY_NOSE            44453.0  0.184285  0.387720  0.0  0.0  0.0  0.0  1.0\n","ITCHY_EYES            44453.0  0.184285  0.387720  0.0  0.0  0.0  0.0  1.0\n","ITCHY_MOUTH           44453.0  0.184285  0.387720  0.0  0.0  0.0  0.0  1.0\n","ITCHY_INNER_EAR       44453.0  0.184285  0.387720  0.0  0.0  0.0  0.0  1.0\n","SNEEZING              44453.0  0.519313  0.499633  0.0  0.0  1.0  1.0  1.0\n","PINK_EYE              44453.0  0.184240  0.387684  0.0  0.0  0.0  0.0  1.0"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["# Count - no of non-null values, std- standard deviation\n","# 25%,50%,75%- no of values less then these percentages\n","# .T= transposed the data representation\n","var.describe().T"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1715742724447,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"0UoDzuJjdec4","outputId":"b78f67b3-da72-4035-ffac-a38ae536e651"},"outputs":[{"data":{"text/plain":["Index(['COUGH', 'MUSCLE_ACHES', 'TIREDNESS', 'SORE_THROAT', 'RUNNY_NOSE',\n","       'STUFFY_NOSE', 'FEVER', 'NAUSEA', 'VOMITING', 'DIARRHEA',\n","       'SHORTNESS_OF_BREATH', 'DIFFICULTY_BREATHING', 'LOSS_OF_TASTE',\n","       'LOSS_OF_SMELL', 'ITCHY_NOSE', 'ITCHY_EYES', 'ITCHY_MOUTH',\n","       'ITCHY_INNER_EAR', 'SNEEZING', 'PINK_EYE', 'TYPE'],\n","      dtype='object')"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["var.columns"]},{"cell_type":"markdown","metadata":{"id":"yDGtV4m3BBzx"},"source":["## Missing and null values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3725,"status":"ok","timestamp":1715742728157,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"qevR2dr4eKis","outputId":"78fb470c-90c9-4137-c7b1-6438bd77e660"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 2500x1000 with 3 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# visualizing missing data patterns\n","import missingno as msn\n","msn.bar(var,color=\"blue\");"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":746,"status":"ok","timestamp":1715742728884,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"S-cTwLLNpDcs","outputId":"683a7e3b-7b19-4721-9aaa-0bf85adb4b2e"},"outputs":[{"name":"stdout","output_type":"stream","text":["COUGH\n","COUGH\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","MUSCLE_ACHES\n","MUSCLE_ACHES\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","TIREDNESS\n","TIREDNESS\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","SORE_THROAT\n","SORE_THROAT\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","RUNNY_NOSE\n","RUNNY_NOSE\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","STUFFY_NOSE\n","STUFFY_NOSE\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","FEVER\n","FEVER\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","NAUSEA\n","NAUSEA\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","VOMITING\n","VOMITING\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","DIARRHEA\n","DIARRHEA\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","SHORTNESS_OF_BREATH\n","SHORTNESS_OF_BREATH\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","DIFFICULTY_BREATHING\n","DIFFICULTY_BREATHING\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","LOSS_OF_TASTE\n","LOSS_OF_TASTE\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","LOSS_OF_SMELL\n","LOSS_OF_SMELL\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","ITCHY_NOSE\n","ITCHY_NOSE\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","ITCHY_EYES\n","ITCHY_EYES\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","ITCHY_MOUTH\n","ITCHY_MOUTH\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","ITCHY_INNER_EAR\n","ITCHY_INNER_EAR\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","SNEEZING\n","SNEEZING\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","PINK_EYE\n","PINK_EYE\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n","TYPE\n","TYPE\n","False    44453\n","Name: count, dtype: int64\n","\n","\n","\n"]}],"source":["# If missing values count as true else as false\n","for col in var.columns:\n","  print(col)\n","  print(var[col].isna().value_counts())\n","  print(\"\\n\\n\")"]},{"cell_type":"markdown","metadata":{"id":"cBYRtTpMBSQ1"},"source":["## Counting features values"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1715742728884,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"ITMl1wQsp4Yd","outputId":"035d49f0-6333-430c-b25e-fbededc5f93f"},"outputs":[{"name":"stdout","output_type":"stream","text":["COUGH\n","COUGH\n","1    23145\n","0    21308\n","Name: count, dtype: int64\n","\n","\n","\n","MUSCLE_ACHES\n","MUSCLE_ACHES\n","1    23105\n","0    21348\n","Name: count, dtype: int64\n","\n","\n","\n","TIREDNESS\n","TIREDNESS\n","1    23111\n","0    21342\n","Name: count, dtype: int64\n","\n","\n","\n","SORE_THROAT\n","SORE_THROAT\n","1    23087\n","0    21366\n","Name: count, dtype: int64\n","\n","\n","\n","RUNNY_NOSE\n","RUNNY_NOSE\n","0    22394\n","1    22059\n","Name: count, dtype: int64\n","\n","\n","\n","STUFFY_NOSE\n","STUFFY_NOSE\n","0    22411\n","1    22042\n","Name: count, dtype: int64\n","\n","\n","\n","FEVER\n","FEVER\n","0    29988\n","1    14465\n","Name: count, dtype: int64\n","\n","\n","\n","NAUSEA\n","NAUSEA\n","0    30039\n","1    14414\n","Name: count, dtype: int64\n","\n","\n","\n","VOMITING\n","VOMITING\n","0    30027\n","1    14426\n","Name: count, dtype: int64\n","\n","\n","\n","DIARRHEA\n","DIARRHEA\n","0    30074\n","1    14379\n","Name: count, dtype: int64\n","\n","\n","\n","SHORTNESS_OF_BREATH\n","SHORTNESS_OF_BREATH\n","0    30055\n","1    14398\n","Name: count, dtype: int64\n","\n","\n","\n","DIFFICULTY_BREATHING\n","DIFFICULTY_BREATHING\n","0    30030\n","1    14423\n","Name: count, dtype: int64\n","\n","\n","\n","LOSS_OF_TASTE\n","LOSS_OF_TASTE\n","0    25650\n","1    18803\n","Name: count, dtype: int64\n","\n","\n","\n","LOSS_OF_SMELL\n","LOSS_OF_SMELL\n","0    25639\n","1    18814\n","Name: count, dtype: int64\n","\n","\n","\n","ITCHY_NOSE\n","ITCHY_NOSE\n","0    36261\n","1     8192\n","Name: count, dtype: int64\n","\n","\n","\n","ITCHY_EYES\n","ITCHY_EYES\n","0    36261\n","1     8192\n","Name: count, dtype: int64\n","\n","\n","\n","ITCHY_MOUTH\n","ITCHY_MOUTH\n","0    36261\n","1     8192\n","Name: count, dtype: int64\n","\n","\n","\n","ITCHY_INNER_EAR\n","ITCHY_INNER_EAR\n","0    36261\n","1     8192\n","Name: count, dtype: int64\n","\n","\n","\n","SNEEZING\n","SNEEZING\n","1    23085\n","0    21368\n","Name: count, dtype: int64\n","\n","\n","\n","PINK_EYE\n","PINK_EYE\n","0    36263\n","1     8190\n","Name: count, dtype: int64\n","\n","\n","\n","TYPE\n","TYPE\n","FLU        25000\n","ALLERGY    16381\n","COVID       2048\n","COLD        1024\n","Name: count, dtype: int64\n","\n","\n","\n"]}],"source":["# Count no of 0 and 1 for each feature\n","for col in var.columns:\n","  print(col)\n","  print(var[col].value_counts())\n","  print(\"\\n\\n\")"]},{"cell_type":"markdown","metadata":{"id":"x2hv5ji3BZT-"},"source":["## Duplicated"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1715742728884,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"4rJ_TmT5qkNr","outputId":"da2d1af8-54d3-47a0-f9cc-b15a12536dad"},"outputs":[{"data":{"text/plain":["False    44453\n","Name: count, dtype: int64"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["# Checks that if entire row is being repeated or not\n","var.duplicated().value_counts()"]},{"cell_type":"markdown","metadata":{"id":"3RrlQ2t2BgiS"},"source":["## Plotting"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7978,"status":"ok","timestamp":1715742736856,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"cc_r1wtEq9nb","outputId":"973583e7-02df-443f-8c6f-eaf9d4d03592"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 2000x3500 with 21 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["import seaborn as sns\n","import matplotlib.pyplot as plt\n","import numpy as np\n","\n","cols = var.columns\n","num_cols = len(cols)\n","\n","nrows = np.ceil(num_cols/3).astype(int)\n","\n","# Creates a grid with nrows and ncols and whole grid size will be 20 inches wides\n","# and 5*nrows height. While fig take the figure object of entire grid and axes is\n","# a 2d array containing axes of individual subplots in the grid(2d array is in\n","# shape of grid).\n","\n","fig, axes = plt.subplots(nrows=nrows, ncols=3, figsize=(20,5*nrows))\n","\n","# Makes the 2d array into 1d array\n","axes = axes.flatten()\n","\n","for i, col in enumerate(cols):\n","    # didn't understand the hue and palette working\n","    sns.countplot(x='TYPE', data=var, hue=col, palette='BuPu',ax=axes[i])\n","\n","    # Sets the title of each subplot with the name of col\n","    axes[i].set_title(col)\n","\n","# Make sure that grid fits well in the fig area and don't overlap each other\n","plt.tight_layout()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7151,"status":"ok","timestamp":1715742743985,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"_iRHIyEzrR_o","outputId":"1bea652e-db93-477b-9e74-579cfd46ec34"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 2000x3500 with 21 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["fig, axes = plt.subplots(nrows=nrows, ncols=3, figsize=(20,5*nrows))\n","axes = axes.flatten()\n","\n","for i, col in enumerate(cols):\n","    sns.countplot(x=col, data=var, ax=axes[i])\n","    axes[i].set_title(col)\n","\n","plt.tight_layout()"]},{"cell_type":"markdown","metadata":{"id":"IIok3tZ1ZNz1"},"source":["#**2. Splitting**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"7KOZT-ImZTKm"},"outputs":[],"source":["# iloc - Integer location based indexing\n","# All columns and rows except the last the column(target)\n","X = var.iloc[:,:-1]\n","\n","# All rows but only the last column(target)\n","y=var.iloc[:,-1]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":43,"status":"ok","timestamp":1715742743986,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"00CpEluaZcNP","outputId":"e44a6d59-f423-42ee-9e10-7dbae49ec3a7"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"summary":"{\n  \"name\": \"X\",\n  \"rows\": 44453,\n  \"fields\": [\n    {\n      \"column\": \"COUGH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUSCLE_ACHES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TIREDNESS\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SORE_THROAT\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"RUNNY_NOSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUFFY_NOSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"FEVER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAUSEA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"VOMITING\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DIARRHEA\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SHORTNESS_OF_BREATH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DIFFICULTY_BREATHING\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LOSS_OF_TASTE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LOSS_OF_SMELL\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ITCHY_NOSE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ITCHY_EYES\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ITCHY_MOUTH\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ITCHY_INNER_EAR\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SNEEZING\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"PINK_EYE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}","type":"dataframe","variable_name":"X"},"text/html":["\n","  <div id=\"df-19169ffb-c454-402c-b1eb-3084bba68385\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>COUGH</th>\n","      <th>MUSCLE_ACHES</th>\n","      <th>TIREDNESS</th>\n","      <th>SORE_THROAT</th>\n","      <th>RUNNY_NOSE</th>\n","      <th>STUFFY_NOSE</th>\n","      <th>FEVER</th>\n","      <th>NAUSEA</th>\n","      <th>VOMITING</th>\n","      <th>DIARRHEA</th>\n","      <th>SHORTNESS_OF_BREATH</th>\n","      <th>DIFFICULTY_BREATHING</th>\n","      <th>LOSS_OF_TASTE</th>\n","      <th>LOSS_OF_SMELL</th>\n","      <th>ITCHY_NOSE</th>\n","      <th>ITCHY_EYES</th>\n","      <th>ITCHY_MOUTH</th>\n","      <th>ITCHY_INNER_EAR</th>\n","      <th>SNEEZING</th>\n","      <th>PINK_EYE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>44448</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>44449</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>44450</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>44451</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>44452</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>44453 rows Ã— 20 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19169ffb-c454-402c-b1eb-3084bba68385')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-19169ffb-c454-402c-b1eb-3084bba68385 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-19169ffb-c454-402c-b1eb-3084bba68385');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-706adfb5-d9ae-4727-b035-7089373f7c55\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-706adfb5-d9ae-4727-b035-7089373f7c55')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-706adfb5-d9ae-4727-b035-7089373f7c55 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_b1bef4b2-691f-4694-a9db-a142f1518c1f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_b1bef4b2-691f-4694-a9db-a142f1518c1f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["       COUGH  MUSCLE_ACHES  TIREDNESS  SORE_THROAT  RUNNY_NOSE  STUFFY_NOSE  \\\n","0          0             0          1            0           1            0   \n","1          0             0          1            0           0            0   \n","2          0             1          1            1           0            0   \n","3          0             0          0            1           1            0   \n","4          0             0          1            0           1            0   \n","...      ...           ...        ...          ...         ...          ...   \n","44448      1             0          0            1           0            0   \n","44449      1             1          0            1           1            0   \n","44450      0             0          1            0           1            0   \n","44451      0             0          0            1           1            1   \n","44452      1             1          0            0           0            1   \n","\n","       FEVER  NAUSEA  VOMITING  DIARRHEA  SHORTNESS_OF_BREATH  \\\n","0          0       0         0         0                    0   \n","1          0       0         0         0                    0   \n","2          0       0         0         0                    0   \n","3          0       0         0         0                    0   \n","4          0       0         0         0                    0   \n","...      ...     ...       ...       ...                  ...   \n","44448      1       0         1         1                    0   \n","44449      1       1         0         1                    0   \n","44450      0       0         1         1                    0   \n","44451      0       0         1         0                    1   \n","44452      0       0         1         0                    1   \n","\n","       DIFFICULTY_BREATHING  LOSS_OF_TASTE  LOSS_OF_SMELL  ITCHY_NOSE  \\\n","0                         0              1              0           1   \n","1                         0              1              0           1   \n","2                         0              1              0           1   \n","3                         0              1              1           0   \n","4                         0              1              1           0   \n","...                     ...            ...            ...         ...   \n","44448                     0              0              0           0   \n","44449                     0              1              1           0   \n","44450                     1              1              0           0   \n","44451                     0              0              1           0   \n","44452                     1              0              1           0   \n","\n","       ITCHY_EYES  ITCHY_MOUTH  ITCHY_INNER_EAR  SNEEZING  PINK_EYE  \n","0               0            0                1         0         1  \n","1               0            1                1         1         1  \n","2               0            0                0         0         1  \n","3               0            1                0         1         1  \n","4               1            0                1         1         1  \n","...           ...          ...              ...       ...       ...  \n","44448           0            0                0         1         0  \n","44449           0            0                0         1         0  \n","44450           0            0                0         1         0  \n","44451           0            0                0         0         0  \n","44452           0            0                0         0         0  \n","\n","[44453 rows x 20 columns]"]},"execution_count":16,"metadata":{},"output_type":"execute_result"}],"source":["X"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":40,"status":"ok","timestamp":1715742743986,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"NGtY_3WmZrJK","outputId":"095df938-64a0-409b-8913-0b87cbd9689b"},"outputs":[{"data":{"text/plain":["0        ALLERGY\n","1        ALLERGY\n","2        ALLERGY\n","3        ALLERGY\n","4        ALLERGY\n","          ...   \n","44448        FLU\n","44449        FLU\n","44450        FLU\n","44451        FLU\n","44452        FLU\n","Name: TYPE, Length: 44453, dtype: object"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["y"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ezonbWURabnl"},"outputs":[],"source":["from sklearn.model_selection import train_test_split"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GisQG6jTaiMI"},"outputs":[],"source":["# Splitting train and test data\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,\n","                                                    random_state=42)\n","\n","# Splitting train and validation data\n","X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size\n","                                                  =0.3, random_state=42)"]},{"cell_type":"markdown","metadata":{"id":"iLQyRScTdIhw"},"source":["# **3. Building Models**\n","(before solving the unbalanced data)"]},{"cell_type":"markdown","metadata":{"id":"oVMb3IWjRpIr"},"source":["## Hyperparameter Tuning (manually)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":39964,"status":"ok","timestamp":1715742783912,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"uXazPHmXRz42","outputId":"aa247241-8619-4dae-db65-b73512e45c45"},"outputs":[{"name":"stdout","output_type":"stream","text":["The Training Accuracy for max_depth 1 is: 0.8617143381846564\n","The Validation Accuracy for max_depth 1 is: 0.8571122536418166\n","\n","The Training Accuracy for max_depth 2 is: 0.9193333639410496\n","The Validation Accuracy for max_depth 2 is: 0.9148457583547558\n","\n","The Training Accuracy for max_depth 3 is: 0.9193333639410496\n","The Validation Accuracy for max_depth 3 is: 0.9148457583547558\n","\n","The Training Accuracy for max_depth 4 is: 0.9193333639410496\n","The Validation Accuracy for max_depth 4 is: 0.9148457583547558\n","\n","The Training Accuracy for max_depth 5 is: 0.9193333639410496\n","The Validation Accuracy for max_depth 5 is: 0.9148457583547558\n","\n","The Training Accuracy for max_depth 6 is: 0.9193333639410496\n","The Validation Accuracy for max_depth 6 is: 0.9148457583547558\n","\n","The Training Accuracy for max_depth 7 is: 0.9193333639410496\n","The Validation Accuracy for max_depth 7 is: 0.9148457583547558\n","\n","The Training Accuracy for max_depth 8 is: 0.9221339699738303\n","The Validation Accuracy for max_depth 8 is: 0.9167737789203085\n","\n","The Training Accuracy for max_depth 9 is: 0.9235113172030669\n","The Validation Accuracy for max_depth 9 is: 0.917630676949443\n","\n","The Training Accuracy for max_depth 10 is: 0.9275056241678528\n","The Validation Accuracy for max_depth 10 is: 0.9230934018851756\n","\n","The Training Accuracy for max_depth 11 is: 0.9290207061200129\n","The Validation Accuracy for max_depth 11 is: 0.9245929734361611\n","\n","The Training Accuracy for max_depth 12 is: 0.932142693172949\n","The Validation Accuracy for max_depth 12 is: 0.9258783204798628\n","\n","The Training Accuracy for max_depth 13 is: 0.9404985996969836\n","The Validation Accuracy for max_depth 13 is: 0.920522707797772\n","\n","The Training Accuracy for max_depth 14 is: 0.952527432165649\n","The Validation Accuracy for max_depth 14 is: 0.9113110539845758\n","\n","The Training Accuracy for max_depth 15 is: 0.9589091409944447\n","The Validation Accuracy for max_depth 15 is: 0.9060625535561269\n","\n","The Training Accuracy for max_depth 16 is: 0.9620311280473808\n","The Validation Accuracy for max_depth 16 is: 0.9038131962296486\n","\n","The Training Accuracy for max_depth 17 is: 0.9636839447224645\n","The Validation Accuracy for max_depth 17 is: 0.9027420736932305\n","\n","The Training Accuracy for max_depth 18 is: 0.9647858225058538\n","The Validation Accuracy for max_depth 18 is: 0.9024207369323051\n","\n","The Training Accuracy for max_depth 19 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 19 is: 0.9004927163667523\n","\n","The Training Accuracy for max_depth 20 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 20 is: 0.9008140531276778\n","\n","The Training Accuracy for max_depth 21 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 21 is: 0.9005998286203942\n","\n","The Training Accuracy for max_depth 22 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 22 is: 0.9005998286203942\n","\n","The Training Accuracy for max_depth 23 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 23 is: 0.9005998286203942\n","\n","The Training Accuracy for max_depth 24 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 24 is: 0.9005998286203942\n","\n","The Training Accuracy for max_depth 25 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 25 is: 0.9005998286203942\n","\n","The Training Accuracy for max_depth 26 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 26 is: 0.9005998286203942\n","\n","The Training Accuracy for max_depth 27 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 27 is: 0.9005998286203942\n","\n","The Training Accuracy for max_depth 28 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 28 is: 0.9005998286203942\n","\n","The Training Accuracy for max_depth 29 is: 0.9648317340801617\n","The Validation Accuracy for max_depth 29 is: 0.9005998286203942\n","\n"]}],"source":["# Checking accuracy on different depths using random forest model\n","from sklearn.ensemble import RandomForestClassifier\n","train=[]\n","val=[]\n","ndepth=np.arange(1,30)\n","\n","# max depth is used to prevent overfitting, limiting tree depth\n","\n","for max_d in ndepth:\n","  model = RandomForestClassifier(max_depth=max_d, random_state=42)\n","  model.fit(X_train,y_train)\n","\n","  score_train=model.score(X_train, y_train)\n","  score_val=model.score(X_val,y_val)\n","\n","  train.append(score_train)\n","  val.append(score_val)\n","\n","  # f is used to use max_d and score_train as variables\n","  print(f'The Training Accuracy for max_depth {max_d} is: {score_train}')\n","  print(f'The Validation Accuracy for max_depth {max_d} is: {score_val}')\n","  print('')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1715742783912,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"u7AKSOoXbxyQ","outputId":"cc219da1-209f-43dc-c46c-300269624df0"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.9648317340801617\n","0.9258783204798628\n"]}],"source":["print(max(train))\n","print(max(val))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1715742783913,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"fDNe019bb19E","outputId":"241074a6-027a-4e41-d047-ddf76dec97e9"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.8617143381846564\n","0.8571122536418166\n"]}],"source":["print(min(train))\n","print(min(val))"]},{"cell_type":"markdown","metadata":{"id":"KV0E2YYgga-w"},"source":["## Plotting"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1325,"status":"ok","timestamp":1715742785223,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"0ozPAJjngZ-v","outputId":"1c736bdb-8384-4e37-f72b-07025ef272d6"},"outputs":[{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7b4e99ab7a00>"]},"execution_count":23,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"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\n","text/plain":["<Figure size 900x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.figure(figsize=(9,6))\n","plt.plot(ndepth,train,label=\"Train\")\n","plt.plot(ndepth,val,label=\"Validation\")\n","\n","plt.title(\"best max depth\")\n","plt.xlabel(\"depth\")\n","plt.ylabel(\"accuracy\")\n","\n","# dotted lines for aid\n","for i in ndepth:\n","  plt.axvline(x=i,ymin=0,ymax=1,linestyle=':',alpha=0.2,color='black',)\n","\n","# x label values\n","plt.xticks(np.arange(min(ndepth),max(ndepth)+1,1))\n","\n","# displays legend to differentiate\n","plt.legend()"]},{"cell_type":"markdown","metadata":{"id":"3Q6xbVCCMzOv"},"source":["## Building model with best depth"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":756,"status":"ok","timestamp":1715742785954,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"FEfhoSZIUa0F","outputId":"f0373794-bc41-4aae-fd50-d8b428577e48"},"outputs":[{"data":{"text/plain":["93.32633473305339"]},"execution_count":24,"metadata":{},"output_type":"execute_result"}],"source":["# Testing data on random forest on max_depth 12 and calculating its accuracy\n","from sklearn.metrics import accuracy_score\n","clf= RandomForestClassifier(max_depth=12)\n","clf=clf.fit(X_train,y_train)\n","y_pred=clf.predict(X_test)\n","\n","# In this it compares the given label with the predicted labels\n","accuracy_score(y_test,y_pred)*100"]},{"cell_type":"markdown","metadata":{"id":"O4PNF7vtU6l_"},"source":["## Evaluating Model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1715742785955,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"e9NTjPWQU9MX","outputId":"cf0900b4-3570-41cc-cca7-682780a085a0"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.9319131353014095\n","0.9260925449871465\n"]}],"source":["# Didn't understand the purpose\n","print(clf.score(X_train,y_train))\n","print(clf.score(X_val,y_val))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":824,"status":"ok","timestamp":1715742786771,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"bFdZk8QwXVQS","outputId":"0ccede9a-9081-4836-b930-df9ccf502384"},"outputs":[{"data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7b4e991c9780>"]},"execution_count":26,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# confusion matrix for train data to check how well the model is fitting the\n","# training data\n","from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n","y_pred_train=clf.predict(X_train)\n","cm_display=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_train,\n","                                                                   y_pred_train)\n",",display_labels=clf.classes_)\n","cm_display.plot()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":880,"status":"ok","timestamp":1715742787633,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"zov2SKjEeBZR","outputId":"b26d9a57-e4a4-46fa-9fd0-f7a06251d1df"},"outputs":[{"data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7b4ed6314220>"]},"execution_count":27,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Confusion matrix for test data to check how well the model is generalizing\n","# to unseen data\n","y_pred_test=clf.predict(X_test)\n","cm_display=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test,\n","                                                                   y_pred_test)\n",",display_labels=clf.classes_)\n","cm_display.plot()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1136,"status":"ok","timestamp":1715742788743,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"vzhTN3Agez1t","outputId":"168d6e20-b678-467b-e5ad-1c25d9e45e61"},"outputs":[{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","     ALLERGY       0.96      0.99      0.98      7934\n","        COLD       0.88      0.28      0.42       498\n","       COVID       1.00      0.01      0.02      1000\n","         FLU       0.91      0.99      0.95     12349\n","\n","    accuracy                           0.93     21781\n","   macro avg       0.94      0.57      0.59     21781\n","weighted avg       0.93      0.93      0.91     21781\n","\n"]}],"source":["from sklearn.metrics import classification_report\n","print(classification_report(y_train,y_pred_train))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36,"status":"ok","timestamp":1715742788745,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"VNEfMQahfPg9","outputId":"552bd056-e829-4374-f176-63894a3be5e1"},"outputs":[{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","     ALLERGY       0.97      0.99      0.98      4978\n","        COLD       0.87      0.25      0.38       288\n","       COVID       0.00      0.00      0.00       590\n","         FLU       0.91      0.99      0.95      7480\n","\n","    accuracy                           0.93     13336\n","   macro avg       0.69      0.56      0.58     13336\n","weighted avg       0.89      0.93      0.91     13336\n","\n"]}],"source":["print(classification_report(y_test,y_pred_test))"]},{"cell_type":"markdown","metadata":{"id":"PXpQzuuPfivI"},"source":["From classification report and confusion report the model performance in covid and cold is low as the data is unbalanced so we will decrease the number of data in allergy and flu"]},{"cell_type":"markdown","metadata":{"id":"69QDWV6Mf96W"},"source":["#4. Under sampling Allergy and Flu"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z4EbG0fDgFJT"},"outputs":[],"source":["# Diving data into features and target\n","X=var.iloc[:,:-1]\n","y=var.iloc[:,-1]"]},{"cell_type":"markdown","metadata":{"id":"bVH1VgOOgrJS"},"source":["##Before Undersampling"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":33,"status":"ok","timestamp":1715742788746,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"Bb0fofBIguRy","outputId":"1f154d07-8b07-4ccf-e318-c610656c9090"},"outputs":[{"data":{"text/plain":["TYPE\n","FLU        25000\n","ALLERGY    16381\n","COVID       2048\n","COLD        1024\n","Name: count, dtype: int64"]},"execution_count":31,"metadata":{},"output_type":"execute_result"}],"source":["y.value_counts()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1715742788746,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"LkwJFMOQgzrA","outputId":"43204d85-f191-42f7-9fe5-6ea030ea5b4e"},"outputs":[{"data":{"text/plain":["<Axes: ylabel='count'>"]},"execution_count":32,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# piechart to show distribution of data\n","y.value_counts().plot.pie(autopct='%.2f')"]},{"cell_type":"markdown","metadata":{"id":"0wERcv7Sg7g6"},"source":["##After Undersampling"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"NljN5tIwg-et"},"outputs":[],"source":["# undersample helps in retaining 1024 samples each\n","from imblearn.under_sampling import RandomUnderSampler\n","rus=RandomUnderSampler(random_state=42, sampling_strategy={\"FLU\":1024,\n","                                                           \"ALLERGY\":1024,\"COVID\":1024})\n","X,y=rus.fit_resample(X,y)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1715742789596,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"6ACipjyDh-t0","outputId":"6d247b9a-b018-492e-f587-14b6b4dd3b2f"},"outputs":[{"data":{"text/plain":["<Axes: ylabel='count'>"]},"execution_count":34,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# piechart to show distribution of data after undersampling\n","y.value_counts().plot.pie(autopct='%.2f')"]},{"cell_type":"markdown","metadata":{"id":"UWNa6QNaiqYD"},"source":["Now we will again check the performace of the model after undersampling"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8802,"status":"ok","timestamp":1715742798367,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"E6HFw-IGiyVJ","outputId":"c78b2dad-beb7-4aca-e831-7c74566b451d"},"outputs":[{"name":"stdout","output_type":"stream","text":["The Training Accuracy for max_depth 1 is: 0.7891326021934197\n","The Validation Accuracy for max_depth 1 is: 0.8002322880371661\n","\n","The Training Accuracy for max_depth 2 is: 0.8768693918245264\n","The Validation Accuracy for max_depth 2 is: 0.8734030197444832\n","\n","The Training Accuracy for max_depth 3 is: 0.9057826520438684\n","The Validation Accuracy for max_depth 3 is: 0.8977932636469221\n","\n","The Training Accuracy for max_depth 4 is: 0.9346959122632104\n","The Validation Accuracy for max_depth 4 is: 0.9407665505226481\n","\n","The Training Accuracy for max_depth 5 is: 0.9491525423728814\n","The Validation Accuracy for max_depth 5 is: 0.9581881533101045\n","\n","The Training Accuracy for max_depth 6 is: 0.9536390827517448\n","The Validation Accuracy for max_depth 6 is: 0.9639953542392566\n","\n","The Training Accuracy for max_depth 7 is: 0.9546360917248256\n","The Validation Accuracy for max_depth 7 is: 0.9686411149825784\n","\n","The Training Accuracy for max_depth 8 is: 0.9551345962113659\n","The Validation Accuracy for max_depth 8 is: 0.9709639953542393\n","\n","The Training Accuracy for max_depth 9 is: 0.9551345962113659\n","The Validation Accuracy for max_depth 9 is: 0.9721254355400697\n","\n","The Training Accuracy for max_depth 10 is: 0.9551345962113659\n","The Validation Accuracy for max_depth 10 is: 0.9721254355400697\n","\n","The Training Accuracy for max_depth 11 is: 0.9551345962113659\n","The Validation Accuracy for max_depth 11 is: 0.9721254355400697\n","\n","The Training Accuracy for max_depth 12 is: 0.956630109670987\n","The Validation Accuracy for max_depth 12 is: 0.9709639953542393\n","\n","The Training Accuracy for max_depth 13 is: 0.9641076769690927\n","The Validation Accuracy for max_depth 13 is: 0.9698025551684089\n","\n","The Training Accuracy for max_depth 14 is: 0.9666001994017946\n","The Validation Accuracy for max_depth 14 is: 0.9663182346109176\n","\n","The Training Accuracy for max_depth 15 is: 0.9685942173479561\n","The Validation Accuracy for max_depth 15 is: 0.9663182346109176\n","\n","The Training Accuracy for max_depth 16 is: 0.9695912263210369\n","The Validation Accuracy for max_depth 16 is: 0.9639953542392566\n","\n","The Training Accuracy for max_depth 17 is: 0.9765702891326022\n","The Validation Accuracy for max_depth 17 is: 0.9570267131242741\n","\n","The Training Accuracy for max_depth 18 is: 0.977567298105683\n","The Validation Accuracy for max_depth 18 is: 0.9581881533101045\n","\n","The Training Accuracy for max_depth 19 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 19 is: 0.9558652729384437\n","\n","The Training Accuracy for max_depth 20 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 20 is: 0.9570267131242741\n","\n","The Training Accuracy for max_depth 21 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 21 is: 0.9581881533101045\n","\n","The Training Accuracy for max_depth 22 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 22 is: 0.9581881533101045\n","\n","The Training Accuracy for max_depth 23 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 23 is: 0.9581881533101045\n","\n","The Training Accuracy for max_depth 24 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 24 is: 0.9581881533101045\n","\n","The Training Accuracy for max_depth 25 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 25 is: 0.9581881533101045\n","\n","The Training Accuracy for max_depth 26 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 26 is: 0.9581881533101045\n","\n","The Training Accuracy for max_depth 27 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 27 is: 0.9581881533101045\n","\n","The Training Accuracy for max_depth 28 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 28 is: 0.9581881533101045\n","\n","The Training Accuracy for max_depth 29 is: 0.9780658025922233\n","The Validation Accuracy for max_depth 29 is: 0.9581881533101045\n","\n"]}],"source":["# Divding data into train,test and validation\n","X_train,X_test,y_train,y_test= train_test_split(X,y,test_size=0.3,\n","                                                random_state=42)\n","X_train,X_val,y_train,y_val= train_test_split(X_train,y_train,test_size=0.3,\n","                                                random_state=42)\n","\n","# Training and checking accuracy at a range of max depths\n","train=[]\n","val=[]\n","ndepth=np.arange(1,30)\n","\n","for max_d in ndepth:\n","  model = RandomForestClassifier(max_depth=max_d, random_state=42)\n","  model.fit(X_train,y_train)\n","\n","  score_train=model.score(X_train,y_train)\n","  score_val=model.score(X_val,y_val)\n","\n","  train.append(score_train)\n","  val.append(score_val)\n","\n","  print(f'The Training Accuracy for max_depth {max_d} is: {score_train}')\n","  print(f'The Validation Accuracy for max_depth {max_d} is: {score_val}')\n","  print('')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1109,"status":"ok","timestamp":1715742799451,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"8V6D4XzrmFBE","outputId":"86574efe-1bd8-467b-cf84-0b36e65c5e0b"},"outputs":[{"data":{"text/plain":["<matplotlib.legend.Legend at 0x7b4e99578760>"]},"execution_count":36,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAxIAAAIjCAYAAACXlS13AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAADDJklEQVR4nOydeXhU5fmw78m+kgBZSEIIiygqqwgoKqKiVBSrYl1bBddasCq1Cooi2krdEOta/bm0KhW1uCt+Ql2qICjKJovsgUBCwpKVrHO+PyYMBBJIhvNk8sBzX1cuJpOTO3cOUebNOe/7ehzHcTAMwzAMwzAMw2gCIcEOMAzDMAzDMAxDHzaQMAzDMAzDMAyjydhAwjAMwzAMwzCMJmMDCcMwDMMwDMMwmowNJAzDMAzDMAzDaDI2kDAMwzAMwzAMo8nYQMIwDMMwDMMwjCZjAwnDMAzDMAzDMJqMDSQMwzAMwzAMw2gyNpAwDMMwjFo6duzIyJEjg/K1169fj8fj4bHHHgvK1zcMw2gqNpAwDMNQwKuvvorH46nzlpKSwhlnnMGnn34q9nXLysq4//77+fLLL8W+xpHGJ598wv333x/sDMMwjEPGBhKGYRiKeOCBB3jttdf417/+xZ133kl+fj7Dhg3jo48+Evl6ZWVlTJo0yQYSLvLJJ58wadKkYGcYhmEcMmHBDjAMwzAaz7nnnsuJJ57of/+6664jNTWVf//735x//vlBLDMMwzCONOyKhGEYhmISExOJjo4mLKzu74W8Xi9Tp07l+OOPJyoqitTUVG666SZ27NhR57gffviBoUOHkpSURHR0NJ06deLaa68FfPfsJycnAzBp0iT/LVUHui1n9y1Y33zzDX/84x9JTk4mMTGRm266icrKSnbu3MnVV19N69atad26NXfeeSeO49RxPPbYYwwcOJC2bdsSHR1N3759eeedd+oc88orr+DxeHj55ZfrPP/QQw/h8Xj45JNPDnjeHMfhL3/5C+3btycmJoYzzjiDn3/+ud5jd+7cyW233UZmZiaRkZEcddRRPPzww3i9Xv8xe89veOKJJ8jKyiI6OprTTz+dpUuX+o8bOXIkzzzzDECd29T25YUXXqBLly5ERkbSr18/vv/++wN+P4ZhGMHArkgYhmEoorCwkIKCAhzHYevWrTz11FOUlJTw29/+ts5xN910E6+++iqjRo3ij3/8I+vWrePpp5/mp59+4ttvvyU8PJytW7dyzjnnkJyczLhx40hMTGT9+vXMmDEDgOTkZJ577jluvvlmLrroIi6++GIAevbsedDOW265hXbt2jFp0iS+++47XnjhBRITE5kzZw4dOnTgoYce4pNPPuHRRx+le/fuXH311f7PffLJJ7ngggu46qqrqKys5M033+Q3v/kNH330Eeeddx4Ao0aNYsaMGYwdO5azzz6bzMxMlixZwqRJk7juuusYNmzYAfvuu+8+/vKXvzBs2DCGDRvGjz/+yDnnnENlZWWd48rKyjj99NPJycnhpptuokOHDsyZM4fx48ezZcsWpk6dWuf4f/3rXxQXFzN69GjKy8t58sknOfPMM1myZIl/MLd582Y+//xzXnvttXrbpk2bRnFxMTfddBMej4dHHnmEiy++mLVr1xIeHn7Qc28YhtFsOIZhGEaL55VXXnGA/d4iIyOdV199tc6x//vf/xzAeeONN+o8P3PmzDrPv/vuuw7gfP/99w1+3fz8fAdwJk6c2KTOoUOHOl6v1//8ySef7Hg8Huf3v/+9/7nq6mqnffv2zumnn17HUVZWVuf9yspKp3v37s6ZZ55Z5/ktW7Y4bdq0cc4++2ynoqLC6dOnj9OhQwensLDwgI1bt251IiIinPPOO69O49133+0AzjXXXON/7sEHH3RiY2OdX375pY5j3LhxTmhoqJOdne04juOsW7fOAZzo6Ghn06ZN/uPmzZvnAM7tt9/uf2706NFOff/87na0bdvW2b59u//5999/3wGcDz/88IDfl2EYRnNjtzYZhmEo4plnnuHzzz/n888/5/XXX+eMM87g+uuv919FAHj77bdJSEjg7LPPpqCgwP/Wt29f4uLi+OKLLwDfbVEAH330EVVVVa52XnfddXVu2RkwYACO43Ddddf5nwsNDeXEE09k7dq1dT43Ojra/3jHjh0UFhZy2mmn8eOPP9Y5rl27dv7zcdppp7Fw4UJefvllWrVqdcC2WbNmUVlZyS233FKn8bbbbtvv2LfffpvTTjuN1q1b1zmXQ4YMoaamhq+//rrO8RdeeCEZGRn+9/v378+AAQMOeqvV3lx22WW0bt3a//5pp50GsN95MgzDCDZ2a5NhGIYi+vfvX2ey9RVXXEGfPn0YM2YM559/PhEREaxatYrCwkJSUlLqdWzduhWA008/nREjRjBp0iSeeOIJBg8ezIUXXsiVV15JZGTkIXV26NChzvsJCQkAZGZm7vf8vvM2PvroI/7yl7+wcOFCKioq/M/XN5fg8ssv5/XXX+fjjz/mxhtv5Kyzzjpo24YNGwDo2rVrneeTk5PrvIAHWLVqFYsXL/bPFdmX3edyN/s6AY4++mjeeuutg3btZt9zt7tp3/NkGIYRbGwgYRiGoZiQkBDOOOMMnnzySVatWsXxxx+P1+slJSWFN954o97P2f2i2OPx8M477/Ddd9/x4Ycf8tlnn3Httdfy+OOP89133xEXFxdwV2hoaKOfd/aabP2///2PCy64gEGDBvHss8+SlpZGeHg4r7zyCtOmTdvvc7dt28YPP/wAwLJly/B6vYSEuHex3ev1cvbZZ3PnnXfW+/Gjjz7ata+1m4bOnbPPpHTDMIxgYwMJwzAM5VRXVwNQUlICQJcuXZg1axannHJKnduEGuKkk07ipJNO4q9//SvTpk3jqquu4s033+T666+v9yqAJP/5z3+Iioris88+q3NV5JVXXqn3+NGjR1NcXMzkyZMZP348U6dOZezYsQf8GllZWYDvakPnzp39z+fn5+/3W/8uXbpQUlLCkCFDGtW/atWq/Z775Zdf6Nixo//95j6nhmEYUtgcCcMwDMVUVVXx//7f/yMiIoJjjz0WgEsvvZSamhoefPDB/Y6vrq5m586dgO9WmX1/y927d28A/y1FMTExAP7PkSY0NBSPx0NNTY3/ufXr1/Pee+/td+w777zD9OnT+dvf/sa4ceO4/PLLmTBhAr/88ssBv8aQIUMIDw/nqaeeqvP977sCE/jO5dy5c/nss8/2+9jOnTv9g7jdvPfee+Tk5Pjfnz9/PvPmzePcc8/1PxcbG+v/fMMwDM3YFQnDMAxFfPrpp6xYsQLw3Z8/bdo0Vq1axbhx4/yTjE8//XRuuukmJk+ezMKFCznnnHMIDw9n1apVvP322zz55JNccskl/POf/+TZZ5/loosuokuXLhQXF/Piiy/SqlUr//Kp0dHRHHfccUyfPp2jjz6aNm3a0L17d7p37y7y/Z133nlMmTKFX/3qV1x55ZVs3bqVZ555hqOOOorFixf7j9u6dSs333wzZ5xxBmPGjAHg6aef5osvvmDkyJF88803Dd7ilJyczB133MHkyZM5//zzGTZsGD/99BOffvopSUlJdY7985//zAcffMD555/PyJEj6du3L6WlpSxZsoR33nmH9evX1/mco446ilNPPZWbb76ZiooKpk6dStu2bevcGtW3b18A/vjHPzJ06FBCQ0O5/PLLXTuHhmEYzUZQ14wyDMMwGkV9y79GRUU5vXv3dp577rk6y5ju5oUXXnD69u3rREdHO/Hx8U6PHj2cO++809m8ebPjOI7z448/OldccYXToUMHJzIy0klJSXHOP/9854cffqjjmTNnjtO3b18nIiLioEvB7u7cd0nZiRMnOoCTn59f5/lrrrnGiY2NrfPcSy+95HTt2tWJjIx0unXr5rzyyiv+z9/NxRdf7MTHxzvr16+v87m7l0p9+OGHGz6ZjuPU1NQ4kyZNctLS0pzo6Ghn8ODBztKlS52srKw6y786juMUFxc748ePd4466ignIiLCSUpKcgYOHOg89thjTmVlpeM4e5ZuffTRR53HH3/cyczMdCIjI53TTjvNWbRoUR1fdXW1c8sttzjJycmOx+Pxf197O/blYOfdMAwjGHgcx2ZvGYZhGMahsH79ejp16sSjjz7KHXfcEewcwzCMZsHmSBiGYRiGYRiG0WRsIGEYhmEYhmEYRpOxgYRhGIZhGIZhGE3G5kgYhmEYhmEYhtFk7IqEYRiGYRiGYRhNxgYShmEYhmEYhmE0GduQLkC8Xi+bN28mPj4ej8cT7BzDMAzDMAzDOGQcx6G4uJj09PQGN/bcjQ0kAmTz5s1kZmYGO8MwDMMwDMMwXGfjxo20b9/+gMfYQCJA4uPjAd9JbtWqVbN9XcdxKCwsBCAhIcHVqyEa3RqbJd0amyXdGpsl3RqbJd3WrN+tsVnSrbFZ0q2xWdrdGIqKisjMzPS/1j0QNpAIkN1/qa1atWrWgYTX62X16tUAtG/f/qCXnA53t8ZmSbfGZkm3xmZJt8ZmSbc163drbJZ0a2yWdGtslnY3hcYMYGwgoZC4uDhzN4NXq1tjs6RbY7OkW2OzpNua9bs1Nku6NTZLujU2S7vdxPaRCJCioiISEhIoLCxs1isShmEYhmEYhiFFU17j2vKvhmEYhmEYhmE0Gbu1SZCamhqqqqqCnWG4RGhoKGFhYbbcr2EYhmEYBjaQEKOkpIRNmzbh9p1jjuNQXV0N4PqLWo3u5m6OiYkhLS2NiIiIQ3J7vV5WrlwJwDHHHOPqxDIJr1a3xmZJt8ZmSbc163drbJZ0a2yWdGtslna7jQ0kBKipqWHTpk3ExMSQnJzs+ovbXbt2ARAdHX3Eu5urOSoqiqqqKvLz81m3bh1du3Y95P+wy8rK3MhsNq9Wt8ZmSbfGZkm3Net3a2yWdGtslnRrbJZ2u4lNtg6QA01EKS8vZ926dXTs2JHo6GhXv67jONTU1AC+W23cfuGszd3czWVlZWzYsIFOnToRFRV1SO6ioiLAt4Swm+dDwqvVrbFZ0q2xWdJtzfrdGpsl3RqbJd0am6XdjaEpk61tIBEgjRlIHOqLTaPlYX+3hmEYhmEcztiqTYZhGIZhGIZhiGJzJJThOA5erxeAkJAQ1y+laXNrbN7tLi4uBiA+Pt7V8yHh1erW2Czp1tgs6bZm/W6NzZJujc2Sbo3N0m63sSsSCikvL6e8vFyFu2PHjkydOlXEvRtN52M3juOwatUqVq1a5erKXlJerW6NzZJujc2SbmvW79bYLOnW2Czp1tgs7XYbuyKhEIllwA422p04cSL3339/k73ff/89sbGxgEy3pFfa7fZEfGmvVrfGZkm3xmZJtzXrd2tslnRrbJZ0a2yWdruJTbYOkMNtsnVubq7/8fTp07nvvvv8axgDxMXFERcXB+xZzSgs7Mgbh2r8uzUMwzAMw2gsNtm6heE4DmWV1UF5a+w4sV27dv63hIQEPB6P//0VK1YQHx/Pp59+St++fYmMjOSbb75hzZo1/PrXvyY1NZW4uDj69evHrFmz6nj3vrUJfFc+/u///o+LLrqImJgYunbtygcffODm6TYMwzAMwzCagSPvV8pBYFdVDcfd91lQvvayB4YSE+HOX/O4ceN47LHH6Ny5M61bt2bjxo0MGzaMv/71r0RGRvKvf/2L4cOHs3LlSjp06NCgZ9KkSTzyyCM8+uijPPXUU1x11VVs2LCBNm3auNJpGIZhGIZhyGMDCcOP4zhUVFRQVVVV78cfeOABzj77bP/7bdq0oVevXv73H3zwQd59910++OADxowZU68b4JprruGKK64A4KGHHuLvf/878+fP51e/+lXAzQCRkZGur5og5fZ6vaxevRqAo446yrW5GFJerW6NzZJujc2SbmvW79bYLOnW2Czp1tgs7XYbG0g0A9HhoSx7YKgrLsdxKCvbBUBMTPRBX9xGh4c2yV9TU+Nf8nRfTjzxxDrvl5SUcP/99/Pxxx+zZcsWqqur2bVrF9nZ2Q26AXr27Ol/LjY2llatWrF169YmddbnlUDSvXtpNy1erW6NzZJujc2S7iO12et1KKuqoayimpKKasoqayjaVcniJeupqnZYXR7r+gujNcvXAbjqlvJqdWtslnRrbN7bnRIfxVFHHeWaVwIbSDQDHo/HtduLHMchMjQGgNDQUNfXFo6MjGxwEvXu1Zd2c8cdd/D555/z2GOPcdRRRxEdHc0ll1xCZWVlg26A8PDwOs97PJ4GBy+NbZZCyu3xeOjcubP/cUv3anVrbJZ0a2yWdGtsrqzxEtG6HTtKq/h29TbKqmooraimtLL2z4pqSit2P1dd52NllTWU1B5TVrn/L0kcx8FbUQpAyI8/ub8vj4BbY7OkW2OzpFtj897ui3qnc2kL3kMCbCChDo/HI7Za0m53aGjjrmJ8++23jBw5kosuugjwXaFYv379Ad27H7tFc5wPKXfr1q3VeLW6NTZLujU2S7pbUnNpRTVbiyvYWlTu+7O4gq3F5eQX+R7n1T5fuKv+W08D74S4iDBiIkOJjQwjNiKRiLAQZF66SM2Dk5xfp9GtsVnSrbHZ5z4mK6VFb0YHNpAwDoGuXbsyY8YMhg8fjsfj4d577z2kKwuGYRiHE47jULirqnaA4BsY7Ps4v3bwUFrPFYKGiAgNISkugviocGL9AwDfYCAuMoyYiDDiIkNr/wwjNnLvj+19TBhR4SEt/oWKYRgtFxtIKMNxHP+L9ZAQd/8B2O1u7GBgypQpXHvttQwcOJCkpCTuuusuioqKDtrt9q6V0udDyl1a6rskGhsb6+plXAmvVrfGZkm3xmZJt2Tzp0u2cN87C8grLscTHtUod0xEKKmtokiOjyQlPpKU+ChSWtV9nBwXQZi3Eo/Ho+Y8S7o1Nku6NTZLujU2S7vdJugDiWeeeYZHH32U3NxcevXqxVNPPUX//v3rPbaqqorJkyfzz3/+k5ycHI455hgefvjhOqv9dOzYkQ0bNuz3uX/4wx945plnABg8eDBfffVVnY/fdNNNPP/88y5+Z3KUl5cDEBMTI+K+7LLLGDVqlP+5wYMH1/viv2PHjvz3v/+t89zo0aPrvL/7VifHcSgvL6ekpGS/7p07dx5yM8idDwm34zj+Df/69Onj6v80Jbxa3RqbJd0amyXdEt7CXVVM+uBn/vPjRirz1gKQnHUMqQnRtYOCKFLiI32DhVZRtYME3+O4yIP/k+z1evnpp6WuNu/G/g71uzU2S7o1Nku73SaoA4np06czduxYnn/+eQYMGMDUqVMZOnQoK1euJCUlZb/jJ0yYwOuvv86LL75It27d+Oyzz7jooouYM2cOffr0AeD777+vs9LO0qVLOfvss/nNb35Tx3XDDTfwwAMP+N+XeBEqheQyYBrdGptBbiK3xsnnkm6NzZJujc2Sbje936wq4M/vLGJLYTkhHrj8pE5cOaADfXv1dPX/JRrPs6RbY7OkW2OzpFtjs7TbTTyOm/eZNJEBAwbQr18/nn76acD3m5bMzExuueUWxo0bt9/x6enp3HPPPXV+6z1ixAiio6N5/fXX6/0at912Gx999BGrVq3yj+gGDx5M79696+y43FQOtH14eXk569ato1OnTkRFRQX8NYyWh/3dGoaxL7sqa/jbp8v551zf1fCstjFMubQXfbNsk03DMPRxoNe4+xK0HS4qKytZsGABQ4YM2RMTEsKQIUOYO3duvZ9TUVGx34u36Ohovvnmmwa/xuuvv861116732WhN954g6SkJLp378748eMpKys7YG9FRQVFRUV13gzDMIwjmx+zdzDs7//zDyJ+d1IWn956mg0iDMM4IgjarU0FBQXU1NSQmppa5/nU1FRWrFhR7+cMHTqUKVOmMGjQILp06cLs2bOZMWNGg5uGvffee+zcuZORI0fWef7KK68kKyuL9PR0Fi9ezF133cXKlSuZMWNGg72TJ09m0qRJTfsmDcMwjMOSymovU2f9wvNfrcHrQLtWUTxySU8GHZ0c7DTDMIxmI+iTrZvCk08+yQ033EC3bt3weDx06dKFUaNG8fLLL9d7/EsvvcS5555Lenp6nedvvPFG/+MePXqQlpbGWWedxZo1a+jSpUu9rvHjxzN27Fj/+0VFRWRmZrrwXTUNx3GoqKgAfPfPuT25R5tbYzP4buNbu9Y3EbNz586u7uIp4dXq1tgs6dbYLOkO1Lt8SxFj31rE8i2+K9MX9cng/uHHkxCzZ7PNltZ8uLo1Nku6NTZLujU2S7vdJmgDiaSkJEJDQ8nLy6vzfF5eHu3atav3c5KTk3nvvfcoLy9n27ZtpKenM27cOP/uoXuzYcMGZs2adcCrDLsZMGAAAKtXr25wIBEZGdliJr40dAXmSHVrbAYoLCxU5dXq1tgs6dbYLOluirfG6/DC12uZ8vlKqmocWseE89BFPTi3R9ohu5uCxvMs6dbYLOnW2Czp1tgs7XaToA0kIiIi6Nu3L7Nnz+bCCy8EfCOw2bNnM2bMmAN+blRUFBkZGVRVVfGf//yHSy+9dL9jXnnlFVJSUjjvvPMO2rJw4UIA0tLq/8egpaF1lQBbkWEPHo+Hjh07+h+3dK9Wt8ZmSbfGZkl3U7zrC0r509uLWLBhBwBDjk1h8sU9SY6v//8RLaH5SHBrbJZ0a2yWdGtslna7TVBXbZo+fTrXXHMN//jHP+jfvz9Tp07lrbfeYsWKFaSmpnL11VeTkZHB5MmTAZg3bx45OTn07t2bnJwc7r//ftatW8ePP/5IYmKi3+v1eunUqRNXXHEFf/vb3+p8zTVr1jBt2jSGDRtG27ZtWbx4Mbfffjvt27ffb2+JA2GrNh2Z2N+tEN4aKC0Ab1WwS5pOZDxEJQS7whDCcRxen5fNQx8vZ1dVDXGRYdw3/Dh+07d9i/8H3jAMIxCasmpTUOdIXHbZZeTn53PfffeRm5tL7969mTlzpn8CdnZ2dp37wsrLy5kwYQJr164lLi6OYcOG8dprr9UZRADMmjWL7Oxsrr322v2+ZkREBLNmzWLq1KmUlpaSmZnJiBEjmDBhguj3ahhHLI4DZduhaBMUboLCnNrHOVCU43uueAt4q4NdGjgR8ZCQAQntodXef2ZAq/a+P8Ojg11pNJEthbu4853F/G9VAQAndW7DY7/pRfvWevYdMgzDkCSoVyQ0E6wrEo7j4PV6Ad9yuW5PLj4U9777c3Ts2JHbbruN2267rUG3x+Ph3Xff9d/eFmhzWFgYM2bM4KKLLgrIcyA37Gl26+/WcRx27doF+JYwdnPyuYT3gO7yotoBwV4DhMJNew0WNkP1roO7q0MgJJzocPcu5TqOw67aixxueve4HfBWEh3WCHdM230GGe3rDjji0yA0fI/7cPn5aMHuhryO4/D+ws3c9/5SisqriQwL4a5fdWPkwI6EhDTua9vfYfO4NTZLujU2S7o1Nku7G4OaKxJGYJSXlwPu7sY9fPhw/5yTfd3/+9//GDRoEIsWLaJnz56Ndn7//ffExsb633ej+/777+e9997zz2vZ7V2zZs1+q3O5gcS5Bt//JJYvXw5Anz59XP2fpoSX6gqcnIUsn/0fKNxIn7aVeEo2+wYKFY2cEBabUvviea/f0rfKgIRMnPg0lq/aDCGhvm6XVqhwvF6W//QTgKveOu6qXfTpnIynePOeKyyFm/YaXOVAZQmUbfO95S6uX+gJgbhUSGiPE5fO8oIwiE2hT78BeBI7+M5dbDIcwvcg9vOh1F2fd3tpJfe8u4RPl+YC0Kt9Ao9f2pujUuJabLNbaHRrbJZ0a2yWdGtslna7jQ0kFCLxA3XdddcxYsQINm/eTEZGRp2PvfLKK5x44olNGkSAb5WtvZH6D8Hj8dCuXTuRidGS//GGh4cf/KBgeUsLYOM831v2PNj8E1SXE77Vd4WGlBDY+9xEJe5zO49vgOB/3Codwg7w9+P1Eh65/dC760HqPPvd4eGQ1BVSjqn/IMeB8p11b+XaPcjYfeWmaDPUVPpu8SreAo6z51yvf3bPuQ4J953LA53r6NZ1/27qaxZCo3tv76xleYybsYSCkgrCQjz88ayu/GFwF8JCAxu8tej/xg8jt8ZmSbfGZkm3xmZpt5vYrU0B0qRbmxwHqg68c7YY4TEHfFGxm+rqatq3b8+YMWPqzBcpKSkhLS2NcePGsXTpUr7++mt27NhBly5duPvuu7niiiv8xx7o1iaAVatWcd111zF//nw6d+7Mk08+yTnnnFPn1qa77rqLd999l02bNtGuXTuuuuoq7rvvPsLDw3n11VcZNWpUne5XXnmFkSNH7neL1JIlS7j11luZO3cuMTExjBgxgilTphAX5/ut4siRI9m5cyennnoqjz/+OJWVlVx++eVMnTr1gP/xHpaTrb1eKFi5Z9CwcR5sX7P/cTFtIXMApHaHxMy6t+lENu23tcY+eL1QVrDXIKOeqxrFW8DxHtwVHrPP/Iy9r/7Y31d9FJdX8cCHy3h7wSYAuqbE8cRlvemeYZPoDcM48rBbm1oaVWXwkPu33TSKuzdDROxBDwsLC+Pqq6/m1Vdf5Z577vH/Jv7tt9+mpqaG3/72t7z99tvcddddtGrVio8//pjf/e53dOnShf79+x/U7/V6ufjii0lNTWXevHkUFhb6Bxh7Ex8fz6uvvkp6ejpLlizhhhtuID4+njvvvJPLLruMpUuXMnPmTGbNmgVAQsL+/9CXlpYydOhQTj75ZL7//nu2bt3K9ddfz5gxY3j11Vf9x33xxRekpaXxxRdfsHr1ai677DJ69+7NDTfccNDvRzWVpbDpB9g43zdo2DQfyuu5PSm5G2T2h8yTfAOItl0aNSg1AiAkBOJSfG8ZJ9R/TE21bzBR56rGPpPXywp8/7/Ztsr31hBx7eDY86H7CN/fbwve7MhtyqtqyC+uYGtxOVuLKthSWM5L36wjZ+cuPB64/tRO/OmcY4gKDw12qmEYRovHBhKGn2uvvZZHH32Ur776isGDBwO+3/iPGDGCrKws7rjjDv+xt9xyC5999hlvvfVWowYSs2bNYsWKFXz22Wf+uQwPPfQQ5557bp3j9r4a0rFjR+644w7efPNN7rzzTqKjo4mLiyMsLKzBTQsBpk2bRnl5Of/617/8czSefvpphg8fzsMPP+xfFax169Y8/fTThIaG0q1bN8477zxmz559+A0kdm6svU1pPmz8DnKXgrPPRnvhMZDR1zdgyBwAmf18t8gYLYfQMN+VoMTMho+p2uW7TarO1Yy9V8vKgYoiKMmF7//P9xafDsdf5BtUZJygdrBYUlHN1qJy8op8gwTfYKGCrUXlvj9rHxeV1786WGabaB67pBcDOrdt5nLDMAy92ECiOQiP8V0ZcAHHcaisrAR8S9ke9B7+8MZPEj7mmGM46aSTePHFFzn99NNZs2YN//vf/3jggQeoqanhoYce4q233iInJ4fKykoqKioaPQl52bJltG/fnrZt2+I4Dh6Ph5NPPnm/46ZPn87f//531qxZQ0lJCdXV1Qe8rLb3+dh9l97y5cvp1atXnYnep5xyCl6vl5UrV/oHEscffzyhoXt+65iWlsaSJUvqdTfqXDcBr9fL+vXrAd+AKcSl3wh7vV7WL5kHq2fRsXo1ITnf+1487kur9r6rDR1O8v2Z2t2/YlBzN0u6NTYfkjs82nflqG2Xhr0rl8DmRXTcOYeQXz6G4s3w3TO+t8Qs6H6xb1CR2r1JgwrJ87G1aBdf/vAzBcUVOPEpFJRWsrW4gvzaQcPW4grKKhu/C31kWAgprSJJjo0gumIbnZLiuPM3p9IqOsK1ZvuZbh63xmZJt8ZmSbfGZmm329hAojnweBp1e1GjcByqq33/uEdENG7+Q1O4+uqrueOOOyguLuaVV16hS5cunH766Tz88MM8+eSTTJ06lR49ehAbG8ttt93mf6HdWKqrq4mIqP8f67lz53LVVVcxadIkhg4dSkJCAm+++SaPP/74QZ2BsO9cCI/H41/udV93Q82Hwo4dvh1yd+9eecjk/Qzf/J0dn78J3ho6ptVOiPaEQlrP2isN/X1/JrRvGc3N4NbYLOneUVYNicfT8Yzf+iZ4r5kNS/8DKz+FnRvgmyd8b227+gYU3S+G5AYmkrvc7DgOuUXlLM0pYmlOIT9vLmRpThFbCsuozFsLQERqZzye+v9RjYsMIyU+kuT4SFJaRZESH+l7axVJSvzu96NoFR3m/+/9p9pVveIi3f/n0H6mm8etsVnSrbFZ0q2xWdrtJjaQUIjEi9rdXH755dx5551MmzaNf/3rX9x88814PB6+/fZbfv3rX/Pb3/4W8I2Wf/nlF4477rhGeY899lg2bdrEtm3b/FcxvvvuuzrHzJkzh6ysLO655x7/cxs2bKhzTEREBDU1Nfs9t+/XevXVVyktLfVflfj2228JCQnhmGMa94KoIbdbeDweOnTo4H8cMI4D676GOX+H1bPwOA4d4h3I6Ienz7nQ4WTf7SouDGRda25Gt8ZmSfd+3vAo6Hae762yFH75DH6eAb/8P98ci6/+5ntL7V57+9PF0KazK82O47Bpxy6W5hSytHbA8PPmQgpK9v/lhMfjoUvHLNISo2iflkpqq+j9BwitIomJaNo/aYfF36GLaHRrbJZ0a2yWdGtslna7jQ0klOHxeMSWBPN4PLRu3ZrLLruMu+++m6KiIkaOHAlA165deeedd5gzZw6tW7dmypQp5OXlNXogcfbZZ3P00Udz/fXX8+ijj1JUVFRnwLD7a2RnZ/Pmm2/Sr18/Pv74Y9599906x3Ts2JF169axcOFC2rdvT3x8vH/Z193/sV111VVMnDiRa665hvvvv5/8/HxuueUWfve73/lva2rs+ZA81/suj9skaqph2Xu+AcSWRbXSEDzHXUDywD9C+76udO7NITcHwa2xWdJ9QG9EbO1tTRf7Nhlc+anvSsWa2ZC31Pf23wch/QTfMcdfVOfK1oHcXq/Dum2ltVcZfFcbluYU1jtfITTEQ9eUOI5PT6B7Riu6ZyRwbForkSsGh93f4RHo1tgs6dbYLOnW2CztdhsbSBj7cd111/HSSy8xbNgw/8ToCRMmsHbtWoYOHUpMTAw33ngjF154IYWFjduMLCQkhHfffZfrrruO/v3707FjR/7+97/zq1/9yn/MBRdcwO23386YMWOoqKjgvPPO49577+X+++/3HzNixAhmzJjBGWecwc6dO/3Lv+5NTEwMn332Gbfeeiv9+vWrs/yreipK4KfXYO6zUJjtey4sGk74HZx0c4O/LTaMJhHVCnpd5nsr2w4rPvINKtZ9DZt/9L39vwm+K17HXwzH/RrifYP06hova/JL/Vcafq690lBazxyGiNAQjmkXT/eMVrUDhwS6tYu3FZMMwzCUYPtIBEiT9pFwmd338UtMvtHobs5mN/9uKyoqABq3kV5xHsx7Hn54ac9SrTFJMOAm6Hc9xLQJzCvZ3ELcGpsl3YfkLdkKy96HpTMge47/accTwob4E/igqj9f7Eih2rP/76giwzx0TIqlS3IcXZLj6JwcS1abWMJDG3fZvqKqBpK6EhmX2PTuA3mPtL/Dw9CtsVnSrbFZ0q2xWdp9MGwficMYx3HYtWsX4PvNu9tbsmtza2wG3wBl6dKlAPTp06fhQVD+SpjzFCye7psYC9CmCwwcA72u8K3SE4hXsrkFuTU2S7oP2RuXws7u1/B93AUsS1xO7JoP6Vv8JX1CVtOh8HtO2TKPU4A+aSGE1Pffy47at1+a2O04LN3ihZBQ+vQ5gZCsk/csHNAqrWmyvb1H4t/hYebW2Czp1tgs6dbYLO12GxtIKERy4o1Gt8ZmoM7Ss3VwHNgwxzf/4ZeZe57PHAAD/wjHDDvgBmINel1Ao1tjs6S7qd6Ckgrmr9vO/HXb+W7tNlbmFbPnOvaZwJkMSCzmt3ELaFX6OTE1RTitotzd5M7rELpzh28PjM0LYMuPvuVqARI77LX/yQBIOc6350YjORL+Dg93t8ZmSbfGZkm3xmZpt5vYrU0BEsxbm4zgIfp3662B5R/6BhA5C2qf9PhW1Bn4R+gwwN2vZxj1kFtYzrx125hXO3hYvbVkv2M6J8cyoFNbTurchv6d2pCWEF2PyWUcx7c87e4d2bPnwdafwam7ZDMRcb7NFXfvkdK+H0QlyPcZhmEcJtitTYahicoyWPgGzH0adqz3PRcaCb2vhJPHQNJRQc0zDm82bi+rHTT4Bg8btpXtd0y3dvH079SGAZ3a0r9TG5Ljm/+eXTweaN3R99bzUt9z5UW+QffGebVv30NlMaz7yvfm+0TfVYq9N2Bs3UntDt6GYRgtCRtICGIXew4/XP07LcmH+S/A9/8Hu7b7notuDf1ugP43QpyOpd8MXeworeSzn3P9Vxxydu6q8/EQDxyX3so/aOjfsQ2tY+X2rjkkolpBlzN8b+C7qrd1ee2gYj5s/M43ON/6s+9twSu+42JT9syxyBwA6b0hLAiDI8MwDOXYQEKA3fe1VVZWEh3t7iV/x3H8u0lHRES4PrlYm7u5m8vKfL+tPaT9JSpKcL6ZyoZPnoSacrISPHjadPJdfeh95SFtHuc4jn8Tv6ysLNfPhza3xmZJ95crt3LLC5+xo6yK0FYpeDweQkM89MhIYEDnNpzUqS19O7amVVTTf75bxPkICYV23X1v/a7zPVect9cVi/mw+Sco3QorPsJZ/iEbCh2ITCDrysfx9LzUtSsV9jPdPG6NzZJujc2Sbo3N0m63sYGEAGFhYcTExJCfn094eLirs+33XknI6/WKrVKkxd1czTU1NezatYutW7eSmJgY2CQorxcWvwmzJuEUb2FbsReSu9HhkrvxHP9r34sgF5q3bdsGQIcOHVw/H9rcGpsl3FU1Xh77fyt5/svVVG7bTvvWUfxmcBdOPiqJEzq0JtaFzd5a7PmIT4XjLvC9AVSVw5aFsHEezvrv2Dbva9ixkw4zbsCz4iM4/wmITQpucxC8Wt0amyXdGpsl3Rqbpd1uYwMJATweD2lpaaxbt84/onSTmhrfxk4SM/o1upuzOTExkXbt2jVdtGEufDbe99tQwJOYRfuz/gxHn4MnNdW134J6PB7at2/vf+wmGt0am912b9xexi3//omFG3cCHi4f3IvbhhxNh4y0I/Nch0f55kp0OAnPwD/S/ozNMO8feBY/Dcs/gOy5MPzv0G1Yy2luBq9Wt8ZmSbfGZkm3xmZpt9vYqk0B0pgZ7V6v139rjKGf8PDwpg9WdmyAWRPh53d970fEw6A7fLtQ2z3ZhjAfLd7M+P8sobiimlZRYTxySU9+1T3wfRcOazYvhHd/D/nLfe/3vgp+NdlWfDIM44ijKas22UAiQJpyko0jkIpi+OYJmPM01FSAJwROuBrOuAfiUoJdZxzm7Kqs4YGPfubf8zcC0DerNU9e3pv2rWOCXNbCqSqHL/7q2wQSBxIy4dfPQOfTg11mGIbRbNhAohkI5kCiqqoKOMQJv4eRu0U1e72waBrMfgBK8nzPdTzN95vNdj0Ozd1IWtT5aAFujc2H4v4lr5gx037kl7wSPB4YPfgobhvSlbDQkEPyNgaN7nq9G+bCe7/fsxzzgN/DWRMhomkDMfuZbh63xmZJt8ZmSbfGZmn3wWjKa9yWu+e2US9er5fFixezePFivF7vwT/hMHe3qOb138ILp8P7o32DiNad4PJpcM2H+w0ijojz0QLcGpsDdTuOw7R52Qx/6ht+ySshOT6S168bwB1Dj/EPIlpac7DdDXqzTobffwsnXut7f97z8I/TYNMPLbf5CHVrbJZ0a2yWdGtslna7jU22VojkxBuN7qA3b18Hn9/nm6gJENkKTr/TtxfEAeZBHLbno4W5NTY31V24q4q7Zyzh4yVbABh0dDJTLu1FUtz+P38tpbmluBv0Rsb5VnA65jz4YAxsWw0vnQ2njoXT74Kwg++tYT/TzePW2Czp1tgs6dbYLO12E7u1KUBsjoRBeRH873H47lmoqfTNg+g70jcPwoXlIw2jMfyUvYNb/v0Tm3bsIizEw52/OobrT+1MSIiOf4RUsGsHfPJnWPK27/12PeCiFyD1uOB2GYZhCGBzJJoBG0gcwXhr4KfX4b8PQmm+77nOg2HoQ5B6fFDTjCMHr9fhhf+t5bHPVlLtdchsE81TV5xA78zEYKcdvvz8Hnx0u28n+tAI3y8NBt7iyh4whmEYLQUbSDQDNpA4Qln3P5g5HvKW+N5v08U3gDh6qGt7QRjGwcgvrmDsWwv536oCAM7rmcbki3sEtCO10USK8+DDW+GXT33vZ54EFz4LbbsEt8swDMMlbCDRDARrIOE4Dhs3+pZ0zMzMdH0nRW3uZmuOrcLz+X2w4iPfB6MS4PRx0O/6Rt0r3VzdGv8OJd0amw/m/mZVAbdNX0hBSQVR4SHcP/x4LuvXuK9/OJ6PoHgdBxa+AZ+Og8piCI+Bcx6EE6/z/0KhxTUfpm6NzZJujc2Sbo3N0u7G0JTXuDbZWhmO45Cf77udpn379q7/4GpzizdvWgc/vUb7/HfxUA2eUN9KLoPHQ2zbQ3NrPB/K3BqbG3JX1Xh54vNfeO6rNTgOHJ0ax9NXnsDRqfEttrmluwP2ejzQ57fQaRC89wdY/z/4+E+w4mO44GlIyJBt3rIRykton5GBp6mbZB7MrfHvcPNG2LWd9jFVeELcW4zS8XrJX/0zgBq3xmZJt8bmOu6IWNf/W3QbG0gow+PxkJaW5n98pLtFm6vLSfvij7B9LZ44Dxx1lu82ppRjD92t8XwodGtsrs+9cXsZt775Ez9m7wTgqgEduPf844gKb9qLyMPlfLQYb2IHuPoDmP8PmHU/rPkvPHcyDHsMT/dLAnPXVEHxFijMgaIcKNy058/CTXgKN5G21XdLm2duW+hwEmT2h8wBkHEChEc3/fuopUX+HdZUQdHmuuehKMd3fgo34SncSFr+dp/3S4+rt5h6HIe0Et9NG56vdLg1Nku6NTbXcXcfgeeUM13zSmC3NgWIzZE4AvjqEd8ut7Epvt1tu55t8yCMZufTJVu46z+LKSqvJj4qjL9d3JPzeqYFO8vYl/xffJvY5SzwvX/sBb7lY/dewc3r9S3QULSp7kBh7xfHJbngNGbdeA+wzz/fIWGQ1ss3b2P34KJVC/5Z8Xp9e+7UM2Dacz7y2O/7rI/QSN/3bxiHE70uh/OnNPuXtTkSzYANJA5zdm6Ep/tB9S645GXoPiLYRcYRRnlVDX/5eBmvf5cNQO/MRJ66og+ZbZq2u7LRjNRUwzdPwFd/A281xCZD5zN8v1Ev2uT7s6by4J6QcGiVDgntfW+tMiAhA1q19/2Z0B7CYyF3MWyc53vLnucbhOxLYgffgGL3W8pxENoML7gdx7dsbkMDhN3nw1t9cFdoRO052PtcZEBC5p7HUQn2ix7DcAkbSDQDwRxI1NTUABDq4r2xmt0i3rdHwc8zqMkcCNd8SGiY+//wqjofit0amh3HYXtpJeu3lbI2v5T120r5f0s380teCZ6QUG4e3IWxZx9NeOih34Or4Xw0p1vEu2URvPt7anJ990+H1tnTwwPxaXu9GG6/58/dg4XYZDjA/db1NjsO7MzeM7DYOA/yft7/6kZEHGT03XNLVPt+vhfhB3LXR0VJ7aBg415XV2oHCIW1V1yqd9Xt9jr7nw9PiO987HsO9j4/MUlNPx8uodGtsVnSrbFZ2n0wbCDRDARrIOH1evnpp58A6NOnDyEuTu7R6Bbxrv8GXj0Pr+Php4HPQ1LXI/t8KHa3tObi8irWF5SxtqCE9QVlrCsoYd22Mtbll1BUvuc3s47jpTJvLYnRYTx36yUM7pYatObD2S3aXLmLn958CKrK6HPiAEISa397Hp8GoYEv09uk5vIi361WG+fDxu9g0w9QUbTPQR7fVYrM/njb9+enHbEQm0KfLsmEFG9p+GpCeWHjgmOToVUG3vgMfsoPg7gU+vQbQEhiB9/5iGt3SFdINP7cSbo1Nku6NTZLuxuDrdpkGIFSUw2f3uV73HcUJHUNbo+hjvKqGjZsqx0k7B4sFJSyrqCMgpKKA35uRmI0HZNi6NgmmtAdDqcfncygo5ObqdxwlbBIOP5C3+MefQ74G3UxolpBlzN8b+DbTHPr8torFrWDix3rYevPvrcfXoYttVcw0kIOfqtQZELdKwf7Xk1olQHhUbVf2wu1L4zoHqTzYRiG69gViQAJ5q1Nu//KJJYD0+h21fv9//mWcYxKhD/+hBPd2j33PrTU8+E4DhXVXsoqayitqKa0str3Z0UNJeVVVHmdI+p8HAiv10tBie+WpHUFpawvKGNz4S4O9H/VpLgIOiXF0ikplo5JsXSu/TOrTSzREXsuYWs8HxrdR3xzcd5et0PNx9n8E9RU4gmP3muAsO88jdrBQmTjlx52vbsZvFrdGpsl3Rqbpd0Hw65IHOZI/lBpdLvmLdsO//2L7/GZEyCmDZL/+Ur8z7KovJr84nIKSiopraimpKJ6z4CgomavQUE1pf6Bgu/Psr2Or/ba7xcOhfioMDrvNVjYe+DQ2N2nW/x/L4eJ+4hvjk+F4y7wvQGeqnKoKoPo1q5PXlZxPg4Dt8ZmSbfGZmm3m9hAwjB288VffauMpBzvu62pheD1Omwvq2RrUQVbi8vZWlxBfnEFW4t8j31v5WwtqqCiujHLRjaeqPAQ4iLDiIkIIzYyjLjIUFcm/B5OJESH+wcKu9/axEao+UfAMOoQHrXndiTDMIyDYAMJZTiOQ05ODgAZGRmu7zyqze2aN3eJ7/5ggHMfhtAw8fOxIXsj20srCY1vS35xpX9AkFdUQX7tgGFrUQUFJRWNvkLgOA7RVTtpExNJ29R2tS/+9wwEYiNC9zwXGbrXx0KJ9Q8WfB+LjQirs7rKEf3zcZi4NTZLuq1Zv1tjs6RbY7OkW2OztNttbCChDMdxyMvLAyA9Pd31H1xtble8jgOfjvMtk3jchdDpNNHmNfklvPy/NUz79GvKq7xEpHbG4zn4b/nbxEaQEh9JcnwkKfFRpLaKJCU+kpRWUb4/46NoGxvOip8XA+6v9HDE/nwcRm6NzZJua9bv1tgs6dbYLOnW2CztdhsbSCjD4/GQmprqf3yku13x/vwubPgGwqLhnAfdddfiOA5z1mzjpW/W8d8VW3Ech5rwVkREekhtFUVqq+jaQUEkyfG7BwZ7BglJcZFEhB18UOA4jrq/Q0m3xmZJt8ZmSbc163drbJZ0a2yWdGtslna7ja3aFCC2s/VhQmWZbwfrok0weDwMHueqvryqhg8Wbublb9exIrcY8M1fPKtbCtee2okBndrus1mVYRiGYRhG8LBVmwyjsXw71TeISOgAp9zqmja/uILXv9vAG/M2UFBSCUBMRCi/6duekad0olNSrGtfyzAMwzAMIxjYQEIhWtctbnFrRO9YD99M9T0e+hcIjz5k97LNRbz87To+WLiZyhrfCkoZidFcMzCLy07sQELMnqU/W9z5OEzdGpsl3RqbJd3WrN+tsVnSrbFZ0q2xWdrtJkFfx/GZZ56hY8eOREVFMWDAAObPn9/gsVVVVTzwwAN06dKFqKgoevXqxcyZM+scc//99+PxeOq8devWrc4x5eXljB49mrZt2xIXF8eIESP8k1paOl6vlx9//JEff/wRr9fdpT41ug/J+/8mQE0FdBoEx14QsNvrdZi1LI8rX/yOYX//H+8s2ERljZc+HRJ5+so+fPXnwdw4qEudQUSLPB+HoVtjs6RbY7Ok25r1uzU2S7o1Nku6NTZLu90mqFckpk+fztixY3n++ecZMGAAU6dOZejQoaxcuZKUlJT9jp8wYQKvv/46L774It26deOzzz7joosuYs6cOfTp08d/3PHHH8+sWbP874eF1f02b7/9dj7++GPefvttEhISGDNmDBdffDHffvut3DdrtCzWfgnLPwRPKPzq4YA2XiqtqOY/P27ilW/Xs66gFIDQEA/ndm/Htad24oQOrV2ONgzDMAzDaDkEdbL1gAED6NevH08//TTgG4FlZmZyyy23MG7c/pNe09PTueeeexg9erT/uREjRhAdHc3rr78O+K5IvPfeeyxcuLDer1lYWEhycjLTpk3jkksuAWDFihUce+yxzJ07l5NOOqlR7cGcbF1TUwNAaGiouQPx1lTB86dB/nLofxMMe6RJ7s07d/HPOev59/xsisqrAWgVFcYVAzpw9ckdyUjc/xYpV7obica/Q0m3xmZJt8ZmSbc163drbJZ0a2yWdGtslnYfDBWTrSsrK1mwYAHjx4/3PxcSEsKQIUOYO3duvZ9TUVFBVFTdHTejo6P55ptv6jy3atUq0tPTiYqK4uSTT2by5Ml06NABgAULFlBVVcWQIUP8x3fr1o0OHToccCBRUVFBRUWF//2ioqKm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1r+t42aVbR03q2zruFl122x81qYGasxnbRIR3PzCelyosGD7tLsR0dT7mn58IiIiIro+8VmbrnPnSitwocICAAj248XWRERERHTt8URCQ0dyz8JSUYZmPu5wd3E2tX3+/HmcP3/e1Kbqto6bVbZ13KyyreNmlW0dN6tsc7P+bR03q2zruFllW8fNqttm4omEZiwWC5L3pqHizB8I8TX3VQ8tFgt+/fVX/Prrr7BYLFq0ddyssq3jZpVtHTerbOu4WWWbm/Vv67hZZVvHzSrbOm5W3TYbL7bW0JnSKhhOTkpejM7FRd0/CVVtHTerbOu4WWVbx80q2zpuVtnmZv3bOm5W2dZxs8q2jptVt83Ei60bqDEvtp773QF8+MMRPNKrNV5IuOWafmwiIiIiun7xYuvrXLCvB7qG+yMy2KexpxARERHRDYr3SDRQY94jQURERESkgj1f4+rxACyyslgs+P333wEAERERpr8ku25tHTerbOu4WWVbx80q2zpuVtnmZv3bOm5W2dZxs8q2jptVt832511GV3T27FmcPXuWbcVdXds6blbZ1nGzyraOm1W2uVn/to6bVbZ13KyyreNm1W0z8R4JzRiGgZYtW1p/fqO3ddyssq3jZpVtHTerbOu4WWWbm/Vv67hZZVvHzSrbOm5W3TYbr5FoIF4jQURERETXGz5rExERERERKcUTCQ2Vl5ejvLycbcVdXds6blbZ1nGzyraOm1W2uVn/to6bVbZ13KyyreNm1W0z8URCMxaLBfv378f+/fuVvCS7bm0dN6ts67hZZVvHzSrbOm5W2eZm/ds6blbZ1nGzyraOm1W3zcaLrTWk8mnAdGzruFllW8fNKts6blbZ1nGzyjY369/WcbPKto6bVbZ13Ky6bSZebN1AvNiaiIiIiK43vNiaiIiIiIiU4okEERERERHZjddIaEZEcPToUQBAeHi4qS9UomNbx80q2zpuVtnWcbPKto6bVba5Wf+2jptVtnXcrLKt42bVbbPxHgnNiAhOnz6N06dPw+zLW3Rs67hZZVvHzSrbOm5W2dZxs8o2N+vf1nGzyraOm1W2ddysum023iOhGcMwEBISYv35jd7WcbPKto6bVbZ13KyyreNmlW1u1r+t42aVbR03q2zruFl122x81qYG4rM2EREREdH1hs/aRERERERESvFEQkOVlZWorKxkW3FX17aOm1W2ddyssq3jZpVtbta/reNmlW0dN6ts67hZddtMPJHQjMViQVpaGtLS0pS8JLtubR03q2zruFllW8fNKts6blbZ5mb92zpuVtnWcbPKto6bVbfNxoutG6jm0pLCwsJr+nEtFguKi4utH9vMl1DXsa3jZpVtHTerbOu4WWVbx80q29ysf1vHzSrbOm5W2dZxs+q2LWq+trXlMmqeSDRQUVERAKBly5aNvISIiIiIyFxFRUXw8/O76vvwWZsayGKxICcnBzfddNM1f2quwsJCtGzZEn/88YfpzxilY1vHzSrbOm5W2dZxs8q2jptVtrlZ/7aOm1W2ddyssq3jZtXt+ogIioqKEBISUu+9IbxHooGcnJwQFhbWqBt8fX2V/ePSsa3jZpVtHTerbOu4WWVbx80q29ysf1vHzSrbOm5W2dZxs+r21dR3T0QNXmxNRERERER244kEERERERHZjScSGnJ3d8ecOXPg7u7OtsKurm0dN6ts67hZZVvHzSrb3Kx/W8fNKts6blbZ1nGz6raZeLE1ERERERHZjfdIEBERERGR3XgiQUREREREduOJBBERERER2Y0nEkREREREZDeeSGjmhx9+QEJCAkJCQmAYBlatWmVKd968eejevTtuuukmBAUF4b777sOhQ4cc7r733nvo3Lmz9QVVYmJisG7dOhMWX+7VV1+FYRiYMmWKw60XX3wRhmHU+hEVFeX4SADHjx/Hgw8+iKZNm8LT0xOdOnVCSkqKw91WrVpdttkwDEycONHhdlVVFWbPno3WrVvD09MTbdu2xcsvvwwznquhqKgIU6ZMQUREBDw9PdGzZ0/s3r3b7k59x4aI4IUXXkCLFi3g6emJ2NhYZGZmmtJesWIF4uLi0LRpUxiGgX379jncraiowPTp09GpUyd4e3sjJCQEY8eORU5OjimbX3zxRURFRcHb2xtNmjRBbGwskpOTTWlfbMKECTAMA2+99ZbD3XHjxl327zs+Pt60zQcOHMCgQYPg5+cHb29vdO/eHUePHnW4XddxaRgGXn/9dYe6xcXFmDRpEsLCwuDp6YlbbrkF77//fr17bWmfPHkS48aNQ0hICLy8vBAfH2/T8WLLbcmFCxcwceJENG3aFD4+Phg2bBhOnjxpSvvDDz/E3XffDV9fXxiGgfz8fIe7Z8+exZNPPonIyEh4enoiPDwcf//731FQUGDK5r/97W9o27YtPD09ERgYiMGDB+PgwYOmtGuICO655x6bvm6wpXv33Xdf9u95woQJpm1OSkpCv3794O3tDV9fX/Tp0wfnz593qP3bb79d8Vhcvny5Q5tPnDiBMWPGIDg4GN7e3ujatSv+93//15TPx+HDhzFkyBAEBgbC19cXI0aMsOl4uVZ4IqGZkpISdOnSBYsWLTK1u337dkycOBE//fQTNm7ciIqKCsTFxaGkpMShblhYGF599VXs2bMHKSkp6NevHwYPHoxffvnFpOXVdu/ejQ8++ACdO3c2rdmxY0fk5uZaf/z4448ON8+dO4devXrB1dUV69atw6+//oo333wTTZo0cbi9e/fuWns3btwIABg+fLjD7fnz5+O9997DO++8gwMHDmD+/Pl47bXX8Pbbbzvc/utf/4qNGzfis88+w/79+xEXF4fY2FgcP37crk59x8Zrr72G//7v/8b777+P5ORkeHt7Y8CAAbhw4YLD7ZKSEvTu3Rvz5883bXNpaSn27t2L2bNnY+/evVixYgUOHTqEQYMGOdwGgA4dOuCdd97B/v378eOPP6JVq1aIi4vDqVOnHG7XWLlyJX766SeEhISYshkA4uPja/07X7p0qSntw4cPo3fv3oiKisK2bduQnp6O2bNnw8PDw+H2xXtzc3Px8ccfwzAMDBs2zKHu1KlTsX79enz++ec4cOAApkyZgkmTJmHNmjUObRYR3HfffThy5AhWr16N1NRUREREIDY2tt7bBFtuS5566il88803WL58ObZv346cnBwMHTq03s22tEtLSxEfH4/nnnuu3p6t3ZycHOTk5OCNN97Azz//jCVLlmD9+vUYP368KZu7deuGxMREHDhwABs2bICIIC4uDlVVVQ63a7z11lswDMOUz0eNRx99tNa/69dee82UdlJSEuLj4xEXF4ddu3Zh9+7dmDRpEpycrv4la33tli1bXnYsvvTSS/Dx8cE999zj0OaxY8fi0KFDWLNmDfbv34+hQ4dixIgRSE1NdWhzSUkJ4uLiYBgGtmzZgh07dqC8vBwJCQmwWCz1fr6vCSFtAZCVK1cqaefl5QkA2b59u+ntJk2ayP/8z/+Y1isqKpL27dvLxo0bpW/fvjJ58mSHm3PmzJEuXbo43LnU9OnTpXfv3qZ36zJ58mRp27atWCwWh1sDBw6URx55pNbb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dD1yaewBRER0fTp8+DDKy8sRHR1tfVtAQAAiIyMBAPv370dVVRU6dOhQ68+VlZWhadOm1l+7uLige/fu1l9HRUXB398fBw4cQI8ePa66oXPnztafe3t7w9fXF3l5eQ79vYiIqBpPJIiIqFEUFxfD2dkZe/bsgbOzc63f8/HxMeVjuLq61vq1YRiwWCymtImIbnR8aBMRESnRtm1buLq6Ijk52fq2c+fOISMjAwBw++23o6qqCnl5eWjXrl2tH8HBwdY/U1lZiZSUFOuvDx06hPz8fNx8880AADc3N1RVVV2jvxUREdXgiQQRESnh4+OD8ePHY9q0adiyZQt+/vlnjBs3Dk5O1Tc9HTp0wOjRozF27FisWLEC2dnZ2LVrF+bNm4e1a9daO66urnjyySeRnJyMPXv2YNy4cbjzzjutD2tq1aoVsrOzsW/fPpw+fRplZWWN8vclIrrR8ESCiIiUef3113HXXXchISEBsbGx6N27N7p162b9/cTERIwdOxZPP/00IiMjcd9992H37t0IDw+3vo+XlxemT5+OUaNGoVevXvDx8cGyZcusvz9s2DDEx8fjL3/5CwIDA7F06dJr+nckIrpRGSIijT2CiIioLkuWLMGUKVOQn5/f2FOIiOgSvEeCiIiIiIjsxhMJIiIiIiKyGx/aREREREREduM9EkREREREZDeeSBARERERkd14IkFERERERHbjiQQREREREdmNJxJERERERGQ3nkgQEREREZHdeCJBRERERER244kEERERERHZ7f8APab4G5yn8vcAAAAASUVORK5CYII=\n","text/plain":["<Figure size 900x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# plotting accuracy score vs depths\n","plt.figure(figsize=(9,6))\n","plt.plot(ndepth,train,label='Train')\n","plt.plot(ndepth,val,label='Validation')\n","\n","plt.title(\"Best max depth\")\n","plt.xlabel(\"depth\")\n","plt.ylabel(\"accuracy\")\n","\n","for i in ndepth:\n","  plt.axvline(x=i, ymin=0, ymax=1, linestyle=':', alpha=0.2, color='black',)\n","plt.xticks(np.arange(min(ndepth), max(ndepth)+1,1))\n","plt.legend()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1715742799451,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"iwGWcc3ym1pT","outputId":"961e8d3d-3787-40b3-fcf9-d29cdfe7196d"},"outputs":[{"name":"stdout","output_type":"stream","text":["95.85028478437754\n"]}],"source":["# Checking accuracy at max depth 12 as after that it get overfitted\n","clf=RandomForestClassifier(max_depth=12, random_state=42)\n","clf=clf.fit(X_train,y_train)\n","y_pred=clf.predict(X_test)\n","print(accuracy_score(y_test,y_pred)*100)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1715742799452,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"iCA4Mcadnh34","outputId":"4ec8e9bb-2191-4f85-a7a5-dabbe6261c1d"},"outputs":[{"name":"stdout","output_type":"stream","text":["0.956630109670987\n","0.9709639953542393\n"]}],"source":["#Didn't understand the significance\n","print(clf.score(X_train,y_train))\n","print(clf.score(X_val,y_val))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1154,"status":"ok","timestamp":1715742800583,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"3aZxQ9Evnzg6","outputId":"71597aeb-1d85-4252-8d27-a525b516ec5f"},"outputs":[{"data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7b4e9a52e230>"]},"execution_count":39,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# confusion matrix to check fitting\n","y_pred_train=clf.predict(X_train)\n","cm_display=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_train,\n","                                                                    y_pred_train)\n",",display_labels=clf.classes_)\n","cm_display.plot()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":58,"status":"ok","timestamp":1715742800584,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"yKMYoUlnoTEk","outputId":"90ff0630-67ef-4f88-a88a-6600c2336eb5"},"outputs":[{"data":{"text/plain":["<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x7b4e9a143580>"]},"execution_count":40,"metadata":{},"output_type":"execute_result"},{"data":{"image/png":"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\n","text/plain":["<Figure size 640x480 with 2 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# confusion matrix to check how well it generalize (on new data)\n","y_pred_test=clf.predict(X_test)\n","cm_display=ConfusionMatrixDisplay(confusion_matrix=confusion_matrix(y_test,\n","                                                                    y_pred_test)\n",",display_labels=clf.classes_)\n","cm_display.plot()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":52,"status":"ok","timestamp":1715742800584,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"MO9x7xIYowOB","outputId":"4f91fb28-3544-47ea-a943-8577f2b150e3"},"outputs":[{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","     ALLERGY       1.00      0.95      0.98       478\n","        COLD       0.91      1.00      0.95       510\n","       COVID       0.93      0.97      0.95       515\n","         FLU       1.00      0.91      0.95       503\n","\n","    accuracy                           0.96      2006\n","   macro avg       0.96      0.96      0.96      2006\n","weighted avg       0.96      0.96      0.96      2006\n","\n"]}],"source":["# classification report for training data\n","print(classification_report(y_train,y_pred_train))"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":52,"status":"ok","timestamp":1715742800585,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"4tzNkxSyo84I","outputId":"371b3783-9315-4d38-eab7-08d5a99e6d45"},"outputs":[{"name":"stdout","output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","     ALLERGY       1.00      0.96      0.98       321\n","        COLD       0.92      1.00      0.96       307\n","       COVID       0.93      0.97      0.95       298\n","         FLU       1.00      0.91      0.95       303\n","\n","    accuracy                           0.96      1229\n","   macro avg       0.96      0.96      0.96      1229\n","weighted avg       0.96      0.96      0.96      1229\n","\n"]}],"source":["# classification report for test data\n","print(classification_report(y_test,y_pred_test))"]},{"cell_type":"markdown","metadata":{"id":"7NPFs8EkpPSr"},"source":["1) Model performance has increased after undersampling.\n","\n","2) We used to build models and find hyperparameter manaully, now we will try to build different models and find best hyperparameter with gridsearch provided by sklearn."]},{"cell_type":"markdown","metadata":{"id":"tv4dJ_c73yRn"},"source":["#5. Building different models (with grid search)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yy40xOCW35Cc"},"outputs":[],"source":["# Grid search will try possible parameters and return the best\n","from sklearn.model_selection import GridSearchCV\n","X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.3,\n","                                                    random_state=42)"]},{"cell_type":"markdown","metadata":{"id":"d-M_hCpm42xQ"},"source":["Now we will data only into train and test, as we will use grid search for hyperparameter tuning and it splits the train data internally to validate and train"]},{"cell_type":"markdown","metadata":{"id":"hWi0oII25KDg"},"source":["##Random Forest"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9hMP_S8O5M8t"},"outputs":[],"source":["from sklearn.ensemble import RandomForestClassifier\n","\n","# n_estimators a range for values of no of trees in the forest\n","# criterion the function to check the quality of split, it will explore 3 diff\n","# criteria\n","param_grid={\n","    'max_depth':np.arange(1,20),'n_estimators':np.arange(1,10),\n","    'criterion':[\"gini\", \"entropy\", \"log_loss\"]\n","}\n","rf=RandomForestClassifier(random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":92100,"status":"ok","timestamp":1715742892636,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"_h7mhBNh6gKA","outputId":"1736231c-5911-4682-b779-ed2eca77adc6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 513 candidates, totalling 2565 fits\n","[CV 1/5] END criterion=gini, max_depth=1, n_estimators=1;, score=(train=0.372, test=0.382) total time=   0.2s\n","[CV 2/5] END criterion=gini, max_depth=1, n_estimators=1;, score=(train=0.379, test=0.366) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=1, n_estimators=1;, score=(train=0.376, test=0.380) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=1, n_estimators=1;, score=(train=0.377, test=0.375) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=1, n_estimators=1;, score=(train=0.377, test=0.377) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=1, n_estimators=2;, score=(train=0.372, test=0.382) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=1, n_estimators=2;, score=(train=0.376, test=0.364) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=1, n_estimators=2;, score=(train=0.374, test=0.379) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=1, n_estimators=2;, score=(train=0.375, test=0.373) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=1, n_estimators=2;, score=(train=0.375, test=0.375) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=1, n_estimators=3;, score=(train=0.372, test=0.382) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=1, n_estimators=3;, score=(train=0.376, test=0.364) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=1, n_estimators=3;, score=(train=0.374, test=0.379) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=1, n_estimators=3;, score=(train=0.375, test=0.373) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=1, n_estimators=3;, score=(train=0.434, test=0.436) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=1, n_estimators=4;, score=(train=0.512, test=0.516) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=1, n_estimators=4;, score=(train=0.515, test=0.503) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=1, n_estimators=4;, score=(train=0.507, test=0.538) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=1, n_estimators=4;, score=(train=0.516, test=0.503) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=1, n_estimators=4;, score=(train=0.574, test=0.567) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=1, n_estimators=5;, score=(train=0.572, test=0.573) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=1, n_estimators=5;, score=(train=0.572, test=0.573) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=1, n_estimators=5;, score=(train=0.569, test=0.586) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=1, n_estimators=5;, score=(train=0.575, test=0.562) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=1, n_estimators=5;, score=(train=0.574, test=0.567) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=1, n_estimators=6;, score=(train=0.602, test=0.605) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=1, n_estimators=6;, score=(train=0.603, test=0.601) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=1, n_estimators=6;, score=(train=0.597, test=0.625) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=1, n_estimators=6;, score=(train=0.605, test=0.593) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=1, n_estimators=6;, score=(train=0.606, test=0.590) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=1, n_estimators=7;, score=(train=0.602, test=0.605) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=1, n_estimators=7;, score=(train=0.603, test=0.601) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=1, n_estimators=7;, score=(train=0.597, test=0.625) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=1, n_estimators=7;, score=(train=0.605, test=0.593) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=1, n_estimators=7;, score=(train=0.606, test=0.590) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=1, n_estimators=8;, score=(train=0.621, test=0.615) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=1, n_estimators=8;, score=(train=0.620, test=0.618) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=1, n_estimators=8;, score=(train=0.616, test=0.635) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=1, n_estimators=8;, score=(train=0.620, test=0.616) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=1, n_estimators=8;, score=(train=0.621, test=0.613) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=1, n_estimators=9;, score=(train=0.608, test=0.601) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=1, n_estimators=9;, score=(train=0.593, test=0.580) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=1, n_estimators=9;, score=(train=0.585, test=0.613) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=1, n_estimators=9;, score=(train=0.592, test=0.583) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=1, n_estimators=9;, score=(train=0.607, test=0.604) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=2, n_estimators=1;, score=(train=0.514, test=0.510) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=2, n_estimators=1;, score=(train=0.515, test=0.505) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=2, n_estimators=1;, score=(train=0.441, test=0.440) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=2, n_estimators=1;, score=(train=0.436, test=0.435) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=2, n_estimators=1;, score=(train=0.515, test=0.504) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=2, n_estimators=2;, score=(train=0.575, test=0.568) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=2, n_estimators=2;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=2, n_estimators=2;, score=(train=0.575, test=0.585) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=2, n_estimators=2;, score=(train=0.570, test=0.558) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=2, n_estimators=2;, score=(train=0.515, test=0.504) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=2, n_estimators=3;, score=(train=0.681, test=0.639) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=2, n_estimators=3;, score=(train=0.671, test=0.681) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=2, n_estimators=3;, score=(train=0.635, test=0.665) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=2, n_estimators=3;, score=(train=0.636, test=0.623) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=2, n_estimators=3;, score=(train=0.636, test=0.632) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=2, n_estimators=4;, score=(train=0.681, test=0.639) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=2, n_estimators=4;, score=(train=0.671, test=0.681) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=2, n_estimators=4;, score=(train=0.731, test=0.757) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=2, n_estimators=4;, score=(train=0.732, test=0.707) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=2, n_estimators=4;, score=(train=0.719, test=0.702) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=2, n_estimators=5;, score=(train=0.741, test=0.697) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=2, n_estimators=5;, score=(train=0.727, test=0.751) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=2, n_estimators=5;, score=(train=0.763, test=0.777) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=2, n_estimators=5;, score=(train=0.764, test=0.747) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=2, n_estimators=5;, score=(train=0.752, test=0.738) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=2, n_estimators=6;, score=(train=0.817, test=0.784) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=2, n_estimators=6;, score=(train=0.783, test=0.812) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=2, n_estimators=6;, score=(train=0.809, test=0.818) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=2, n_estimators=6;, score=(train=0.806, test=0.792) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=2, n_estimators=6;, score=(train=0.810, test=0.803) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=2, n_estimators=7;, score=(train=0.766, test=0.730) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=2, n_estimators=7;, score=(train=0.749, test=0.761) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=2, n_estimators=7;, score=(train=0.791, test=0.824) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=2, n_estimators=7;, score=(train=0.797, test=0.766) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=2, n_estimators=7;, score=(train=0.800, test=0.785) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=2, n_estimators=8;, score=(train=0.800, test=0.770) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=2, n_estimators=8;, score=(train=0.779, test=0.789) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=2, n_estimators=8;, score=(train=0.808, test=0.841) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=2, n_estimators=8;, score=(train=0.832, test=0.803) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=2, n_estimators=8;, score=(train=0.799, test=0.794) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=2, n_estimators=9;, score=(train=0.819, test=0.780) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=2, n_estimators=9;, score=(train=0.812, test=0.826) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=2, n_estimators=9;, score=(train=0.838, test=0.874) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=2, n_estimators=9;, score=(train=0.862, test=0.836) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=2, n_estimators=9;, score=(train=0.834, test=0.827) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=3, n_estimators=1;, score=(train=0.578, test=0.578) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=3, n_estimators=1;, score=(train=0.578, test=0.566) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=3, n_estimators=1;, score=(train=0.574, test=0.571) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=3, n_estimators=1;, score=(train=0.561, test=0.564) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=3, n_estimators=1;, score=(train=0.579, test=0.564) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=3, n_estimators=2;, score=(train=0.722, test=0.699) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=3, n_estimators=2;, score=(train=0.716, test=0.713) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=3, n_estimators=2;, score=(train=0.716, test=0.710) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=3, n_estimators=2;, score=(train=0.660, test=0.661) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=3, n_estimators=2;, score=(train=0.683, test=0.695) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=3, n_estimators=3;, score=(train=0.828, test=0.793) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=3, n_estimators=3;, score=(train=0.812, test=0.824) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=3, n_estimators=3;, score=(train=0.797, test=0.827) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=3, n_estimators=3;, score=(train=0.750, test=0.742) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=3, n_estimators=3;, score=(train=0.779, test=0.777) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=3, n_estimators=4;, score=(train=0.809, test=0.768) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=3, n_estimators=4;, score=(train=0.801, test=0.808) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=3, n_estimators=4;, score=(train=0.833, test=0.855) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=3, n_estimators=4;, score=(train=0.825, test=0.791) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=3, n_estimators=4;, score=(train=0.809, test=0.803) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=3, n_estimators=5;, score=(train=0.770, test=0.721) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=3, n_estimators=5;, score=(train=0.799, test=0.817) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=3, n_estimators=5;, score=(train=0.838, test=0.853) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=3, n_estimators=5;, score=(train=0.845, test=0.829) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=3, n_estimators=5;, score=(train=0.776, test=0.778) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=3, n_estimators=6;, score=(train=0.819, test=0.794) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=3, n_estimators=6;, score=(train=0.843, test=0.845) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=3, n_estimators=6;, score=(train=0.866, test=0.881) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=3, n_estimators=6;, score=(train=0.832, test=0.824) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=3, n_estimators=6;, score=(train=0.807, test=0.801) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=3, n_estimators=7;, score=(train=0.832, test=0.800) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=3, n_estimators=7;, score=(train=0.843, test=0.847) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=3, n_estimators=7;, score=(train=0.861, test=0.887) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=3, n_estimators=7;, score=(train=0.857, test=0.838) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=3, n_estimators=7;, score=(train=0.832, test=0.825) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=3, n_estimators=8;, score=(train=0.849, test=0.812) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=3, n_estimators=8;, score=(train=0.857, test=0.861) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=3, n_estimators=8;, score=(train=0.868, test=0.878) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=3, n_estimators=8;, score=(train=0.877, test=0.871) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=3, n_estimators=8;, score=(train=0.866, test=0.869) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=3, n_estimators=9;, score=(train=0.869, test=0.826) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=3, n_estimators=9;, score=(train=0.857, test=0.857) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=3, n_estimators=9;, score=(train=0.864, test=0.867) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=3, n_estimators=9;, score=(train=0.872, test=0.871) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=3, n_estimators=9;, score=(train=0.859, test=0.869) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=4, n_estimators=1;, score=(train=0.704, test=0.686) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=4, n_estimators=1;, score=(train=0.710, test=0.704) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=4, n_estimators=1;, score=(train=0.670, test=0.658) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=4, n_estimators=1;, score=(train=0.622, test=0.623) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=4, n_estimators=1;, score=(train=0.708, test=0.710) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=4, n_estimators=2;, score=(train=0.818, test=0.780) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=4, n_estimators=2;, score=(train=0.813, test=0.812) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=4, n_estimators=2;, score=(train=0.810, test=0.824) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=4, n_estimators=2;, score=(train=0.688, test=0.667) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=4, n_estimators=2;, score=(train=0.786, test=0.798) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=4, n_estimators=3;, score=(train=0.867, test=0.822) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=4, n_estimators=3;, score=(train=0.857, test=0.864) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=4, n_estimators=3;, score=(train=0.850, test=0.874) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=4, n_estimators=3;, score=(train=0.778, test=0.777) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=4, n_estimators=3;, score=(train=0.849, test=0.853) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=4, n_estimators=4;, score=(train=0.863, test=0.810) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=4, n_estimators=4;, score=(train=0.828, test=0.815) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=4, n_estimators=4;, score=(train=0.846, test=0.885) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=4, n_estimators=4;, score=(train=0.831, test=0.815) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=4, n_estimators=4;, score=(train=0.853, test=0.841) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=4, n_estimators=5;, score=(train=0.848, test=0.787) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=4, n_estimators=5;, score=(train=0.870, test=0.873) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=4, n_estimators=5;, score=(train=0.890, test=0.909) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=4, n_estimators=5;, score=(train=0.848, test=0.855) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=4, n_estimators=5;, score=(train=0.859, test=0.848) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=4, n_estimators=6;, score=(train=0.881, test=0.833) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=4, n_estimators=6;, score=(train=0.876, test=0.883) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=4, n_estimators=6;, score=(train=0.874, test=0.899) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=4, n_estimators=6;, score=(train=0.871, test=0.880) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=4, n_estimators=6;, score=(train=0.869, test=0.867) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=4, n_estimators=7;, score=(train=0.880, test=0.826) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=4, n_estimators=7;, score=(train=0.860, test=0.850) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=4, n_estimators=7;, score=(train=0.888, test=0.916) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=4, n_estimators=7;, score=(train=0.880, test=0.892) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=4, n_estimators=7;, score=(train=0.886, test=0.888) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=4, n_estimators=8;, score=(train=0.896, test=0.847) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=4, n_estimators=8;, score=(train=0.871, test=0.862) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=4, n_estimators=8;, score=(train=0.878, test=0.906) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=4, n_estimators=8;, score=(train=0.884, test=0.888) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=4, n_estimators=8;, score=(train=0.896, test=0.895) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=4, n_estimators=9;, score=(train=0.897, test=0.847) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=4, n_estimators=9;, score=(train=0.865, test=0.866) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=4, n_estimators=9;, score=(train=0.880, test=0.909) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=4, n_estimators=9;, score=(train=0.890, test=0.880) total time=   0.1s\n","[CV 5/5] END criterion=gini, max_depth=4, n_estimators=9;, score=(train=0.907, test=0.911) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=5, n_estimators=1;, score=(train=0.799, test=0.758) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=5, n_estimators=1;, score=(train=0.795, test=0.774) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=5, n_estimators=1;, score=(train=0.707, test=0.712) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=5, n_estimators=1;, score=(train=0.639, test=0.651) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=5, n_estimators=1;, score=(train=0.789, test=0.796) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=5, n_estimators=2;, score=(train=0.893, test=0.855) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=5, n_estimators=2;, score=(train=0.911, test=0.904) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=5, n_estimators=2;, score=(train=0.841, test=0.860) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=5, n_estimators=2;, score=(train=0.787, test=0.803) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=5, n_estimators=2;, score=(train=0.844, test=0.855) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=5, n_estimators=3;, score=(train=0.863, test=0.829) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=5, n_estimators=3;, score=(train=0.891, test=0.878) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=5, n_estimators=3;, score=(train=0.861, test=0.888) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=5, n_estimators=3;, score=(train=0.853, test=0.857) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=5, n_estimators=3;, score=(train=0.849, test=0.857) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=5, n_estimators=4;, score=(train=0.888, test=0.845) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=5, n_estimators=4;, score=(train=0.877, test=0.866) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=5, n_estimators=4;, score=(train=0.838, test=0.867) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=5, n_estimators=4;, score=(train=0.879, test=0.880) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=5, n_estimators=4;, score=(train=0.870, test=0.869) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=5, n_estimators=5;, score=(train=0.889, test=0.848) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=5, n_estimators=5;, score=(train=0.899, test=0.885) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=5, n_estimators=5;, score=(train=0.867, test=0.885) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=5, n_estimators=5;, score=(train=0.895, test=0.901) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=5, n_estimators=5;, score=(train=0.889, test=0.901) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=5, n_estimators=6;, score=(train=0.907, test=0.862) total time=   0.1s\n","[CV 2/5] END criterion=gini, max_depth=5, n_estimators=6;, score=(train=0.907, test=0.895) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=5, n_estimators=6;, score=(train=0.885, test=0.914) total time=   0.1s\n","[CV 4/5] END criterion=gini, max_depth=5, n_estimators=6;, score=(train=0.905, test=0.911) total time=   0.1s\n","[CV 5/5] END criterion=gini, max_depth=5, n_estimators=6;, score=(train=0.901, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=5, n_estimators=7;, score=(train=0.909, test=0.864) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=5, n_estimators=7;, score=(train=0.901, test=0.889) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=5, n_estimators=7;, score=(train=0.881, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=5, n_estimators=7;, score=(train=0.900, test=0.895) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=5, n_estimators=7;, score=(train=0.903, test=0.916) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=5, n_estimators=8;, score=(train=0.914, test=0.873) total time=   0.1s\n","[CV 2/5] END criterion=gini, max_depth=5, n_estimators=8;, score=(train=0.906, test=0.887) total time=   0.1s\n","[CV 3/5] END criterion=gini, max_depth=5, n_estimators=8;, score=(train=0.888, test=0.916) total time=   0.1s\n","[CV 4/5] END criterion=gini, max_depth=5, n_estimators=8;, score=(train=0.908, test=0.904) total time=   0.1s\n","[CV 5/5] END criterion=gini, max_depth=5, n_estimators=8;, score=(train=0.909, test=0.921) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=5, n_estimators=9;, score=(train=0.917, test=0.868) total time=   0.3s\n","[CV 2/5] END criterion=gini, max_depth=5, n_estimators=9;, score=(train=0.908, test=0.897) total time=   0.3s\n","[CV 3/5] END criterion=gini, max_depth=5, n_estimators=9;, score=(train=0.892, test=0.920) total time=   0.3s\n","[CV 4/5] END criterion=gini, max_depth=5, n_estimators=9;, score=(train=0.918, test=0.911) total time=   0.2s\n","[CV 5/5] END criterion=gini, max_depth=5, n_estimators=9;, score=(train=0.910, test=0.923) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=6, n_estimators=1;, score=(train=0.837, test=0.791) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=6, n_estimators=1;, score=(train=0.839, test=0.845) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=6, n_estimators=1;, score=(train=0.782, test=0.791) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=6, n_estimators=1;, score=(train=0.778, test=0.796) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=6, n_estimators=1;, score=(train=0.840, test=0.843) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=6, n_estimators=2;, score=(train=0.899, test=0.857) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=6, n_estimators=2;, score=(train=0.891, test=0.890) total time=   0.1s\n","[CV 3/5] END criterion=gini, max_depth=6, n_estimators=2;, score=(train=0.907, test=0.928) total time=   0.1s\n","[CV 4/5] END criterion=gini, max_depth=6, n_estimators=2;, score=(train=0.872, test=0.881) total time=   0.1s\n","[CV 5/5] END criterion=gini, max_depth=6, n_estimators=2;, score=(train=0.877, test=0.892) total time=   0.2s\n","[CV 1/5] END criterion=gini, max_depth=6, n_estimators=3;, score=(train=0.896, test=0.859) total time=   0.1s\n","[CV 2/5] END criterion=gini, max_depth=6, n_estimators=3;, score=(train=0.890, test=0.889) total time=   0.1s\n","[CV 3/5] END criterion=gini, max_depth=6, n_estimators=3;, score=(train=0.898, test=0.918) total time=   0.1s\n","[CV 4/5] END criterion=gini, max_depth=6, n_estimators=3;, score=(train=0.892, test=0.887) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=6, n_estimators=3;, score=(train=0.888, test=0.883) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=6, n_estimators=4;, score=(train=0.908, test=0.869) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=6, n_estimators=4;, score=(train=0.901, test=0.901) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=6, n_estimators=4;, score=(train=0.883, test=0.918) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=6, n_estimators=4;, score=(train=0.905, test=0.902) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=6, n_estimators=4;, score=(train=0.904, test=0.892) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=6, n_estimators=5;, score=(train=0.917, test=0.875) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=6, n_estimators=5;, score=(train=0.908, test=0.904) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=6, n_estimators=5;, score=(train=0.908, test=0.928) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=6, n_estimators=5;, score=(train=0.923, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=6, n_estimators=5;, score=(train=0.918, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=6, n_estimators=6;, score=(train=0.923, test=0.887) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=6, n_estimators=6;, score=(train=0.916, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=6, n_estimators=6;, score=(train=0.911, test=0.934) total time=   0.1s\n","[CV 4/5] END criterion=gini, max_depth=6, n_estimators=6;, score=(train=0.929, test=0.930) total time=   0.1s\n","[CV 5/5] END criterion=gini, max_depth=6, n_estimators=6;, score=(train=0.914, test=0.911) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=6, n_estimators=7;, score=(train=0.922, test=0.887) total time=   0.1s\n","[CV 2/5] END criterion=gini, max_depth=6, n_estimators=7;, score=(train=0.915, test=0.908) total time=   0.1s\n","[CV 3/5] END criterion=gini, max_depth=6, n_estimators=7;, score=(train=0.903, test=0.928) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=6, n_estimators=7;, score=(train=0.918, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=6, n_estimators=7;, score=(train=0.917, test=0.918) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=6, n_estimators=8;, score=(train=0.939, test=0.906) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=6, n_estimators=8;, score=(train=0.924, test=0.916) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=6, n_estimators=8;, score=(train=0.916, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=6, n_estimators=8;, score=(train=0.934, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=6, n_estimators=8;, score=(train=0.923, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=6, n_estimators=9;, score=(train=0.937, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=6, n_estimators=9;, score=(train=0.924, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=6, n_estimators=9;, score=(train=0.908, test=0.930) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=6, n_estimators=9;, score=(train=0.935, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=6, n_estimators=9;, score=(train=0.915, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=7, n_estimators=1;, score=(train=0.855, test=0.808) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=7, n_estimators=1;, score=(train=0.847, test=0.840) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=7, n_estimators=1;, score=(train=0.856, test=0.869) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=7, n_estimators=1;, score=(train=0.812, test=0.829) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=7, n_estimators=1;, score=(train=0.874, test=0.876) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=7, n_estimators=2;, score=(train=0.920, test=0.854) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=7, n_estimators=2;, score=(train=0.908, test=0.920) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=7, n_estimators=2;, score=(train=0.931, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=7, n_estimators=2;, score=(train=0.886, test=0.883) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=7, n_estimators=2;, score=(train=0.925, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=7, n_estimators=3;, score=(train=0.921, test=0.866) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=7, n_estimators=3;, score=(train=0.915, test=0.922) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=7, n_estimators=3;, score=(train=0.906, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=7, n_estimators=3;, score=(train=0.888, test=0.880) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=7, n_estimators=3;, score=(train=0.914, test=0.927) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=7, n_estimators=4;, score=(train=0.927, test=0.876) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=7, n_estimators=4;, score=(train=0.920, test=0.930) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=7, n_estimators=4;, score=(train=0.929, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=7, n_estimators=4;, score=(train=0.910, test=0.909) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=7, n_estimators=4;, score=(train=0.930, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=7, n_estimators=5;, score=(train=0.930, test=0.889) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=7, n_estimators=5;, score=(train=0.922, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=7, n_estimators=5;, score=(train=0.932, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=7, n_estimators=5;, score=(train=0.922, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=7, n_estimators=5;, score=(train=0.926, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=7, n_estimators=6;, score=(train=0.938, test=0.902) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=7, n_estimators=6;, score=(train=0.921, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=7, n_estimators=6;, score=(train=0.928, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=7, n_estimators=6;, score=(train=0.921, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=7, n_estimators=6;, score=(train=0.930, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=7, n_estimators=7;, score=(train=0.939, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=7, n_estimators=7;, score=(train=0.935, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=7, n_estimators=7;, score=(train=0.931, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=7, n_estimators=7;, score=(train=0.930, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=7, n_estimators=7;, score=(train=0.935, test=0.941) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=7, n_estimators=8;, score=(train=0.942, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=7, n_estimators=8;, score=(train=0.936, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=7, n_estimators=8;, score=(train=0.936, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=7, n_estimators=8;, score=(train=0.939, test=0.927) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=7, n_estimators=8;, score=(train=0.939, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=7, n_estimators=9;, score=(train=0.949, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=7, n_estimators=9;, score=(train=0.933, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=7, n_estimators=9;, score=(train=0.935, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=7, n_estimators=9;, score=(train=0.944, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=7, n_estimators=9;, score=(train=0.938, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=8, n_estimators=1;, score=(train=0.899, test=0.862) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=8, n_estimators=1;, score=(train=0.878, test=0.871) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=8, n_estimators=1;, score=(train=0.879, test=0.901) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=8, n_estimators=1;, score=(train=0.886, test=0.906) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=8, n_estimators=1;, score=(train=0.884, test=0.892) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=8, n_estimators=2;, score=(train=0.945, test=0.906) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=8, n_estimators=2;, score=(train=0.929, test=0.930) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=8, n_estimators=2;, score=(train=0.935, test=0.946) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=8, n_estimators=2;, score=(train=0.924, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=8, n_estimators=2;, score=(train=0.924, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=8, n_estimators=3;, score=(train=0.937, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=8, n_estimators=3;, score=(train=0.919, test=0.918) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=8, n_estimators=3;, score=(train=0.908, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=8, n_estimators=3;, score=(train=0.922, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=8, n_estimators=3;, score=(train=0.920, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=8, n_estimators=4;, score=(train=0.943, test=0.906) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=8, n_estimators=4;, score=(train=0.933, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=8, n_estimators=4;, score=(train=0.924, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=8, n_estimators=4;, score=(train=0.936, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=8, n_estimators=4;, score=(train=0.942, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=8, n_estimators=5;, score=(train=0.940, test=0.902) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=8, n_estimators=5;, score=(train=0.931, test=0.922) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=8, n_estimators=5;, score=(train=0.941, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=8, n_estimators=5;, score=(train=0.941, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=8, n_estimators=5;, score=(train=0.944, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=8, n_estimators=6;, score=(train=0.945, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=8, n_estimators=6;, score=(train=0.943, test=0.932) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=8, n_estimators=6;, score=(train=0.941, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=8, n_estimators=6;, score=(train=0.942, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=8, n_estimators=6;, score=(train=0.946, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=8, n_estimators=7;, score=(train=0.949, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=8, n_estimators=7;, score=(train=0.947, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=8, n_estimators=7;, score=(train=0.940, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=8, n_estimators=7;, score=(train=0.943, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=8, n_estimators=7;, score=(train=0.950, test=0.953) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=8, n_estimators=8;, score=(train=0.951, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=8, n_estimators=8;, score=(train=0.947, test=0.937) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=8, n_estimators=8;, score=(train=0.943, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=8, n_estimators=8;, score=(train=0.943, test=0.934) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=8, n_estimators=8;, score=(train=0.948, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=8, n_estimators=9;, score=(train=0.954, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=8, n_estimators=9;, score=(train=0.945, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=8, n_estimators=9;, score=(train=0.949, test=0.965) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=8, n_estimators=9;, score=(train=0.949, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=8, n_estimators=9;, score=(train=0.950, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=9, n_estimators=1;, score=(train=0.904, test=0.866) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=9, n_estimators=1;, score=(train=0.906, test=0.895) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=9, n_estimators=1;, score=(train=0.884, test=0.888) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=9, n_estimators=1;, score=(train=0.888, test=0.883) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=9, n_estimators=1;, score=(train=0.898, test=0.871) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=9, n_estimators=2;, score=(train=0.939, test=0.918) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=9, n_estimators=2;, score=(train=0.933, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=9, n_estimators=2;, score=(train=0.942, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=9, n_estimators=2;, score=(train=0.932, test=0.916) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=9, n_estimators=2;, score=(train=0.925, test=0.909) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=9, n_estimators=3;, score=(train=0.938, test=0.902) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=9, n_estimators=3;, score=(train=0.936, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=9, n_estimators=3;, score=(train=0.927, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=9, n_estimators=3;, score=(train=0.926, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=9, n_estimators=3;, score=(train=0.930, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=9, n_estimators=4;, score=(train=0.951, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=9, n_estimators=4;, score=(train=0.948, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=9, n_estimators=4;, score=(train=0.943, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=9, n_estimators=4;, score=(train=0.946, test=0.934) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=9, n_estimators=4;, score=(train=0.944, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=9, n_estimators=5;, score=(train=0.949, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=9, n_estimators=5;, score=(train=0.948, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=9, n_estimators=5;, score=(train=0.946, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=9, n_estimators=5;, score=(train=0.952, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=9, n_estimators=5;, score=(train=0.946, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=9, n_estimators=6;, score=(train=0.952, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=9, n_estimators=6;, score=(train=0.953, test=0.955) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=9, n_estimators=6;, score=(train=0.946, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=9, n_estimators=6;, score=(train=0.954, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=9, n_estimators=6;, score=(train=0.951, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=9, n_estimators=7;, score=(train=0.952, test=0.927) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=9, n_estimators=7;, score=(train=0.951, test=0.955) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=9, n_estimators=7;, score=(train=0.944, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=9, n_estimators=7;, score=(train=0.953, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=9, n_estimators=7;, score=(train=0.951, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=9, n_estimators=8;, score=(train=0.957, test=0.944) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=9, n_estimators=8;, score=(train=0.955, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=9, n_estimators=8;, score=(train=0.949, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=9, n_estimators=8;, score=(train=0.956, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=9, n_estimators=8;, score=(train=0.954, test=0.953) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=9, n_estimators=9;, score=(train=0.958, test=0.939) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=9, n_estimators=9;, score=(train=0.952, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=9, n_estimators=9;, score=(train=0.954, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=9, n_estimators=9;, score=(train=0.953, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=10, n_estimators=1;, score=(train=0.921, test=0.887) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=10, n_estimators=1;, score=(train=0.903, test=0.894) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=10, n_estimators=1;, score=(train=0.881, test=0.901) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=10, n_estimators=1;, score=(train=0.900, test=0.897) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=10, n_estimators=1;, score=(train=0.929, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=10, n_estimators=2;, score=(train=0.948, test=0.911) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=10, n_estimators=2;, score=(train=0.936, test=0.927) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=10, n_estimators=2;, score=(train=0.946, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=10, n_estimators=2;, score=(train=0.926, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=10, n_estimators=2;, score=(train=0.928, test=0.918) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=10, n_estimators=3;, score=(train=0.947, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=10, n_estimators=3;, score=(train=0.942, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=10, n_estimators=3;, score=(train=0.936, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=10, n_estimators=3;, score=(train=0.931, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=10, n_estimators=3;, score=(train=0.942, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=10, n_estimators=4;, score=(train=0.952, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=10, n_estimators=4;, score=(train=0.950, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=10, n_estimators=4;, score=(train=0.944, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=10, n_estimators=4;, score=(train=0.943, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=10, n_estimators=4;, score=(train=0.950, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=10, n_estimators=5;, score=(train=0.950, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=10, n_estimators=5;, score=(train=0.949, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=10, n_estimators=5;, score=(train=0.949, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=10, n_estimators=5;, score=(train=0.951, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=10, n_estimators=5;, score=(train=0.955, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=10, n_estimators=6;, score=(train=0.956, test=0.932) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=10, n_estimators=6;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=10, n_estimators=6;, score=(train=0.953, test=0.963) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=10, n_estimators=6;, score=(train=0.955, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=10, n_estimators=6;, score=(train=0.956, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=10, n_estimators=7;, score=(train=0.955, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=10, n_estimators=7;, score=(train=0.956, test=0.953) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=10, n_estimators=7;, score=(train=0.954, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=10, n_estimators=7;, score=(train=0.955, test=0.955) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=10, n_estimators=7;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=10, n_estimators=8;, score=(train=0.959, test=0.937) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=10, n_estimators=8;, score=(train=0.956, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=10, n_estimators=8;, score=(train=0.954, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=10, n_estimators=8;, score=(train=0.957, test=0.955) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=10, n_estimators=8;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=10, n_estimators=9;, score=(train=0.959, test=0.939) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=10, n_estimators=9;, score=(train=0.957, test=0.956) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=10, n_estimators=9;, score=(train=0.955, test=0.970) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=10, n_estimators=9;, score=(train=0.959, test=0.955) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=10, n_estimators=9;, score=(train=0.960, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=11, n_estimators=1;, score=(train=0.924, test=0.878) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=11, n_estimators=1;, score=(train=0.923, test=0.894) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=11, n_estimators=1;, score=(train=0.913, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=11, n_estimators=1;, score=(train=0.920, test=0.913) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=11, n_estimators=1;, score=(train=0.939, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=11, n_estimators=2;, score=(train=0.939, test=0.897) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=11, n_estimators=2;, score=(train=0.943, test=0.916) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=11, n_estimators=2;, score=(train=0.942, test=0.946) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=11, n_estimators=2;, score=(train=0.943, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=11, n_estimators=2;, score=(train=0.937, test=0.908) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=11, n_estimators=3;, score=(train=0.954, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=11, n_estimators=3;, score=(train=0.950, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=11, n_estimators=3;, score=(train=0.944, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=11, n_estimators=3;, score=(train=0.942, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=11, n_estimators=3;, score=(train=0.948, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=11, n_estimators=4;, score=(train=0.957, test=0.927) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=11, n_estimators=4;, score=(train=0.953, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=11, n_estimators=4;, score=(train=0.952, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=11, n_estimators=4;, score=(train=0.952, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=11, n_estimators=4;, score=(train=0.956, test=0.941) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=11, n_estimators=5;, score=(train=0.957, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=11, n_estimators=5;, score=(train=0.954, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=11, n_estimators=5;, score=(train=0.952, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=11, n_estimators=5;, score=(train=0.956, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=11, n_estimators=5;, score=(train=0.958, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=11, n_estimators=6;, score=(train=0.960, test=0.941) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=11, n_estimators=6;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=11, n_estimators=6;, score=(train=0.954, test=0.963) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=11, n_estimators=6;, score=(train=0.956, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=11, n_estimators=6;, score=(train=0.959, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=11, n_estimators=7;, score=(train=0.961, test=0.937) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=11, n_estimators=7;, score=(train=0.959, test=0.955) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=11, n_estimators=7;, score=(train=0.954, test=0.969) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=11, n_estimators=7;, score=(train=0.959, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=11, n_estimators=7;, score=(train=0.960, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=11, n_estimators=8;, score=(train=0.961, test=0.944) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=11, n_estimators=8;, score=(train=0.959, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=11, n_estimators=8;, score=(train=0.954, test=0.969) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=11, n_estimators=8;, score=(train=0.961, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=11, n_estimators=8;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=11, n_estimators=9;, score=(train=0.960, test=0.941) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=11, n_estimators=9;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=11, n_estimators=9;, score=(train=0.955, test=0.969) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=11, n_estimators=9;, score=(train=0.959, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=11, n_estimators=9;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=12, n_estimators=1;, score=(train=0.933, test=0.875) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=12, n_estimators=1;, score=(train=0.935, test=0.906) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=12, n_estimators=1;, score=(train=0.919, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=12, n_estimators=1;, score=(train=0.914, test=0.892) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=12, n_estimators=1;, score=(train=0.941, test=0.927) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=12, n_estimators=2;, score=(train=0.942, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=12, n_estimators=2;, score=(train=0.949, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=12, n_estimators=2;, score=(train=0.942, test=0.916) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=12, n_estimators=2;, score=(train=0.930, test=0.906) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=12, n_estimators=2;, score=(train=0.944, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=12, n_estimators=3;, score=(train=0.960, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=12, n_estimators=3;, score=(train=0.952, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=12, n_estimators=3;, score=(train=0.948, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=12, n_estimators=3;, score=(train=0.947, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=12, n_estimators=3;, score=(train=0.957, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=12, n_estimators=4;, score=(train=0.961, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=12, n_estimators=4;, score=(train=0.960, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=12, n_estimators=4;, score=(train=0.954, test=0.934) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=12, n_estimators=4;, score=(train=0.957, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=12, n_estimators=4;, score=(train=0.962, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=12, n_estimators=5;, score=(train=0.962, test=0.932) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=12, n_estimators=5;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=12, n_estimators=5;, score=(train=0.958, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=12, n_estimators=5;, score=(train=0.960, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=12, n_estimators=5;, score=(train=0.960, test=0.953) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=12, n_estimators=6;, score=(train=0.966, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=12, n_estimators=6;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=12, n_estimators=6;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=12, n_estimators=6;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=12, n_estimators=6;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=12, n_estimators=7;, score=(train=0.965, test=0.937) total time=   0.1s\n","[CV 2/5] END criterion=gini, max_depth=12, n_estimators=7;, score=(train=0.963, test=0.953) total time=   0.1s\n","[CV 3/5] END criterion=gini, max_depth=12, n_estimators=7;, score=(train=0.960, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=12, n_estimators=7;, score=(train=0.963, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=12, n_estimators=7;, score=(train=0.963, test=0.953) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=12, n_estimators=8;, score=(train=0.965, test=0.943) total time=   0.1s\n","[CV 2/5] END criterion=gini, max_depth=12, n_estimators=8;, score=(train=0.962, test=0.953) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=12, n_estimators=8;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=12, n_estimators=8;, score=(train=0.963, test=0.951) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=12, n_estimators=8;, score=(train=0.962, test=0.955) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=12, n_estimators=9;, score=(train=0.966, test=0.943) total time=   0.1s\n","[CV 2/5] END criterion=gini, max_depth=12, n_estimators=9;, score=(train=0.963, test=0.955) total time=   0.1s\n","[CV 3/5] END criterion=gini, max_depth=12, n_estimators=9;, score=(train=0.959, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=12, n_estimators=9;, score=(train=0.964, test=0.951) total time=   0.1s\n","[CV 5/5] END criterion=gini, max_depth=12, n_estimators=9;, score=(train=0.962, test=0.955) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=13, n_estimators=1;, score=(train=0.947, test=0.889) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=13, n_estimators=1;, score=(train=0.938, test=0.899) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=13, n_estimators=1;, score=(train=0.931, test=0.927) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=13, n_estimators=1;, score=(train=0.918, test=0.902) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=13, n_estimators=1;, score=(train=0.938, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=13, n_estimators=2;, score=(train=0.946, test=0.878) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=13, n_estimators=2;, score=(train=0.944, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=13, n_estimators=2;, score=(train=0.937, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=13, n_estimators=2;, score=(train=0.948, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=13, n_estimators=2;, score=(train=0.939, test=0.897) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=13, n_estimators=3;, score=(train=0.962, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=13, n_estimators=3;, score=(train=0.963, test=0.922) total time=   0.1s\n","[CV 3/5] END criterion=gini, max_depth=13, n_estimators=3;, score=(train=0.954, test=0.937) total time=   0.1s\n","[CV 4/5] END criterion=gini, max_depth=13, n_estimators=3;, score=(train=0.958, test=0.939) total time=   0.1s\n","[CV 5/5] END criterion=gini, max_depth=13, n_estimators=3;, score=(train=0.960, test=0.935) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=13, n_estimators=4;, score=(train=0.966, test=0.906) total time=   0.1s\n","[CV 2/5] END criterion=gini, max_depth=13, n_estimators=4;, score=(train=0.961, test=0.922) total time=   0.1s\n","[CV 3/5] END criterion=gini, max_depth=13, n_estimators=4;, score=(train=0.959, test=0.951) total time=   0.1s\n","[CV 4/5] END criterion=gini, max_depth=13, n_estimators=4;, score=(train=0.963, test=0.948) total time=   0.1s\n","[CV 5/5] END criterion=gini, max_depth=13, n_estimators=4;, score=(train=0.961, test=0.932) total time=   0.1s\n","[CV 1/5] END criterion=gini, max_depth=13, n_estimators=5;, score=(train=0.968, test=0.913) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=13, n_estimators=5;, score=(train=0.968, test=0.937) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=13, n_estimators=5;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=13, n_estimators=5;, score=(train=0.965, test=0.951) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=13, n_estimators=5;, score=(train=0.963, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=13, n_estimators=6;, score=(train=0.969, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=13, n_estimators=6;, score=(train=0.967, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=13, n_estimators=6;, score=(train=0.964, test=0.963) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=13, n_estimators=6;, score=(train=0.966, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=13, n_estimators=6;, score=(train=0.963, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=13, n_estimators=7;, score=(train=0.969, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=13, n_estimators=7;, score=(train=0.967, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=13, n_estimators=7;, score=(train=0.963, test=0.963) total time=   0.1s\n","[CV 4/5] END criterion=gini, max_depth=13, n_estimators=7;, score=(train=0.967, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=13, n_estimators=7;, score=(train=0.963, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=13, n_estimators=8;, score=(train=0.968, test=0.932) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=13, n_estimators=8;, score=(train=0.968, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=13, n_estimators=8;, score=(train=0.964, test=0.965) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=13, n_estimators=8;, score=(train=0.966, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=13, n_estimators=8;, score=(train=0.964, test=0.958) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=13, n_estimators=9;, score=(train=0.969, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=13, n_estimators=9;, score=(train=0.968, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=13, n_estimators=9;, score=(train=0.963, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=13, n_estimators=9;, score=(train=0.967, test=0.953) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=13, n_estimators=9;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=14, n_estimators=1;, score=(train=0.944, test=0.889) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=14, n_estimators=1;, score=(train=0.942, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=14, n_estimators=1;, score=(train=0.935, test=0.901) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=14, n_estimators=1;, score=(train=0.929, test=0.906) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=14, n_estimators=1;, score=(train=0.946, test=0.908) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=14, n_estimators=2;, score=(train=0.954, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=14, n_estimators=2;, score=(train=0.937, test=0.885) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=14, n_estimators=2;, score=(train=0.932, test=0.885) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=14, n_estimators=2;, score=(train=0.943, test=0.897) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=14, n_estimators=2;, score=(train=0.946, test=0.904) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=14, n_estimators=3;, score=(train=0.966, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=14, n_estimators=3;, score=(train=0.963, test=0.930) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=14, n_estimators=3;, score=(train=0.960, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=14, n_estimators=3;, score=(train=0.963, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=14, n_estimators=3;, score=(train=0.964, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=14, n_estimators=4;, score=(train=0.968, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=14, n_estimators=4;, score=(train=0.963, test=0.920) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=14, n_estimators=4;, score=(train=0.960, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=14, n_estimators=4;, score=(train=0.967, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=14, n_estimators=4;, score=(train=0.966, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=14, n_estimators=5;, score=(train=0.969, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=14, n_estimators=5;, score=(train=0.966, test=0.930) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=14, n_estimators=5;, score=(train=0.965, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=14, n_estimators=5;, score=(train=0.969, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=14, n_estimators=5;, score=(train=0.966, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=14, n_estimators=6;, score=(train=0.969, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=14, n_estimators=6;, score=(train=0.969, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=14, n_estimators=6;, score=(train=0.965, test=0.965) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=14, n_estimators=6;, score=(train=0.969, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=14, n_estimators=6;, score=(train=0.967, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=14, n_estimators=7;, score=(train=0.969, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=14, n_estimators=7;, score=(train=0.969, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=14, n_estimators=7;, score=(train=0.965, test=0.965) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=14, n_estimators=7;, score=(train=0.968, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=14, n_estimators=7;, score=(train=0.968, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=14, n_estimators=8;, score=(train=0.969, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=14, n_estimators=8;, score=(train=0.970, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=14, n_estimators=8;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=14, n_estimators=8;, score=(train=0.969, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=14, n_estimators=8;, score=(train=0.968, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=14, n_estimators=9;, score=(train=0.970, test=0.937) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=14, n_estimators=9;, score=(train=0.970, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=14, n_estimators=9;, score=(train=0.966, test=0.965) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=14, n_estimators=9;, score=(train=0.971, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=14, n_estimators=9;, score=(train=0.969, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=15, n_estimators=1;, score=(train=0.947, test=0.868) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=15, n_estimators=1;, score=(train=0.945, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=15, n_estimators=1;, score=(train=0.931, test=0.894) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=15, n_estimators=1;, score=(train=0.934, test=0.892) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=15, n_estimators=1;, score=(train=0.944, test=0.901) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=15, n_estimators=2;, score=(train=0.951, test=0.875) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=15, n_estimators=2;, score=(train=0.954, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=15, n_estimators=2;, score=(train=0.939, test=0.918) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=15, n_estimators=2;, score=(train=0.943, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=15, n_estimators=2;, score=(train=0.943, test=0.902) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=15, n_estimators=3;, score=(train=0.968, test=0.913) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=15, n_estimators=3;, score=(train=0.966, test=0.932) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=15, n_estimators=3;, score=(train=0.959, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=15, n_estimators=3;, score=(train=0.965, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=15, n_estimators=3;, score=(train=0.965, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=15, n_estimators=4;, score=(train=0.966, test=0.918) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=15, n_estimators=4;, score=(train=0.965, test=0.932) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=15, n_estimators=4;, score=(train=0.959, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=15, n_estimators=4;, score=(train=0.967, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=15, n_estimators=4;, score=(train=0.966, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=15, n_estimators=5;, score=(train=0.971, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=15, n_estimators=5;, score=(train=0.971, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=15, n_estimators=5;, score=(train=0.966, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=15, n_estimators=5;, score=(train=0.970, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=15, n_estimators=5;, score=(train=0.970, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=15, n_estimators=6;, score=(train=0.969, test=0.927) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=15, n_estimators=6;, score=(train=0.969, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=15, n_estimators=6;, score=(train=0.966, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=15, n_estimators=6;, score=(train=0.972, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=15, n_estimators=6;, score=(train=0.969, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=15, n_estimators=7;, score=(train=0.971, test=0.936) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=15, n_estimators=7;, score=(train=0.971, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=15, n_estimators=7;, score=(train=0.966, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=15, n_estimators=7;, score=(train=0.973, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=15, n_estimators=7;, score=(train=0.969, test=0.953) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=15, n_estimators=8;, score=(train=0.971, test=0.936) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=15, n_estimators=8;, score=(train=0.973, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=15, n_estimators=8;, score=(train=0.967, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=15, n_estimators=8;, score=(train=0.971, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=15, n_estimators=8;, score=(train=0.969, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=15, n_estimators=9;, score=(train=0.973, test=0.932) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=15, n_estimators=9;, score=(train=0.973, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=15, n_estimators=9;, score=(train=0.968, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=15, n_estimators=9;, score=(train=0.972, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=15, n_estimators=9;, score=(train=0.970, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=16, n_estimators=1;, score=(train=0.946, test=0.880) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=16, n_estimators=1;, score=(train=0.944, test=0.906) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=16, n_estimators=1;, score=(train=0.934, test=0.901) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=16, n_estimators=1;, score=(train=0.942, test=0.902) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=16, n_estimators=1;, score=(train=0.954, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=16, n_estimators=2;, score=(train=0.948, test=0.880) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=16, n_estimators=2;, score=(train=0.942, test=0.908) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=16, n_estimators=2;, score=(train=0.939, test=0.908) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=16, n_estimators=2;, score=(train=0.942, test=0.883) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=16, n_estimators=2;, score=(train=0.945, test=0.908) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=16, n_estimators=3;, score=(train=0.970, test=0.899) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=16, n_estimators=3;, score=(train=0.967, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=16, n_estimators=3;, score=(train=0.963, test=0.934) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=16, n_estimators=3;, score=(train=0.967, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=16, n_estimators=3;, score=(train=0.966, test=0.927) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=16, n_estimators=4;, score=(train=0.969, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=16, n_estimators=4;, score=(train=0.967, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=16, n_estimators=4;, score=(train=0.964, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=16, n_estimators=4;, score=(train=0.967, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=16, n_estimators=4;, score=(train=0.963, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=16, n_estimators=5;, score=(train=0.973, test=0.911) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=16, n_estimators=5;, score=(train=0.971, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=16, n_estimators=5;, score=(train=0.968, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=16, n_estimators=5;, score=(train=0.972, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=16, n_estimators=5;, score=(train=0.970, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=16, n_estimators=6;, score=(train=0.973, test=0.913) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=16, n_estimators=6;, score=(train=0.970, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=16, n_estimators=6;, score=(train=0.968, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=16, n_estimators=6;, score=(train=0.973, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=16, n_estimators=6;, score=(train=0.972, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=16, n_estimators=7;, score=(train=0.973, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=16, n_estimators=7;, score=(train=0.972, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=16, n_estimators=7;, score=(train=0.968, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=16, n_estimators=7;, score=(train=0.974, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=16, n_estimators=7;, score=(train=0.972, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=16, n_estimators=8;, score=(train=0.973, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=16, n_estimators=8;, score=(train=0.973, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=16, n_estimators=8;, score=(train=0.969, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=16, n_estimators=8;, score=(train=0.973, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=16, n_estimators=8;, score=(train=0.972, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=16, n_estimators=9;, score=(train=0.975, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=16, n_estimators=9;, score=(train=0.974, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=16, n_estimators=9;, score=(train=0.970, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=16, n_estimators=9;, score=(train=0.974, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=16, n_estimators=9;, score=(train=0.972, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=17, n_estimators=1;, score=(train=0.937, test=0.875) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=17, n_estimators=1;, score=(train=0.944, test=0.908) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=17, n_estimators=1;, score=(train=0.946, test=0.911) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=17, n_estimators=1;, score=(train=0.948, test=0.881) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=17, n_estimators=1;, score=(train=0.944, test=0.867) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=17, n_estimators=2;, score=(train=0.939, test=0.887) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=17, n_estimators=2;, score=(train=0.946, test=0.918) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=17, n_estimators=2;, score=(train=0.947, test=0.920) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=17, n_estimators=2;, score=(train=0.946, test=0.887) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=17, n_estimators=2;, score=(train=0.942, test=0.862) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=17, n_estimators=3;, score=(train=0.969, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=17, n_estimators=3;, score=(train=0.966, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=17, n_estimators=3;, score=(train=0.966, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=17, n_estimators=3;, score=(train=0.971, test=0.916) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=17, n_estimators=3;, score=(train=0.969, test=0.901) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=17, n_estimators=4;, score=(train=0.970, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=17, n_estimators=4;, score=(train=0.965, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=17, n_estimators=4;, score=(train=0.966, test=0.934) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=17, n_estimators=4;, score=(train=0.973, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=17, n_estimators=4;, score=(train=0.967, test=0.908) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=17, n_estimators=5;, score=(train=0.975, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=17, n_estimators=5;, score=(train=0.971, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=17, n_estimators=5;, score=(train=0.973, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=17, n_estimators=5;, score=(train=0.975, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=17, n_estimators=5;, score=(train=0.976, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=17, n_estimators=6;, score=(train=0.974, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=17, n_estimators=6;, score=(train=0.971, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=17, n_estimators=6;, score=(train=0.972, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=17, n_estimators=6;, score=(train=0.976, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=17, n_estimators=6;, score=(train=0.975, test=0.918) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=17, n_estimators=7;, score=(train=0.975, test=0.927) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=17, n_estimators=7;, score=(train=0.973, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=17, n_estimators=7;, score=(train=0.973, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=17, n_estimators=7;, score=(train=0.976, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=17, n_estimators=7;, score=(train=0.975, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=17, n_estimators=8;, score=(train=0.976, test=0.927) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=17, n_estimators=8;, score=(train=0.973, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=17, n_estimators=8;, score=(train=0.973, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=17, n_estimators=8;, score=(train=0.977, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=17, n_estimators=8;, score=(train=0.975, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=17, n_estimators=9;, score=(train=0.977, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=17, n_estimators=9;, score=(train=0.976, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=17, n_estimators=9;, score=(train=0.974, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=17, n_estimators=9;, score=(train=0.977, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=17, n_estimators=9;, score=(train=0.976, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=18, n_estimators=1;, score=(train=0.947, test=0.847) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=18, n_estimators=1;, score=(train=0.934, test=0.875) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=18, n_estimators=1;, score=(train=0.949, test=0.914) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=18, n_estimators=1;, score=(train=0.943, test=0.888) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=18, n_estimators=1;, score=(train=0.951, test=0.883) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=18, n_estimators=2;, score=(train=0.944, test=0.841) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=18, n_estimators=2;, score=(train=0.941, test=0.887) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=18, n_estimators=2;, score=(train=0.946, test=0.908) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=18, n_estimators=2;, score=(train=0.942, test=0.873) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=18, n_estimators=2;, score=(train=0.950, test=0.874) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=18, n_estimators=3;, score=(train=0.969, test=0.892) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=18, n_estimators=3;, score=(train=0.965, test=0.915) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=18, n_estimators=3;, score=(train=0.971, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=18, n_estimators=3;, score=(train=0.972, test=0.911) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=18, n_estimators=3;, score=(train=0.973, test=0.901) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=18, n_estimators=4;, score=(train=0.969, test=0.897) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=18, n_estimators=4;, score=(train=0.965, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=18, n_estimators=4;, score=(train=0.970, test=0.927) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=18, n_estimators=4;, score=(train=0.972, test=0.916) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=18, n_estimators=4;, score=(train=0.971, test=0.902) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=18, n_estimators=5;, score=(train=0.973, test=0.899) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=18, n_estimators=5;, score=(train=0.973, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=18, n_estimators=5;, score=(train=0.974, test=0.937) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=18, n_estimators=5;, score=(train=0.976, test=0.934) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=18, n_estimators=5;, score=(train=0.977, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=18, n_estimators=6;, score=(train=0.973, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=18, n_estimators=6;, score=(train=0.971, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=18, n_estimators=6;, score=(train=0.973, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=18, n_estimators=6;, score=(train=0.976, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=18, n_estimators=6;, score=(train=0.976, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=18, n_estimators=7;, score=(train=0.976, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=18, n_estimators=7;, score=(train=0.974, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=18, n_estimators=7;, score=(train=0.975, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=18, n_estimators=7;, score=(train=0.978, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=18, n_estimators=7;, score=(train=0.977, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=18, n_estimators=8;, score=(train=0.977, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=18, n_estimators=8;, score=(train=0.975, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=18, n_estimators=8;, score=(train=0.974, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=18, n_estimators=8;, score=(train=0.977, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=18, n_estimators=8;, score=(train=0.976, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=18, n_estimators=9;, score=(train=0.980, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=18, n_estimators=9;, score=(train=0.976, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=18, n_estimators=9;, score=(train=0.976, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=18, n_estimators=9;, score=(train=0.977, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=18, n_estimators=9;, score=(train=0.978, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=19, n_estimators=1;, score=(train=0.946, test=0.871) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=19, n_estimators=1;, score=(train=0.948, test=0.904) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=19, n_estimators=1;, score=(train=0.944, test=0.887) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=19, n_estimators=1;, score=(train=0.945, test=0.869) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=19, n_estimators=1;, score=(train=0.952, test=0.862) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=19, n_estimators=2;, score=(train=0.944, test=0.873) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=19, n_estimators=2;, score=(train=0.945, test=0.897) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=19, n_estimators=2;, score=(train=0.943, test=0.897) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=19, n_estimators=2;, score=(train=0.940, test=0.855) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=19, n_estimators=2;, score=(train=0.943, test=0.860) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=19, n_estimators=3;, score=(train=0.972, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=19, n_estimators=3;, score=(train=0.971, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=19, n_estimators=3;, score=(train=0.969, test=0.916) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=19, n_estimators=3;, score=(train=0.973, test=0.902) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=19, n_estimators=3;, score=(train=0.971, test=0.902) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=19, n_estimators=4;, score=(train=0.970, test=0.904) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=19, n_estimators=4;, score=(train=0.968, test=0.927) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=19, n_estimators=4;, score=(train=0.971, test=0.923) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=19, n_estimators=4;, score=(train=0.970, test=0.911) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=19, n_estimators=4;, score=(train=0.968, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=19, n_estimators=5;, score=(train=0.980, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=19, n_estimators=5;, score=(train=0.973, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=19, n_estimators=5;, score=(train=0.975, test=0.930) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=19, n_estimators=5;, score=(train=0.976, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=19, n_estimators=5;, score=(train=0.975, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=19, n_estimators=6;, score=(train=0.977, test=0.902) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=19, n_estimators=6;, score=(train=0.971, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=19, n_estimators=6;, score=(train=0.975, test=0.934) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=19, n_estimators=6;, score=(train=0.976, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=19, n_estimators=6;, score=(train=0.974, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=19, n_estimators=7;, score=(train=0.979, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=19, n_estimators=7;, score=(train=0.975, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=19, n_estimators=7;, score=(train=0.976, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=19, n_estimators=7;, score=(train=0.979, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=19, n_estimators=7;, score=(train=0.976, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=19, n_estimators=8;, score=(train=0.979, test=0.913) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=19, n_estimators=8;, score=(train=0.974, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=19, n_estimators=8;, score=(train=0.976, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=19, n_estimators=8;, score=(train=0.978, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=19, n_estimators=8;, score=(train=0.976, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=19, n_estimators=9;, score=(train=0.980, test=0.918) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=19, n_estimators=9;, score=(train=0.976, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=19, n_estimators=9;, score=(train=0.977, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=19, n_estimators=9;, score=(train=0.980, test=0.927) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=19, n_estimators=9;, score=(train=0.979, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=1, n_estimators=1;, score=(train=0.372, test=0.382) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=1, n_estimators=1;, score=(train=0.379, test=0.366) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=1, n_estimators=1;, score=(train=0.376, test=0.380) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=1, n_estimators=1;, score=(train=0.377, test=0.375) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=1, n_estimators=1;, score=(train=0.377, test=0.377) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=1, n_estimators=2;, score=(train=0.514, test=0.510) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=1, n_estimators=2;, score=(train=0.515, test=0.505) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=1, n_estimators=2;, score=(train=0.510, test=0.525) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=1, n_estimators=2;, score=(train=0.511, test=0.520) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=1, n_estimators=2;, score=(train=0.515, test=0.504) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=1, n_estimators=3;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=1, n_estimators=3;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=1, n_estimators=3;, score=(train=0.571, test=0.595) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=1, n_estimators=3;, score=(train=0.578, test=0.567) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=1, n_estimators=3;, score=(train=0.578, test=0.569) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=1, n_estimators=4;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=1, n_estimators=4;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=1, n_estimators=4;, score=(train=0.571, test=0.595) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=1, n_estimators=4;, score=(train=0.578, test=0.567) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=1, n_estimators=4;, score=(train=0.578, test=0.569) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=1, n_estimators=5;, score=(train=0.546, test=0.554) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=1, n_estimators=5;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=1, n_estimators=5;, score=(train=0.571, test=0.595) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=1, n_estimators=5;, score=(train=0.553, test=0.525) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=1, n_estimators=5;, score=(train=0.547, test=0.548) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=1, n_estimators=6;, score=(train=0.582, test=0.571) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=1, n_estimators=6;, score=(train=0.577, test=0.580) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=1, n_estimators=6;, score=(train=0.571, test=0.586) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=1, n_estimators=6;, score=(train=0.578, test=0.558) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=1, n_estimators=6;, score=(train=0.581, test=0.567) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=1, n_estimators=7;, score=(train=0.601, test=0.591) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=1, n_estimators=7;, score=(train=0.577, test=0.580) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=1, n_estimators=7;, score=(train=0.588, test=0.616) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=1, n_estimators=7;, score=(train=0.598, test=0.578) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=1, n_estimators=7;, score=(train=0.597, test=0.579) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=1, n_estimators=8;, score=(train=0.613, test=0.599) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=1, n_estimators=8;, score=(train=0.604, test=0.589) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=1, n_estimators=8;, score=(train=0.653, test=0.675) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=1, n_estimators=8;, score=(train=0.613, test=0.600) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=1, n_estimators=8;, score=(train=0.661, test=0.644) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=1, n_estimators=9;, score=(train=0.679, test=0.660) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=1, n_estimators=9;, score=(train=0.670, test=0.655) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=1, n_estimators=9;, score=(train=0.670, test=0.689) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=1, n_estimators=9;, score=(train=0.599, test=0.595) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=1, n_estimators=9;, score=(train=0.676, test=0.668) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=2, n_estimators=1;, score=(train=0.514, test=0.510) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=2, n_estimators=1;, score=(train=0.515, test=0.505) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=2, n_estimators=1;, score=(train=0.510, test=0.525) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=2, n_estimators=1;, score=(train=0.511, test=0.520) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=2, n_estimators=1;, score=(train=0.515, test=0.504) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=2, n_estimators=2;, score=(train=0.641, test=0.617) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=2, n_estimators=2;, score=(train=0.635, test=0.639) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=2, n_estimators=2;, score=(train=0.633, test=0.665) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=2, n_estimators=2;, score=(train=0.641, test=0.632) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=2, n_estimators=2;, score=(train=0.638, test=0.630) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=2, n_estimators=3;, score=(train=0.647, test=0.580) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=2, n_estimators=3;, score=(train=0.625, test=0.669) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=2, n_estimators=3;, score=(train=0.616, test=0.668) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=2, n_estimators=3;, score=(train=0.627, test=0.595) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=2, n_estimators=3;, score=(train=0.630, test=0.614) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=2, n_estimators=4;, score=(train=0.648, test=0.615) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=2, n_estimators=4;, score=(train=0.639, test=0.639) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=2, n_estimators=4;, score=(train=0.619, test=0.665) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=2, n_estimators=4;, score=(train=0.631, test=0.613) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=2, n_estimators=4;, score=(train=0.632, test=0.614) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=2, n_estimators=5;, score=(train=0.647, test=0.605) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=2, n_estimators=5;, score=(train=0.631, test=0.632) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=2, n_estimators=5;, score=(train=0.689, test=0.724) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=2, n_estimators=5;, score=(train=0.687, test=0.679) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=2, n_estimators=5;, score=(train=0.687, test=0.681) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=2, n_estimators=6;, score=(train=0.751, test=0.720) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=2, n_estimators=6;, score=(train=0.742, test=0.739) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=2, n_estimators=6;, score=(train=0.763, test=0.810) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=2, n_estimators=6;, score=(train=0.770, test=0.756) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=2, n_estimators=6;, score=(train=0.770, test=0.770) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=2, n_estimators=7;, score=(train=0.746, test=0.725) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=2, n_estimators=7;, score=(train=0.742, test=0.739) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=2, n_estimators=7;, score=(train=0.762, test=0.805) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=2, n_estimators=7;, score=(train=0.778, test=0.763) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=2, n_estimators=7;, score=(train=0.774, test=0.768) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=2, n_estimators=8;, score=(train=0.772, test=0.744) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=2, n_estimators=8;, score=(train=0.778, test=0.760) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=2, n_estimators=8;, score=(train=0.769, test=0.810) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=2, n_estimators=8;, score=(train=0.810, test=0.810) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=2, n_estimators=8;, score=(train=0.777, test=0.775) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=2, n_estimators=9;, score=(train=0.814, test=0.779) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=2, n_estimators=9;, score=(train=0.815, test=0.808) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=2, n_estimators=9;, score=(train=0.782, test=0.824) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=2, n_estimators=9;, score=(train=0.830, test=0.824) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=2, n_estimators=9;, score=(train=0.792, test=0.784) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=3, n_estimators=1;, score=(train=0.578, test=0.578) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=3, n_estimators=1;, score=(train=0.578, test=0.566) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=3, n_estimators=1;, score=(train=0.572, test=0.585) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=3, n_estimators=1;, score=(train=0.582, test=0.565) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=3, n_estimators=1;, score=(train=0.579, test=0.564) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=3, n_estimators=2;, score=(train=0.796, test=0.768) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=3, n_estimators=2;, score=(train=0.788, test=0.801) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=3, n_estimators=2;, score=(train=0.787, test=0.805) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=3, n_estimators=2;, score=(train=0.753, test=0.740) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=3, n_estimators=2;, score=(train=0.790, test=0.792) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=3, n_estimators=3;, score=(train=0.786, test=0.756) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=3, n_estimators=3;, score=(train=0.775, test=0.801) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=3, n_estimators=3;, score=(train=0.785, test=0.799) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=3, n_estimators=3;, score=(train=0.770, test=0.752) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=3, n_estimators=3;, score=(train=0.786, test=0.784) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=3, n_estimators=4;, score=(train=0.814, test=0.782) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=3, n_estimators=4;, score=(train=0.804, test=0.824) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=3, n_estimators=4;, score=(train=0.814, test=0.831) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=3, n_estimators=4;, score=(train=0.797, test=0.775) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=3, n_estimators=4;, score=(train=0.811, test=0.815) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=3, n_estimators=5;, score=(train=0.846, test=0.812) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=3, n_estimators=5;, score=(train=0.836, test=0.854) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=3, n_estimators=5;, score=(train=0.869, test=0.878) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=3, n_estimators=5;, score=(train=0.847, test=0.838) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=3, n_estimators=5;, score=(train=0.862, test=0.871) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=3, n_estimators=6;, score=(train=0.867, test=0.829) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=3, n_estimators=6;, score=(train=0.860, test=0.876) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=3, n_estimators=6;, score=(train=0.858, test=0.880) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=3, n_estimators=6;, score=(train=0.849, test=0.845) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=3, n_estimators=6;, score=(train=0.845, test=0.845) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=3, n_estimators=7;, score=(train=0.850, test=0.808) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=3, n_estimators=7;, score=(train=0.829, test=0.848) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=3, n_estimators=7;, score=(train=0.846, test=0.869) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=3, n_estimators=7;, score=(train=0.860, test=0.864) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=3, n_estimators=7;, score=(train=0.859, test=0.866) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=3, n_estimators=8;, score=(train=0.857, test=0.817) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=3, n_estimators=8;, score=(train=0.861, test=0.871) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=3, n_estimators=8;, score=(train=0.878, test=0.890) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=3, n_estimators=8;, score=(train=0.874, test=0.873) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=3, n_estimators=8;, score=(train=0.863, test=0.864) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=3, n_estimators=9;, score=(train=0.860, test=0.817) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=3, n_estimators=9;, score=(train=0.862, test=0.871) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=3, n_estimators=9;, score=(train=0.887, test=0.892) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=3, n_estimators=9;, score=(train=0.894, test=0.895) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=3, n_estimators=9;, score=(train=0.882, test=0.887) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=4, n_estimators=1;, score=(train=0.704, test=0.686) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=4, n_estimators=1;, score=(train=0.710, test=0.704) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=4, n_estimators=1;, score=(train=0.704, test=0.719) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=4, n_estimators=1;, score=(train=0.711, test=0.705) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=4, n_estimators=1;, score=(train=0.708, test=0.710) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=4, n_estimators=2;, score=(train=0.880, test=0.841) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=4, n_estimators=2;, score=(train=0.871, test=0.875) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=4, n_estimators=2;, score=(train=0.867, test=0.894) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=4, n_estimators=2;, score=(train=0.870, test=0.873) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=4, n_estimators=2;, score=(train=0.873, test=0.860) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=4, n_estimators=3;, score=(train=0.858, test=0.822) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=4, n_estimators=3;, score=(train=0.847, test=0.862) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=4, n_estimators=3;, score=(train=0.860, test=0.878) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=4, n_estimators=3;, score=(train=0.867, test=0.874) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=4, n_estimators=3;, score=(train=0.874, test=0.860) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=4, n_estimators=4;, score=(train=0.877, test=0.852) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=4, n_estimators=4;, score=(train=0.869, test=0.880) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=4, n_estimators=4;, score=(train=0.862, test=0.880) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=4, n_estimators=4;, score=(train=0.878, test=0.887) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=4, n_estimators=4;, score=(train=0.888, test=0.869) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=4, n_estimators=5;, score=(train=0.876, test=0.845) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=4, n_estimators=5;, score=(train=0.866, test=0.880) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=4, n_estimators=5;, score=(train=0.867, test=0.890) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=4, n_estimators=5;, score=(train=0.880, test=0.883) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=4, n_estimators=5;, score=(train=0.889, test=0.873) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=4, n_estimators=6;, score=(train=0.885, test=0.859) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=4, n_estimators=6;, score=(train=0.876, test=0.892) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=4, n_estimators=6;, score=(train=0.886, test=0.902) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=4, n_estimators=6;, score=(train=0.884, test=0.887) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=4, n_estimators=6;, score=(train=0.887, test=0.871) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=4, n_estimators=7;, score=(train=0.896, test=0.864) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=4, n_estimators=7;, score=(train=0.887, test=0.895) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=4, n_estimators=7;, score=(train=0.888, test=0.904) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=4, n_estimators=7;, score=(train=0.886, test=0.876) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=4, n_estimators=7;, score=(train=0.894, test=0.878) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=4, n_estimators=8;, score=(train=0.907, test=0.873) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=4, n_estimators=8;, score=(train=0.892, test=0.894) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=4, n_estimators=8;, score=(train=0.892, test=0.911) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=4, n_estimators=8;, score=(train=0.888, test=0.883) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=4, n_estimators=8;, score=(train=0.891, test=0.887) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=4, n_estimators=9;, score=(train=0.893, test=0.871) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=4, n_estimators=9;, score=(train=0.887, test=0.885) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=4, n_estimators=9;, score=(train=0.898, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=4, n_estimators=9;, score=(train=0.909, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=4, n_estimators=9;, score=(train=0.902, test=0.904) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=5, n_estimators=1;, score=(train=0.799, test=0.758) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=5, n_estimators=1;, score=(train=0.795, test=0.774) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=5, n_estimators=1;, score=(train=0.784, test=0.817) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=5, n_estimators=1;, score=(train=0.786, test=0.808) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=5, n_estimators=1;, score=(train=0.789, test=0.796) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=5, n_estimators=2;, score=(train=0.921, test=0.873) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=5, n_estimators=2;, score=(train=0.907, test=0.904) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=5, n_estimators=2;, score=(train=0.904, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=5, n_estimators=2;, score=(train=0.895, test=0.911) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=5, n_estimators=2;, score=(train=0.899, test=0.895) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=5, n_estimators=3;, score=(train=0.907, test=0.859) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=5, n_estimators=3;, score=(train=0.898, test=0.901) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=5, n_estimators=3;, score=(train=0.900, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=5, n_estimators=3;, score=(train=0.881, test=0.892) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=5, n_estimators=3;, score=(train=0.898, test=0.885) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=5, n_estimators=4;, score=(train=0.903, test=0.845) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=5, n_estimators=4;, score=(train=0.909, test=0.913) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=5, n_estimators=4;, score=(train=0.900, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=5, n_estimators=4;, score=(train=0.892, test=0.909) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=5, n_estimators=4;, score=(train=0.896, test=0.890) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=5, n_estimators=5;, score=(train=0.924, test=0.882) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=5, n_estimators=5;, score=(train=0.914, test=0.915) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=5, n_estimators=5;, score=(train=0.908, test=0.934) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=5, n_estimators=5;, score=(train=0.902, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=5, n_estimators=5;, score=(train=0.903, test=0.899) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=5, n_estimators=6;, score=(train=0.924, test=0.883) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=5, n_estimators=6;, score=(train=0.920, test=0.904) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=5, n_estimators=6;, score=(train=0.914, test=0.934) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=5, n_estimators=6;, score=(train=0.905, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=5, n_estimators=6;, score=(train=0.913, test=0.904) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=5, n_estimators=7;, score=(train=0.916, test=0.875) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=5, n_estimators=7;, score=(train=0.917, test=0.901) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=5, n_estimators=7;, score=(train=0.903, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=5, n_estimators=7;, score=(train=0.902, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=5, n_estimators=7;, score=(train=0.898, test=0.899) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=5, n_estimators=8;, score=(train=0.921, test=0.880) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=5, n_estimators=8;, score=(train=0.922, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=5, n_estimators=8;, score=(train=0.912, test=0.928) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=5, n_estimators=8;, score=(train=0.906, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=5, n_estimators=8;, score=(train=0.908, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=5, n_estimators=9;, score=(train=0.927, test=0.894) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=5, n_estimators=9;, score=(train=0.924, test=0.918) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=5, n_estimators=9;, score=(train=0.914, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=5, n_estimators=9;, score=(train=0.908, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=5, n_estimators=9;, score=(train=0.913, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=6, n_estimators=1;, score=(train=0.822, test=0.793) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=6, n_estimators=1;, score=(train=0.829, test=0.824) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=6, n_estimators=1;, score=(train=0.823, test=0.848) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=6, n_estimators=1;, score=(train=0.840, test=0.843) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=6, n_estimators=1;, score=(train=0.840, test=0.843) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=6, n_estimators=2;, score=(train=0.916, test=0.882) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=6, n_estimators=2;, score=(train=0.909, test=0.902) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=6, n_estimators=2;, score=(train=0.909, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=6, n_estimators=2;, score=(train=0.925, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=6, n_estimators=2;, score=(train=0.939, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=6, n_estimators=3;, score=(train=0.924, test=0.897) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=6, n_estimators=3;, score=(train=0.915, test=0.895) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=6, n_estimators=3;, score=(train=0.916, test=0.928) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=6, n_estimators=3;, score=(train=0.915, test=0.904) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=6, n_estimators=3;, score=(train=0.915, test=0.913) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=6, n_estimators=4;, score=(train=0.933, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=6, n_estimators=4;, score=(train=0.927, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=6, n_estimators=4;, score=(train=0.918, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=6, n_estimators=4;, score=(train=0.928, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=6, n_estimators=4;, score=(train=0.934, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=6, n_estimators=5;, score=(train=0.929, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=6, n_estimators=5;, score=(train=0.925, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=6, n_estimators=5;, score=(train=0.931, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=6, n_estimators=5;, score=(train=0.931, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=6, n_estimators=5;, score=(train=0.945, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=6, n_estimators=6;, score=(train=0.939, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=6, n_estimators=6;, score=(train=0.929, test=0.918) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=6, n_estimators=6;, score=(train=0.938, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=6, n_estimators=6;, score=(train=0.929, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=6, n_estimators=6;, score=(train=0.932, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=6, n_estimators=7;, score=(train=0.939, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=6, n_estimators=7;, score=(train=0.926, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=6, n_estimators=7;, score=(train=0.922, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=6, n_estimators=7;, score=(train=0.923, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=6, n_estimators=7;, score=(train=0.932, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=6, n_estimators=8;, score=(train=0.938, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=6, n_estimators=8;, score=(train=0.927, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=6, n_estimators=8;, score=(train=0.932, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=6, n_estimators=8;, score=(train=0.926, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=6, n_estimators=8;, score=(train=0.937, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=6, n_estimators=9;, score=(train=0.937, test=0.902) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=6, n_estimators=9;, score=(train=0.927, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=6, n_estimators=9;, score=(train=0.940, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=6, n_estimators=9;, score=(train=0.924, test=0.927) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=6, n_estimators=9;, score=(train=0.940, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=7, n_estimators=1;, score=(train=0.878, test=0.833) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=7, n_estimators=1;, score=(train=0.867, test=0.859) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=7, n_estimators=1;, score=(train=0.883, test=0.902) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=7, n_estimators=1;, score=(train=0.863, test=0.880) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=7, n_estimators=1;, score=(train=0.874, test=0.876) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=7, n_estimators=2;, score=(train=0.935, test=0.902) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=7, n_estimators=2;, score=(train=0.920, test=0.922) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=7, n_estimators=2;, score=(train=0.943, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=7, n_estimators=2;, score=(train=0.919, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=7, n_estimators=2;, score=(train=0.924, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=7, n_estimators=3;, score=(train=0.936, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=7, n_estimators=3;, score=(train=0.920, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=7, n_estimators=3;, score=(train=0.927, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=7, n_estimators=3;, score=(train=0.918, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=7, n_estimators=3;, score=(train=0.905, test=0.899) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=7, n_estimators=4;, score=(train=0.935, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=7, n_estimators=4;, score=(train=0.927, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=7, n_estimators=4;, score=(train=0.936, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=7, n_estimators=4;, score=(train=0.925, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=7, n_estimators=4;, score=(train=0.929, test=0.913) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=7, n_estimators=5;, score=(train=0.937, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=7, n_estimators=5;, score=(train=0.933, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=7, n_estimators=5;, score=(train=0.942, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=7, n_estimators=5;, score=(train=0.936, test=0.934) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=7, n_estimators=5;, score=(train=0.935, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=7, n_estimators=6;, score=(train=0.947, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=7, n_estimators=6;, score=(train=0.935, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=7, n_estimators=6;, score=(train=0.943, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=7, n_estimators=6;, score=(train=0.939, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=7, n_estimators=6;, score=(train=0.925, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=7, n_estimators=7;, score=(train=0.948, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=7, n_estimators=7;, score=(train=0.945, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=7, n_estimators=7;, score=(train=0.945, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=7, n_estimators=7;, score=(train=0.935, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=7, n_estimators=7;, score=(train=0.930, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=7, n_estimators=8;, score=(train=0.950, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=7, n_estimators=8;, score=(train=0.946, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=7, n_estimators=8;, score=(train=0.943, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=7, n_estimators=8;, score=(train=0.945, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=7, n_estimators=8;, score=(train=0.937, test=0.941) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=7, n_estimators=9;, score=(train=0.951, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=7, n_estimators=9;, score=(train=0.947, test=0.953) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=7, n_estimators=9;, score=(train=0.945, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=7, n_estimators=9;, score=(train=0.948, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=7, n_estimators=9;, score=(train=0.933, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=8, n_estimators=1;, score=(train=0.885, test=0.857) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=8, n_estimators=1;, score=(train=0.882, test=0.869) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=8, n_estimators=1;, score=(train=0.876, test=0.895) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=8, n_estimators=1;, score=(train=0.883, test=0.890) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=8, n_estimators=1;, score=(train=0.884, test=0.892) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=8, n_estimators=2;, score=(train=0.932, test=0.897) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=8, n_estimators=2;, score=(train=0.935, test=0.927) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=8, n_estimators=2;, score=(train=0.930, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=8, n_estimators=2;, score=(train=0.932, test=0.927) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=8, n_estimators=2;, score=(train=0.950, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=8, n_estimators=3;, score=(train=0.939, test=0.899) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=8, n_estimators=3;, score=(train=0.926, test=0.915) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=8, n_estimators=3;, score=(train=0.929, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=8, n_estimators=3;, score=(train=0.925, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=8, n_estimators=3;, score=(train=0.924, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=8, n_estimators=4;, score=(train=0.937, test=0.894) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=8, n_estimators=4;, score=(train=0.945, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=8, n_estimators=4;, score=(train=0.942, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=8, n_estimators=4;, score=(train=0.939, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=8, n_estimators=4;, score=(train=0.947, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=8, n_estimators=5;, score=(train=0.945, test=0.913) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=8, n_estimators=5;, score=(train=0.943, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=8, n_estimators=5;, score=(train=0.946, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=8, n_estimators=5;, score=(train=0.949, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=8, n_estimators=5;, score=(train=0.947, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=8, n_estimators=6;, score=(train=0.949, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=8, n_estimators=6;, score=(train=0.952, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=8, n_estimators=6;, score=(train=0.949, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=8, n_estimators=6;, score=(train=0.952, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=8, n_estimators=6;, score=(train=0.952, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=8, n_estimators=7;, score=(train=0.952, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=8, n_estimators=7;, score=(train=0.952, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=8, n_estimators=7;, score=(train=0.949, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=8, n_estimators=7;, score=(train=0.956, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=8, n_estimators=7;, score=(train=0.956, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=8, n_estimators=8;, score=(train=0.952, test=0.939) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=8, n_estimators=8;, score=(train=0.954, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=8, n_estimators=8;, score=(train=0.949, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=8, n_estimators=8;, score=(train=0.955, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=8, n_estimators=8;, score=(train=0.952, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=8, n_estimators=9;, score=(train=0.956, test=0.936) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=8, n_estimators=9;, score=(train=0.955, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=8, n_estimators=9;, score=(train=0.947, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=8, n_estimators=9;, score=(train=0.955, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=8, n_estimators=9;, score=(train=0.954, test=0.953) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=9, n_estimators=1;, score=(train=0.915, test=0.866) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=9, n_estimators=1;, score=(train=0.898, test=0.895) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=9, n_estimators=1;, score=(train=0.895, test=0.923) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=9, n_estimators=1;, score=(train=0.915, test=0.909) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=9, n_estimators=1;, score=(train=0.896, test=0.869) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=9, n_estimators=2;, score=(train=0.944, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=9, n_estimators=2;, score=(train=0.931, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=9, n_estimators=2;, score=(train=0.934, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=9, n_estimators=2;, score=(train=0.933, test=0.908) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=9, n_estimators=2;, score=(train=0.942, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=9, n_estimators=3;, score=(train=0.953, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=9, n_estimators=3;, score=(train=0.933, test=0.930) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=9, n_estimators=3;, score=(train=0.939, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=9, n_estimators=3;, score=(train=0.928, test=0.913) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=9, n_estimators=3;, score=(train=0.942, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=9, n_estimators=4;, score=(train=0.958, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=9, n_estimators=4;, score=(train=0.946, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=9, n_estimators=4;, score=(train=0.945, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=9, n_estimators=4;, score=(train=0.947, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=9, n_estimators=4;, score=(train=0.950, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=9, n_estimators=5;, score=(train=0.955, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=9, n_estimators=5;, score=(train=0.952, test=0.953) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=9, n_estimators=5;, score=(train=0.947, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=9, n_estimators=5;, score=(train=0.955, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=9, n_estimators=5;, score=(train=0.954, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=9, n_estimators=6;, score=(train=0.958, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=9, n_estimators=6;, score=(train=0.955, test=0.953) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=9, n_estimators=6;, score=(train=0.952, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=9, n_estimators=6;, score=(train=0.955, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=9, n_estimators=6;, score=(train=0.956, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=9, n_estimators=7;, score=(train=0.956, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=9, n_estimators=7;, score=(train=0.949, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=9, n_estimators=7;, score=(train=0.955, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=9, n_estimators=7;, score=(train=0.959, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=9, n_estimators=7;, score=(train=0.956, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=9, n_estimators=8;, score=(train=0.958, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=9, n_estimators=8;, score=(train=0.954, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=9, n_estimators=8;, score=(train=0.954, test=0.965) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=9, n_estimators=8;, score=(train=0.956, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=9, n_estimators=8;, score=(train=0.953, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.965) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=10, n_estimators=1;, score=(train=0.919, test=0.857) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=10, n_estimators=1;, score=(train=0.927, test=0.920) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=10, n_estimators=1;, score=(train=0.913, test=0.918) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=10, n_estimators=1;, score=(train=0.908, test=0.895) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=10, n_estimators=1;, score=(train=0.929, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=10, n_estimators=2;, score=(train=0.937, test=0.869) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=10, n_estimators=2;, score=(train=0.941, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=10, n_estimators=2;, score=(train=0.932, test=0.927) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=10, n_estimators=2;, score=(train=0.935, test=0.908) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=10, n_estimators=2;, score=(train=0.942, test=0.925) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=10, n_estimators=3;, score=(train=0.949, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=10, n_estimators=3;, score=(train=0.945, test=0.937) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=10, n_estimators=3;, score=(train=0.941, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=10, n_estimators=3;, score=(train=0.946, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=10, n_estimators=3;, score=(train=0.951, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=10, n_estimators=4;, score=(train=0.952, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=10, n_estimators=4;, score=(train=0.952, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=10, n_estimators=4;, score=(train=0.949, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=10, n_estimators=4;, score=(train=0.956, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=10, n_estimators=4;, score=(train=0.951, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=10, n_estimators=5;, score=(train=0.952, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=10, n_estimators=5;, score=(train=0.953, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=10, n_estimators=5;, score=(train=0.955, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=10, n_estimators=5;, score=(train=0.956, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=10, n_estimators=5;, score=(train=0.955, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=10, n_estimators=6;, score=(train=0.959, test=0.932) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=10, n_estimators=6;, score=(train=0.957, test=0.955) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=10, n_estimators=6;, score=(train=0.958, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=10, n_estimators=6;, score=(train=0.958, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=10, n_estimators=6;, score=(train=0.959, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=10, n_estimators=7;, score=(train=0.958, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=10, n_estimators=7;, score=(train=0.957, test=0.955) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=10, n_estimators=7;, score=(train=0.957, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=10, n_estimators=7;, score=(train=0.959, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=10, n_estimators=7;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=10, n_estimators=8;, score=(train=0.961, test=0.943) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=10, n_estimators=8;, score=(train=0.958, test=0.956) total time=   0.1s\n","[CV 3/5] END criterion=entropy, max_depth=10, n_estimators=8;, score=(train=0.958, test=0.969) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=10, n_estimators=8;, score=(train=0.958, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=10, n_estimators=8;, score=(train=0.959, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=10, n_estimators=9;, score=(train=0.961, test=0.939) total time=   0.1s\n","[CV 2/5] END criterion=entropy, max_depth=10, n_estimators=9;, score=(train=0.957, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=10, n_estimators=9;, score=(train=0.958, test=0.969) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=10, n_estimators=9;, score=(train=0.958, test=0.944) total time=   0.1s\n","[CV 5/5] END criterion=entropy, max_depth=10, n_estimators=9;, score=(train=0.959, test=0.958) total time=   0.1s\n","[CV 1/5] END criterion=entropy, max_depth=11, n_estimators=1;, score=(train=0.937, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=11, n_estimators=1;, score=(train=0.937, test=0.915) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=11, n_estimators=1;, score=(train=0.930, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=11, n_estimators=1;, score=(train=0.931, test=0.913) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=11, n_estimators=1;, score=(train=0.937, test=0.913) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=11, n_estimators=2;, score=(train=0.947, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=11, n_estimators=2;, score=(train=0.946, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=11, n_estimators=2;, score=(train=0.942, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=11, n_estimators=2;, score=(train=0.940, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=11, n_estimators=2;, score=(train=0.941, test=0.899) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=11, n_estimators=3;, score=(train=0.961, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=11, n_estimators=3;, score=(train=0.953, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=11, n_estimators=3;, score=(train=0.951, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=11, n_estimators=3;, score=(train=0.946, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=11, n_estimators=3;, score=(train=0.958, test=0.925) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=11, n_estimators=4;, score=(train=0.962, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=11, n_estimators=4;, score=(train=0.959, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=11, n_estimators=4;, score=(train=0.955, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=11, n_estimators=4;, score=(train=0.959, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=11, n_estimators=4;, score=(train=0.959, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=11, n_estimators=5;, score=(train=0.962, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=11, n_estimators=5;, score=(train=0.957, test=0.955) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=11, n_estimators=5;, score=(train=0.957, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=11, n_estimators=5;, score=(train=0.959, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=11, n_estimators=5;, score=(train=0.961, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=11, n_estimators=6;, score=(train=0.964, test=0.943) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=11, n_estimators=6;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=11, n_estimators=6;, score=(train=0.959, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=11, n_estimators=6;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=11, n_estimators=6;, score=(train=0.962, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=11, n_estimators=7;, score=(train=0.964, test=0.944) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=11, n_estimators=7;, score=(train=0.961, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=11, n_estimators=7;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=11, n_estimators=7;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=11, n_estimators=7;, score=(train=0.960, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=11, n_estimators=8;, score=(train=0.964, test=0.944) total time=   0.1s\n","[CV 2/5] END criterion=entropy, max_depth=11, n_estimators=8;, score=(train=0.960, test=0.960) total time=   0.1s\n","[CV 3/5] END criterion=entropy, max_depth=11, n_estimators=8;, score=(train=0.959, test=0.960) total time=   0.1s\n","[CV 4/5] END criterion=entropy, max_depth=11, n_estimators=8;, score=(train=0.964, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=11, n_estimators=8;, score=(train=0.961, test=0.939) total time=   0.1s\n","[CV 1/5] END criterion=entropy, max_depth=11, n_estimators=9;, score=(train=0.964, test=0.946) total time=   0.1s\n","[CV 2/5] END criterion=entropy, max_depth=11, n_estimators=9;, score=(train=0.959, test=0.953) total time=   0.1s\n","[CV 3/5] END criterion=entropy, max_depth=11, n_estimators=9;, score=(train=0.960, test=0.967) total time=   0.1s\n","[CV 4/5] END criterion=entropy, max_depth=11, n_estimators=9;, score=(train=0.964, test=0.949) total time=   0.1s\n","[CV 5/5] END criterion=entropy, max_depth=11, n_estimators=9;, score=(train=0.963, test=0.937) total time=   0.1s\n","[CV 1/5] END criterion=entropy, max_depth=12, n_estimators=1;, score=(train=0.932, test=0.871) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=12, n_estimators=1;, score=(train=0.932, test=0.885) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=12, n_estimators=1;, score=(train=0.932, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=12, n_estimators=1;, score=(train=0.937, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=12, n_estimators=1;, score=(train=0.941, test=0.927) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=12, n_estimators=2;, score=(train=0.950, test=0.878) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=12, n_estimators=2;, score=(train=0.947, test=0.897) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=12, n_estimators=2;, score=(train=0.935, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=12, n_estimators=2;, score=(train=0.940, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=12, n_estimators=2;, score=(train=0.947, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=12, n_estimators=3;, score=(train=0.960, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=12, n_estimators=3;, score=(train=0.955, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=12, n_estimators=3;, score=(train=0.957, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=12, n_estimators=3;, score=(train=0.956, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=12, n_estimators=3;, score=(train=0.961, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=12, n_estimators=4;, score=(train=0.966, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=12, n_estimators=4;, score=(train=0.959, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=12, n_estimators=4;, score=(train=0.957, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=12, n_estimators=4;, score=(train=0.962, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=12, n_estimators=4;, score=(train=0.961, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=12, n_estimators=5;, score=(train=0.966, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=12, n_estimators=5;, score=(train=0.959, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=12, n_estimators=5;, score=(train=0.961, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=12, n_estimators=5;, score=(train=0.966, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=12, n_estimators=5;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=12, n_estimators=6;, score=(train=0.969, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=12, n_estimators=6;, score=(train=0.963, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=12, n_estimators=6;, score=(train=0.963, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=12, n_estimators=6;, score=(train=0.966, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=12, n_estimators=6;, score=(train=0.963, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=12, n_estimators=7;, score=(train=0.969, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=12, n_estimators=7;, score=(train=0.964, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=12, n_estimators=7;, score=(train=0.961, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=12, n_estimators=7;, score=(train=0.967, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=12, n_estimators=7;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=12, n_estimators=8;, score=(train=0.969, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=12, n_estimators=8;, score=(train=0.965, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=12, n_estimators=8;, score=(train=0.961, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=12, n_estimators=8;, score=(train=0.966, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=12, n_estimators=8;, score=(train=0.963, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=12, n_estimators=9;, score=(train=0.969, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=12, n_estimators=9;, score=(train=0.966, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=12, n_estimators=9;, score=(train=0.961, test=0.963) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=12, n_estimators=9;, score=(train=0.966, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=12, n_estimators=9;, score=(train=0.964, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=13, n_estimators=1;, score=(train=0.940, test=0.899) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=13, n_estimators=1;, score=(train=0.939, test=0.895) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=13, n_estimators=1;, score=(train=0.942, test=0.937) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=13, n_estimators=1;, score=(train=0.942, test=0.895) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=13, n_estimators=1;, score=(train=0.938, test=0.927) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=13, n_estimators=2;, score=(train=0.943, test=0.899) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=13, n_estimators=2;, score=(train=0.945, test=0.901) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=13, n_estimators=2;, score=(train=0.946, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=13, n_estimators=2;, score=(train=0.940, test=0.901) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=13, n_estimators=2;, score=(train=0.942, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=13, n_estimators=3;, score=(train=0.962, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=13, n_estimators=3;, score=(train=0.964, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=13, n_estimators=3;, score=(train=0.962, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=13, n_estimators=3;, score=(train=0.961, test=0.927) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=13, n_estimators=3;, score=(train=0.963, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=13, n_estimators=4;, score=(train=0.963, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=13, n_estimators=4;, score=(train=0.964, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=13, n_estimators=4;, score=(train=0.959, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=13, n_estimators=4;, score=(train=0.959, test=0.927) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=13, n_estimators=4;, score=(train=0.960, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=13, n_estimators=5;, score=(train=0.968, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=13, n_estimators=5;, score=(train=0.968, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=13, n_estimators=5;, score=(train=0.964, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=13, n_estimators=5;, score=(train=0.966, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=13, n_estimators=5;, score=(train=0.966, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=13, n_estimators=6;, score=(train=0.969, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=13, n_estimators=6;, score=(train=0.966, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=13, n_estimators=6;, score=(train=0.964, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=13, n_estimators=6;, score=(train=0.967, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=13, n_estimators=6;, score=(train=0.966, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=13, n_estimators=7;, score=(train=0.968, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=13, n_estimators=7;, score=(train=0.968, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=13, n_estimators=7;, score=(train=0.965, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=13, n_estimators=7;, score=(train=0.969, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=13, n_estimators=7;, score=(train=0.966, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=13, n_estimators=8;, score=(train=0.969, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=13, n_estimators=8;, score=(train=0.970, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=13, n_estimators=8;, score=(train=0.965, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=13, n_estimators=8;, score=(train=0.968, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=13, n_estimators=8;, score=(train=0.967, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=13, n_estimators=9;, score=(train=0.970, test=0.936) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=13, n_estimators=9;, score=(train=0.970, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=13, n_estimators=9;, score=(train=0.966, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=13, n_estimators=9;, score=(train=0.969, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=13, n_estimators=9;, score=(train=0.967, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=14, n_estimators=1;, score=(train=0.944, test=0.869) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=14, n_estimators=1;, score=(train=0.944, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=14, n_estimators=1;, score=(train=0.940, test=0.927) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=14, n_estimators=1;, score=(train=0.950, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=14, n_estimators=1;, score=(train=0.949, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=14, n_estimators=2;, score=(train=0.947, test=0.864) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=14, n_estimators=2;, score=(train=0.946, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=14, n_estimators=2;, score=(train=0.939, test=0.911) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=14, n_estimators=2;, score=(train=0.950, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=14, n_estimators=2;, score=(train=0.951, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=14, n_estimators=3;, score=(train=0.967, test=0.911) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=14, n_estimators=3;, score=(train=0.963, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=14, n_estimators=3;, score=(train=0.960, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=14, n_estimators=3;, score=(train=0.963, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=14, n_estimators=3;, score=(train=0.965, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=14, n_estimators=4;, score=(train=0.966, test=0.906) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=14, n_estimators=4;, score=(train=0.963, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=14, n_estimators=4;, score=(train=0.959, test=0.937) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=14, n_estimators=4;, score=(train=0.965, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=14, n_estimators=4;, score=(train=0.962, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=14, n_estimators=5;, score=(train=0.972, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=14, n_estimators=5;, score=(train=0.968, test=0.932) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=14, n_estimators=5;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=14, n_estimators=5;, score=(train=0.970, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=14, n_estimators=5;, score=(train=0.968, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=14, n_estimators=6;, score=(train=0.969, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=14, n_estimators=6;, score=(train=0.969, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=14, n_estimators=6;, score=(train=0.963, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=14, n_estimators=6;, score=(train=0.969, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=14, n_estimators=6;, score=(train=0.968, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=14, n_estimators=7;, score=(train=0.972, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=14, n_estimators=7;, score=(train=0.971, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=14, n_estimators=7;, score=(train=0.965, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=14, n_estimators=7;, score=(train=0.971, test=0.951) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=14, n_estimators=7;, score=(train=0.971, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=14, n_estimators=8;, score=(train=0.973, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=14, n_estimators=8;, score=(train=0.972, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=14, n_estimators=8;, score=(train=0.964, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=14, n_estimators=8;, score=(train=0.970, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=14, n_estimators=8;, score=(train=0.970, test=0.953) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=14, n_estimators=9;, score=(train=0.972, test=0.936) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=14, n_estimators=9;, score=(train=0.971, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=14, n_estimators=9;, score=(train=0.966, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=14, n_estimators=9;, score=(train=0.970, test=0.951) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=14, n_estimators=9;, score=(train=0.970, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=15, n_estimators=1;, score=(train=0.952, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=15, n_estimators=1;, score=(train=0.949, test=0.904) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=15, n_estimators=1;, score=(train=0.946, test=0.913) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=15, n_estimators=1;, score=(train=0.942, test=0.880) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=15, n_estimators=1;, score=(train=0.947, test=0.908) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=15, n_estimators=2;, score=(train=0.952, test=0.913) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=15, n_estimators=2;, score=(train=0.944, test=0.913) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=15, n_estimators=2;, score=(train=0.937, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=15, n_estimators=2;, score=(train=0.942, test=0.897) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=15, n_estimators=2;, score=(train=0.949, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=15, n_estimators=3;, score=(train=0.971, test=0.911) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=15, n_estimators=3;, score=(train=0.966, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=15, n_estimators=3;, score=(train=0.962, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=15, n_estimators=3;, score=(train=0.969, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=15, n_estimators=3;, score=(train=0.968, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=15, n_estimators=4;, score=(train=0.969, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=15, n_estimators=4;, score=(train=0.961, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=15, n_estimators=4;, score=(train=0.963, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=15, n_estimators=4;, score=(train=0.964, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=15, n_estimators=4;, score=(train=0.965, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=15, n_estimators=5;, score=(train=0.973, test=0.927) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=15, n_estimators=5;, score=(train=0.969, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=15, n_estimators=5;, score=(train=0.967, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=15, n_estimators=5;, score=(train=0.972, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=15, n_estimators=5;, score=(train=0.969, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=15, n_estimators=6;, score=(train=0.971, test=0.932) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=15, n_estimators=6;, score=(train=0.967, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=15, n_estimators=6;, score=(train=0.967, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=15, n_estimators=6;, score=(train=0.970, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=15, n_estimators=6;, score=(train=0.970, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=15, n_estimators=7;, score=(train=0.972, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=15, n_estimators=7;, score=(train=0.972, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=15, n_estimators=7;, score=(train=0.969, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=15, n_estimators=7;, score=(train=0.972, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=15, n_estimators=7;, score=(train=0.970, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=15, n_estimators=8;, score=(train=0.972, test=0.936) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=15, n_estimators=8;, score=(train=0.973, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=15, n_estimators=8;, score=(train=0.968, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=15, n_estimators=8;, score=(train=0.970, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=15, n_estimators=8;, score=(train=0.969, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=15, n_estimators=9;, score=(train=0.973, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=15, n_estimators=9;, score=(train=0.974, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=15, n_estimators=9;, score=(train=0.970, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=15, n_estimators=9;, score=(train=0.972, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=15, n_estimators=9;, score=(train=0.972, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=16, n_estimators=1;, score=(train=0.954, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=16, n_estimators=1;, score=(train=0.943, test=0.890) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=16, n_estimators=1;, score=(train=0.935, test=0.895) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=16, n_estimators=1;, score=(train=0.942, test=0.894) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=16, n_estimators=1;, score=(train=0.947, test=0.909) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=16, n_estimators=2;, score=(train=0.947, test=0.887) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=16, n_estimators=2;, score=(train=0.949, test=0.894) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=16, n_estimators=2;, score=(train=0.939, test=0.906) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=16, n_estimators=2;, score=(train=0.941, test=0.899) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=16, n_estimators=2;, score=(train=0.949, test=0.892) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=16, n_estimators=3;, score=(train=0.970, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=16, n_estimators=3;, score=(train=0.969, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=16, n_estimators=3;, score=(train=0.964, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=16, n_estimators=3;, score=(train=0.969, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=16, n_estimators=3;, score=(train=0.966, test=0.925) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=16, n_estimators=4;, score=(train=0.968, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=16, n_estimators=4;, score=(train=0.966, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=16, n_estimators=4;, score=(train=0.962, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=16, n_estimators=4;, score=(train=0.967, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=16, n_estimators=4;, score=(train=0.965, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=16, n_estimators=5;, score=(train=0.973, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=16, n_estimators=5;, score=(train=0.973, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=16, n_estimators=5;, score=(train=0.969, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=16, n_estimators=5;, score=(train=0.973, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=16, n_estimators=5;, score=(train=0.971, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=16, n_estimators=6;, score=(train=0.972, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=16, n_estimators=6;, score=(train=0.973, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=16, n_estimators=6;, score=(train=0.968, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=16, n_estimators=6;, score=(train=0.972, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=16, n_estimators=6;, score=(train=0.969, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=16, n_estimators=7;, score=(train=0.975, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=16, n_estimators=7;, score=(train=0.973, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=16, n_estimators=7;, score=(train=0.969, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=16, n_estimators=7;, score=(train=0.973, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=16, n_estimators=7;, score=(train=0.973, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=16, n_estimators=8;, score=(train=0.973, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=16, n_estimators=8;, score=(train=0.973, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=16, n_estimators=8;, score=(train=0.969, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=16, n_estimators=8;, score=(train=0.974, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=16, n_estimators=8;, score=(train=0.973, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=16, n_estimators=9;, score=(train=0.976, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=16, n_estimators=9;, score=(train=0.975, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=16, n_estimators=9;, score=(train=0.971, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=16, n_estimators=9;, score=(train=0.975, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=16, n_estimators=9;, score=(train=0.974, test=0.941) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=17, n_estimators=1;, score=(train=0.952, test=0.869) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=17, n_estimators=1;, score=(train=0.945, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=17, n_estimators=1;, score=(train=0.944, test=0.908) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=17, n_estimators=1;, score=(train=0.949, test=0.888) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=17, n_estimators=1;, score=(train=0.949, test=0.890) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=17, n_estimators=2;, score=(train=0.951, test=0.864) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=17, n_estimators=2;, score=(train=0.948, test=0.892) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=17, n_estimators=2;, score=(train=0.946, test=0.902) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=17, n_estimators=2;, score=(train=0.950, test=0.906) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=17, n_estimators=2;, score=(train=0.945, test=0.878) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=17, n_estimators=3;, score=(train=0.970, test=0.892) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=17, n_estimators=3;, score=(train=0.969, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=17, n_estimators=3;, score=(train=0.966, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=17, n_estimators=3;, score=(train=0.971, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=17, n_estimators=3;, score=(train=0.968, test=0.918) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=17, n_estimators=4;, score=(train=0.969, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=17, n_estimators=4;, score=(train=0.967, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=17, n_estimators=4;, score=(train=0.968, test=0.934) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=17, n_estimators=4;, score=(train=0.967, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=17, n_estimators=4;, score=(train=0.966, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=17, n_estimators=5;, score=(train=0.975, test=0.913) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=17, n_estimators=5;, score=(train=0.974, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=17, n_estimators=5;, score=(train=0.973, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=17, n_estimators=5;, score=(train=0.971, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=17, n_estimators=5;, score=(train=0.975, test=0.925) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=17, n_estimators=6;, score=(train=0.974, test=0.902) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=17, n_estimators=6;, score=(train=0.972, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=17, n_estimators=6;, score=(train=0.972, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=17, n_estimators=6;, score=(train=0.972, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=17, n_estimators=6;, score=(train=0.973, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=17, n_estimators=7;, score=(train=0.975, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=17, n_estimators=7;, score=(train=0.973, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=17, n_estimators=7;, score=(train=0.972, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=17, n_estimators=7;, score=(train=0.973, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=17, n_estimators=7;, score=(train=0.975, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=17, n_estimators=8;, score=(train=0.976, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=17, n_estimators=8;, score=(train=0.973, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=17, n_estimators=8;, score=(train=0.971, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=17, n_estimators=8;, score=(train=0.972, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=17, n_estimators=8;, score=(train=0.975, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=17, n_estimators=9;, score=(train=0.977, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=17, n_estimators=9;, score=(train=0.975, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=17, n_estimators=9;, score=(train=0.973, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=17, n_estimators=9;, score=(train=0.977, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=17, n_estimators=9;, score=(train=0.977, test=0.935) total time=   0.1s\n","[CV 1/5] END criterion=entropy, max_depth=18, n_estimators=1;, score=(train=0.948, test=0.864) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=18, n_estimators=1;, score=(train=0.935, test=0.871) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=18, n_estimators=1;, score=(train=0.954, test=0.911) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=18, n_estimators=1;, score=(train=0.950, test=0.887) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=18, n_estimators=1;, score=(train=0.958, test=0.880) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=18, n_estimators=2;, score=(train=0.950, test=0.855) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=18, n_estimators=2;, score=(train=0.935, test=0.882) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=18, n_estimators=2;, score=(train=0.947, test=0.899) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=18, n_estimators=2;, score=(train=0.941, test=0.878) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=18, n_estimators=2;, score=(train=0.950, test=0.869) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=18, n_estimators=3;, score=(train=0.970, test=0.892) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=18, n_estimators=3;, score=(train=0.966, test=0.927) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=18, n_estimators=3;, score=(train=0.968, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=18, n_estimators=3;, score=(train=0.970, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=18, n_estimators=3;, score=(train=0.972, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=18, n_estimators=4;, score=(train=0.967, test=0.904) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=18, n_estimators=4;, score=(train=0.965, test=0.932) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=18, n_estimators=4;, score=(train=0.969, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=18, n_estimators=4;, score=(train=0.969, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=18, n_estimators=4;, score=(train=0.967, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=18, n_estimators=5;, score=(train=0.977, test=0.911) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=18, n_estimators=5;, score=(train=0.972, test=0.937) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=18, n_estimators=5;, score=(train=0.972, test=0.930) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=18, n_estimators=5;, score=(train=0.975, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=18, n_estimators=5;, score=(train=0.976, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=18, n_estimators=6;, score=(train=0.977, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=18, n_estimators=6;, score=(train=0.969, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=18, n_estimators=6;, score=(train=0.973, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=18, n_estimators=6;, score=(train=0.974, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=18, n_estimators=6;, score=(train=0.976, test=0.925) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=18, n_estimators=7;, score=(train=0.978, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=18, n_estimators=7;, score=(train=0.973, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=18, n_estimators=7;, score=(train=0.974, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=18, n_estimators=7;, score=(train=0.976, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=18, n_estimators=7;, score=(train=0.978, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=18, n_estimators=8;, score=(train=0.977, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=18, n_estimators=8;, score=(train=0.974, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=18, n_estimators=8;, score=(train=0.973, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=18, n_estimators=8;, score=(train=0.975, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=18, n_estimators=8;, score=(train=0.974, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=18, n_estimators=9;, score=(train=0.980, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=18, n_estimators=9;, score=(train=0.976, test=0.951) total time=   0.1s\n","[CV 3/5] END criterion=entropy, max_depth=18, n_estimators=9;, score=(train=0.975, test=0.941) total time=   0.1s\n","[CV 4/5] END criterion=entropy, max_depth=18, n_estimators=9;, score=(train=0.978, test=0.930) total time=   0.1s\n","[CV 5/5] END criterion=entropy, max_depth=18, n_estimators=9;, score=(train=0.979, test=0.930) total time=   0.1s\n","[CV 1/5] END criterion=entropy, max_depth=19, n_estimators=1;, score=(train=0.956, test=0.880) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=19, n_estimators=1;, score=(train=0.945, test=0.883) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=19, n_estimators=1;, score=(train=0.949, test=0.892) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=19, n_estimators=1;, score=(train=0.958, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=19, n_estimators=1;, score=(train=0.960, test=0.887) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=19, n_estimators=2;, score=(train=0.954, test=0.866) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=19, n_estimators=2;, score=(train=0.944, test=0.892) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=19, n_estimators=2;, score=(train=0.949, test=0.906) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=19, n_estimators=2;, score=(train=0.947, test=0.901) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=19, n_estimators=2;, score=(train=0.950, test=0.874) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=19, n_estimators=3;, score=(train=0.973, test=0.894) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=19, n_estimators=3;, score=(train=0.969, test=0.918) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=19, n_estimators=3;, score=(train=0.970, test=0.930) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=19, n_estimators=3;, score=(train=0.972, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=19, n_estimators=3;, score=(train=0.977, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=19, n_estimators=4;, score=(train=0.971, test=0.882) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=19, n_estimators=4;, score=(train=0.968, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=19, n_estimators=4;, score=(train=0.969, test=0.937) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=19, n_estimators=4;, score=(train=0.970, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=19, n_estimators=4;, score=(train=0.972, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=19, n_estimators=5;, score=(train=0.976, test=0.894) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=19, n_estimators=5;, score=(train=0.975, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=19, n_estimators=5;, score=(train=0.973, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=19, n_estimators=5;, score=(train=0.976, test=0.934) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=19, n_estimators=5;, score=(train=0.979, test=0.927) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=19, n_estimators=6;, score=(train=0.976, test=0.894) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=19, n_estimators=6;, score=(train=0.972, test=0.937) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=19, n_estimators=6;, score=(train=0.973, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=19, n_estimators=6;, score=(train=0.975, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=19, n_estimators=6;, score=(train=0.978, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=19, n_estimators=7;, score=(train=0.978, test=0.911) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=19, n_estimators=7;, score=(train=0.975, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=19, n_estimators=7;, score=(train=0.974, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=19, n_estimators=7;, score=(train=0.976, test=0.937) total time=   0.1s\n","[CV 5/5] END criterion=entropy, max_depth=19, n_estimators=7;, score=(train=0.978, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=19, n_estimators=8;, score=(train=0.977, test=0.908) total time=   0.1s\n","[CV 2/5] END criterion=entropy, max_depth=19, n_estimators=8;, score=(train=0.975, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=19, n_estimators=8;, score=(train=0.976, test=0.948) total time=   0.1s\n","[CV 4/5] END criterion=entropy, max_depth=19, n_estimators=8;, score=(train=0.977, test=0.935) total time=   0.1s\n","[CV 5/5] END criterion=entropy, max_depth=19, n_estimators=8;, score=(train=0.977, test=0.930) total time=   0.1s\n","[CV 1/5] END criterion=entropy, max_depth=19, n_estimators=9;, score=(train=0.979, test=0.906) total time=   0.1s\n","[CV 2/5] END criterion=entropy, max_depth=19, n_estimators=9;, score=(train=0.976, test=0.948) total time=   0.1s\n","[CV 3/5] END criterion=entropy, max_depth=19, n_estimators=9;, score=(train=0.977, test=0.949) total time=   0.1s\n","[CV 4/5] END criterion=entropy, max_depth=19, n_estimators=9;, score=(train=0.979, test=0.937) total time=   0.1s\n","[CV 5/5] END criterion=entropy, max_depth=19, n_estimators=9;, score=(train=0.980, test=0.930) total time=   0.1s\n","[CV 1/5] END criterion=log_loss, max_depth=1, n_estimators=1;, score=(train=0.372, test=0.382) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=1, n_estimators=1;, score=(train=0.379, test=0.366) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=1, n_estimators=1;, score=(train=0.376, test=0.380) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=1, n_estimators=1;, score=(train=0.377, test=0.375) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=1, n_estimators=1;, score=(train=0.377, test=0.377) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=1, n_estimators=2;, score=(train=0.514, test=0.510) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=1, n_estimators=2;, score=(train=0.515, test=0.505) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=1, n_estimators=2;, score=(train=0.510, test=0.525) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=1, n_estimators=2;, score=(train=0.511, test=0.520) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=1, n_estimators=2;, score=(train=0.515, test=0.504) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=1, n_estimators=3;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=1, n_estimators=3;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=1, n_estimators=3;, score=(train=0.571, test=0.595) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=1, n_estimators=3;, score=(train=0.578, test=0.567) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=1, n_estimators=3;, score=(train=0.578, test=0.569) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=1, n_estimators=4;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=1, n_estimators=4;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=1, n_estimators=4;, score=(train=0.571, test=0.595) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=1, n_estimators=4;, score=(train=0.578, test=0.567) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=1, n_estimators=4;, score=(train=0.578, test=0.569) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=1, n_estimators=5;, score=(train=0.546, test=0.554) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=1, n_estimators=5;, score=(train=0.577, test=0.575) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=1, n_estimators=5;, score=(train=0.571, test=0.595) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=1, n_estimators=5;, score=(train=0.553, test=0.525) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=1, n_estimators=5;, score=(train=0.547, test=0.548) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=1, n_estimators=6;, score=(train=0.582, test=0.571) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=1, n_estimators=6;, score=(train=0.577, test=0.580) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=1, n_estimators=6;, score=(train=0.571, test=0.586) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=1, n_estimators=6;, score=(train=0.578, test=0.558) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=1, n_estimators=6;, score=(train=0.581, test=0.567) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=1, n_estimators=7;, score=(train=0.601, test=0.591) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=1, n_estimators=7;, score=(train=0.577, test=0.580) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=1, n_estimators=7;, score=(train=0.588, test=0.616) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=1, n_estimators=7;, score=(train=0.598, test=0.578) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=1, n_estimators=7;, score=(train=0.597, test=0.579) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=1, n_estimators=8;, score=(train=0.613, test=0.599) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=1, n_estimators=8;, score=(train=0.604, test=0.589) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=1, n_estimators=8;, score=(train=0.653, test=0.675) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=1, n_estimators=8;, score=(train=0.613, test=0.600) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=1, n_estimators=8;, score=(train=0.661, test=0.644) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=1, n_estimators=9;, score=(train=0.679, test=0.660) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=1, n_estimators=9;, score=(train=0.670, test=0.655) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=1, n_estimators=9;, score=(train=0.670, test=0.689) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=1, n_estimators=9;, score=(train=0.599, test=0.595) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=1, n_estimators=9;, score=(train=0.676, test=0.668) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=2, n_estimators=1;, score=(train=0.514, test=0.510) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=2, n_estimators=1;, score=(train=0.515, test=0.505) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=2, n_estimators=1;, score=(train=0.510, test=0.525) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=2, n_estimators=1;, score=(train=0.511, test=0.520) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=2, n_estimators=1;, score=(train=0.515, test=0.504) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=2, n_estimators=2;, score=(train=0.641, test=0.617) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=2, n_estimators=2;, score=(train=0.635, test=0.639) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=2, n_estimators=2;, score=(train=0.633, test=0.665) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=2, n_estimators=2;, score=(train=0.641, test=0.632) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=2, n_estimators=2;, score=(train=0.638, test=0.630) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=2, n_estimators=3;, score=(train=0.647, test=0.580) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=2, n_estimators=3;, score=(train=0.625, test=0.669) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=2, n_estimators=3;, score=(train=0.616, test=0.668) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=2, n_estimators=3;, score=(train=0.627, test=0.595) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=2, n_estimators=3;, score=(train=0.630, test=0.614) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=2, n_estimators=4;, score=(train=0.648, test=0.615) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=2, n_estimators=4;, score=(train=0.639, test=0.639) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=2, n_estimators=4;, score=(train=0.619, test=0.665) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=2, n_estimators=4;, score=(train=0.631, test=0.613) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=2, n_estimators=4;, score=(train=0.632, test=0.614) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=2, n_estimators=5;, score=(train=0.647, test=0.605) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=2, n_estimators=5;, score=(train=0.631, test=0.632) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=2, n_estimators=5;, score=(train=0.689, test=0.724) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=2, n_estimators=5;, score=(train=0.687, test=0.679) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=2, n_estimators=5;, score=(train=0.687, test=0.681) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=2, n_estimators=6;, score=(train=0.751, test=0.720) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=2, n_estimators=6;, score=(train=0.742, test=0.739) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=2, n_estimators=6;, score=(train=0.763, test=0.810) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=2, n_estimators=6;, score=(train=0.770, test=0.756) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=2, n_estimators=6;, score=(train=0.770, test=0.770) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=2, n_estimators=7;, score=(train=0.746, test=0.725) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=2, n_estimators=7;, score=(train=0.742, test=0.739) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=2, n_estimators=7;, score=(train=0.762, test=0.805) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=2, n_estimators=7;, score=(train=0.778, test=0.763) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=2, n_estimators=7;, score=(train=0.774, test=0.768) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=2, n_estimators=8;, score=(train=0.772, test=0.744) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=2, n_estimators=8;, score=(train=0.778, test=0.760) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=2, n_estimators=8;, score=(train=0.769, test=0.810) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=2, n_estimators=8;, score=(train=0.810, test=0.810) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=2, n_estimators=8;, score=(train=0.777, test=0.775) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=2, n_estimators=9;, score=(train=0.814, test=0.779) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=2, n_estimators=9;, score=(train=0.815, test=0.808) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=2, n_estimators=9;, score=(train=0.782, test=0.824) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=2, n_estimators=9;, score=(train=0.830, test=0.824) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=2, n_estimators=9;, score=(train=0.792, test=0.784) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=3, n_estimators=1;, score=(train=0.578, test=0.578) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=3, n_estimators=1;, score=(train=0.578, test=0.566) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=3, n_estimators=1;, score=(train=0.572, test=0.585) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=3, n_estimators=1;, score=(train=0.582, test=0.565) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=3, n_estimators=1;, score=(train=0.579, test=0.564) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=3, n_estimators=2;, score=(train=0.796, test=0.768) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=3, n_estimators=2;, score=(train=0.788, test=0.801) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=3, n_estimators=2;, score=(train=0.787, test=0.805) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=3, n_estimators=2;, score=(train=0.753, test=0.740) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=3, n_estimators=2;, score=(train=0.790, test=0.792) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=3, n_estimators=3;, score=(train=0.786, test=0.756) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=3, n_estimators=3;, score=(train=0.775, test=0.801) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=3, n_estimators=3;, score=(train=0.785, test=0.799) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=3, n_estimators=3;, score=(train=0.770, test=0.752) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=3, n_estimators=3;, score=(train=0.786, test=0.784) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=3, n_estimators=4;, score=(train=0.814, test=0.782) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=3, n_estimators=4;, score=(train=0.804, test=0.824) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=3, n_estimators=4;, score=(train=0.814, test=0.831) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=3, n_estimators=4;, score=(train=0.797, test=0.775) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=3, n_estimators=4;, score=(train=0.811, test=0.815) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=3, n_estimators=5;, score=(train=0.846, test=0.812) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=3, n_estimators=5;, score=(train=0.836, test=0.854) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=3, n_estimators=5;, score=(train=0.869, test=0.878) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=3, n_estimators=5;, score=(train=0.847, test=0.838) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=3, n_estimators=5;, score=(train=0.862, test=0.871) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=3, n_estimators=6;, score=(train=0.867, test=0.829) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=3, n_estimators=6;, score=(train=0.860, test=0.876) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=3, n_estimators=6;, score=(train=0.858, test=0.880) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=3, n_estimators=6;, score=(train=0.849, test=0.845) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=3, n_estimators=6;, score=(train=0.845, test=0.845) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=3, n_estimators=7;, score=(train=0.850, test=0.808) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=3, n_estimators=7;, score=(train=0.829, test=0.848) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=3, n_estimators=7;, score=(train=0.846, test=0.869) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=3, n_estimators=7;, score=(train=0.860, test=0.864) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=3, n_estimators=7;, score=(train=0.859, test=0.866) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=3, n_estimators=8;, score=(train=0.857, test=0.817) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=3, n_estimators=8;, score=(train=0.861, test=0.871) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=3, n_estimators=8;, score=(train=0.878, test=0.890) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=3, n_estimators=8;, score=(train=0.874, test=0.873) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=3, n_estimators=8;, score=(train=0.863, test=0.864) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=3, n_estimators=9;, score=(train=0.860, test=0.817) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=3, n_estimators=9;, score=(train=0.862, test=0.871) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=3, n_estimators=9;, score=(train=0.887, test=0.892) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=3, n_estimators=9;, score=(train=0.894, test=0.895) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=3, n_estimators=9;, score=(train=0.882, test=0.887) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=4, n_estimators=1;, score=(train=0.704, test=0.686) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=4, n_estimators=1;, score=(train=0.710, test=0.704) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=4, n_estimators=1;, score=(train=0.704, test=0.719) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=4, n_estimators=1;, score=(train=0.711, test=0.705) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=4, n_estimators=1;, score=(train=0.708, test=0.710) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=4, n_estimators=2;, score=(train=0.880, test=0.841) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=4, n_estimators=2;, score=(train=0.871, test=0.875) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=4, n_estimators=2;, score=(train=0.867, test=0.894) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=4, n_estimators=2;, score=(train=0.870, test=0.873) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=4, n_estimators=2;, score=(train=0.873, test=0.860) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=4, n_estimators=3;, score=(train=0.858, test=0.822) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=4, n_estimators=3;, score=(train=0.847, test=0.862) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=4, n_estimators=3;, score=(train=0.860, test=0.878) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=4, n_estimators=3;, score=(train=0.867, test=0.874) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=4, n_estimators=3;, score=(train=0.874, test=0.860) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=4, n_estimators=4;, score=(train=0.877, test=0.852) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=4, n_estimators=4;, score=(train=0.869, test=0.880) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=4, n_estimators=4;, score=(train=0.862, test=0.880) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=4, n_estimators=4;, score=(train=0.878, test=0.887) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=4, n_estimators=4;, score=(train=0.888, test=0.869) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=4, n_estimators=5;, score=(train=0.876, test=0.845) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=4, n_estimators=5;, score=(train=0.866, test=0.880) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=4, n_estimators=5;, score=(train=0.867, test=0.890) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=4, n_estimators=5;, score=(train=0.880, test=0.883) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=4, n_estimators=5;, score=(train=0.889, test=0.873) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=4, n_estimators=6;, score=(train=0.885, test=0.859) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=4, n_estimators=6;, score=(train=0.876, test=0.892) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=4, n_estimators=6;, score=(train=0.886, test=0.902) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=4, n_estimators=6;, score=(train=0.884, test=0.887) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=4, n_estimators=6;, score=(train=0.887, test=0.871) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=4, n_estimators=7;, score=(train=0.896, test=0.864) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=4, n_estimators=7;, score=(train=0.887, test=0.895) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=4, n_estimators=7;, score=(train=0.888, test=0.904) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=4, n_estimators=7;, score=(train=0.886, test=0.876) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=4, n_estimators=7;, score=(train=0.894, test=0.878) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=4, n_estimators=8;, score=(train=0.907, test=0.873) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=4, n_estimators=8;, score=(train=0.892, test=0.894) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=4, n_estimators=8;, score=(train=0.892, test=0.911) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=4, n_estimators=8;, score=(train=0.888, test=0.883) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=4, n_estimators=8;, score=(train=0.891, test=0.887) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=4, n_estimators=9;, score=(train=0.893, test=0.871) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=4, n_estimators=9;, score=(train=0.887, test=0.885) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=4, n_estimators=9;, score=(train=0.898, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=4, n_estimators=9;, score=(train=0.909, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=4, n_estimators=9;, score=(train=0.902, test=0.904) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=5, n_estimators=1;, score=(train=0.799, test=0.758) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=5, n_estimators=1;, score=(train=0.795, test=0.774) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=5, n_estimators=1;, score=(train=0.784, test=0.817) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=5, n_estimators=1;, score=(train=0.786, test=0.808) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=5, n_estimators=1;, score=(train=0.789, test=0.796) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=5, n_estimators=2;, score=(train=0.921, test=0.873) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=5, n_estimators=2;, score=(train=0.907, test=0.904) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=5, n_estimators=2;, score=(train=0.904, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=5, n_estimators=2;, score=(train=0.895, test=0.911) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=5, n_estimators=2;, score=(train=0.899, test=0.895) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=5, n_estimators=3;, score=(train=0.907, test=0.859) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=5, n_estimators=3;, score=(train=0.898, test=0.901) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=5, n_estimators=3;, score=(train=0.900, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=5, n_estimators=3;, score=(train=0.881, test=0.892) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=5, n_estimators=3;, score=(train=0.898, test=0.885) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=5, n_estimators=4;, score=(train=0.903, test=0.845) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=5, n_estimators=4;, score=(train=0.909, test=0.913) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=5, n_estimators=4;, score=(train=0.900, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=5, n_estimators=4;, score=(train=0.892, test=0.909) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=5, n_estimators=4;, score=(train=0.896, test=0.890) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=5, n_estimators=5;, score=(train=0.924, test=0.882) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=5, n_estimators=5;, score=(train=0.914, test=0.915) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=5, n_estimators=5;, score=(train=0.908, test=0.934) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=5, n_estimators=5;, score=(train=0.902, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=5, n_estimators=5;, score=(train=0.903, test=0.899) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=5, n_estimators=6;, score=(train=0.924, test=0.883) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=5, n_estimators=6;, score=(train=0.920, test=0.904) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=5, n_estimators=6;, score=(train=0.914, test=0.934) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=5, n_estimators=6;, score=(train=0.905, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=5, n_estimators=6;, score=(train=0.913, test=0.904) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=5, n_estimators=7;, score=(train=0.916, test=0.875) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=5, n_estimators=7;, score=(train=0.917, test=0.901) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=5, n_estimators=7;, score=(train=0.903, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=5, n_estimators=7;, score=(train=0.902, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=5, n_estimators=7;, score=(train=0.898, test=0.899) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=5, n_estimators=8;, score=(train=0.921, test=0.880) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=5, n_estimators=8;, score=(train=0.922, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=5, n_estimators=8;, score=(train=0.912, test=0.928) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=5, n_estimators=8;, score=(train=0.906, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=5, n_estimators=8;, score=(train=0.908, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=5, n_estimators=9;, score=(train=0.927, test=0.894) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=5, n_estimators=9;, score=(train=0.924, test=0.918) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=5, n_estimators=9;, score=(train=0.914, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=5, n_estimators=9;, score=(train=0.908, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=5, n_estimators=9;, score=(train=0.913, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=6, n_estimators=1;, score=(train=0.822, test=0.793) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=6, n_estimators=1;, score=(train=0.829, test=0.824) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=6, n_estimators=1;, score=(train=0.823, test=0.848) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=6, n_estimators=1;, score=(train=0.840, test=0.843) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=6, n_estimators=1;, score=(train=0.840, test=0.843) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=6, n_estimators=2;, score=(train=0.916, test=0.882) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=6, n_estimators=2;, score=(train=0.909, test=0.902) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=6, n_estimators=2;, score=(train=0.909, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=6, n_estimators=2;, score=(train=0.925, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=6, n_estimators=2;, score=(train=0.939, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=6, n_estimators=3;, score=(train=0.924, test=0.897) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=6, n_estimators=3;, score=(train=0.915, test=0.895) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=6, n_estimators=3;, score=(train=0.916, test=0.928) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=6, n_estimators=3;, score=(train=0.915, test=0.904) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=6, n_estimators=3;, score=(train=0.915, test=0.913) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=6, n_estimators=4;, score=(train=0.933, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=6, n_estimators=4;, score=(train=0.927, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=6, n_estimators=4;, score=(train=0.918, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=6, n_estimators=4;, score=(train=0.928, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=6, n_estimators=4;, score=(train=0.934, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=6, n_estimators=5;, score=(train=0.929, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=6, n_estimators=5;, score=(train=0.925, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=6, n_estimators=5;, score=(train=0.931, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=6, n_estimators=5;, score=(train=0.931, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=6, n_estimators=5;, score=(train=0.945, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=6, n_estimators=6;, score=(train=0.939, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=6, n_estimators=6;, score=(train=0.929, test=0.918) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=6, n_estimators=6;, score=(train=0.938, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=6, n_estimators=6;, score=(train=0.929, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=6, n_estimators=6;, score=(train=0.932, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=6, n_estimators=7;, score=(train=0.939, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=6, n_estimators=7;, score=(train=0.926, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=6, n_estimators=7;, score=(train=0.922, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=6, n_estimators=7;, score=(train=0.923, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=6, n_estimators=7;, score=(train=0.932, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=6, n_estimators=8;, score=(train=0.938, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=6, n_estimators=8;, score=(train=0.927, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=6, n_estimators=8;, score=(train=0.932, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=6, n_estimators=8;, score=(train=0.926, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=6, n_estimators=8;, score=(train=0.937, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=6, n_estimators=9;, score=(train=0.937, test=0.902) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=6, n_estimators=9;, score=(train=0.927, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=6, n_estimators=9;, score=(train=0.940, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=6, n_estimators=9;, score=(train=0.924, test=0.927) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=6, n_estimators=9;, score=(train=0.940, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=7, n_estimators=1;, score=(train=0.878, test=0.833) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=7, n_estimators=1;, score=(train=0.867, test=0.859) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=7, n_estimators=1;, score=(train=0.883, test=0.902) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=7, n_estimators=1;, score=(train=0.863, test=0.880) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=7, n_estimators=1;, score=(train=0.874, test=0.876) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=7, n_estimators=2;, score=(train=0.935, test=0.902) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=7, n_estimators=2;, score=(train=0.920, test=0.922) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=7, n_estimators=2;, score=(train=0.943, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=7, n_estimators=2;, score=(train=0.919, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=7, n_estimators=2;, score=(train=0.924, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=7, n_estimators=3;, score=(train=0.936, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=7, n_estimators=3;, score=(train=0.920, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=7, n_estimators=3;, score=(train=0.927, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=7, n_estimators=3;, score=(train=0.918, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=7, n_estimators=3;, score=(train=0.905, test=0.899) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=7, n_estimators=4;, score=(train=0.935, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=7, n_estimators=4;, score=(train=0.927, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=7, n_estimators=4;, score=(train=0.936, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=7, n_estimators=4;, score=(train=0.925, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=7, n_estimators=4;, score=(train=0.929, test=0.913) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=7, n_estimators=5;, score=(train=0.937, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=7, n_estimators=5;, score=(train=0.933, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=7, n_estimators=5;, score=(train=0.942, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=7, n_estimators=5;, score=(train=0.936, test=0.934) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=7, n_estimators=5;, score=(train=0.935, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=7, n_estimators=6;, score=(train=0.947, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=7, n_estimators=6;, score=(train=0.935, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=7, n_estimators=6;, score=(train=0.943, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=7, n_estimators=6;, score=(train=0.939, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=7, n_estimators=6;, score=(train=0.925, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=7, n_estimators=7;, score=(train=0.948, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=7, n_estimators=7;, score=(train=0.945, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=7, n_estimators=7;, score=(train=0.945, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=7, n_estimators=7;, score=(train=0.935, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=7, n_estimators=7;, score=(train=0.930, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=7, n_estimators=8;, score=(train=0.950, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=7, n_estimators=8;, score=(train=0.946, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=7, n_estimators=8;, score=(train=0.943, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=7, n_estimators=8;, score=(train=0.945, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=7, n_estimators=8;, score=(train=0.937, test=0.941) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=7, n_estimators=9;, score=(train=0.951, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=7, n_estimators=9;, score=(train=0.947, test=0.953) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=7, n_estimators=9;, score=(train=0.945, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=7, n_estimators=9;, score=(train=0.948, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=7, n_estimators=9;, score=(train=0.933, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=8, n_estimators=1;, score=(train=0.885, test=0.857) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=8, n_estimators=1;, score=(train=0.882, test=0.869) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=8, n_estimators=1;, score=(train=0.876, test=0.895) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=8, n_estimators=1;, score=(train=0.883, test=0.890) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=8, n_estimators=1;, score=(train=0.884, test=0.892) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=8, n_estimators=2;, score=(train=0.932, test=0.897) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=8, n_estimators=2;, score=(train=0.935, test=0.927) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=8, n_estimators=2;, score=(train=0.930, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=8, n_estimators=2;, score=(train=0.932, test=0.927) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=8, n_estimators=2;, score=(train=0.950, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=8, n_estimators=3;, score=(train=0.939, test=0.899) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=8, n_estimators=3;, score=(train=0.926, test=0.915) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=8, n_estimators=3;, score=(train=0.929, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=8, n_estimators=3;, score=(train=0.925, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=8, n_estimators=3;, score=(train=0.924, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=8, n_estimators=4;, score=(train=0.937, test=0.894) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=8, n_estimators=4;, score=(train=0.945, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=8, n_estimators=4;, score=(train=0.942, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=8, n_estimators=4;, score=(train=0.939, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=8, n_estimators=4;, score=(train=0.947, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=8, n_estimators=5;, score=(train=0.945, test=0.913) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=8, n_estimators=5;, score=(train=0.943, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=8, n_estimators=5;, score=(train=0.946, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=8, n_estimators=5;, score=(train=0.949, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=8, n_estimators=5;, score=(train=0.947, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=8, n_estimators=6;, score=(train=0.949, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=8, n_estimators=6;, score=(train=0.952, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=8, n_estimators=6;, score=(train=0.949, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=8, n_estimators=6;, score=(train=0.952, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=8, n_estimators=6;, score=(train=0.952, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=8, n_estimators=7;, score=(train=0.952, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=8, n_estimators=7;, score=(train=0.952, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=8, n_estimators=7;, score=(train=0.949, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=8, n_estimators=7;, score=(train=0.956, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=8, n_estimators=7;, score=(train=0.956, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=8, n_estimators=8;, score=(train=0.952, test=0.939) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=8, n_estimators=8;, score=(train=0.954, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=8, n_estimators=8;, score=(train=0.949, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=8, n_estimators=8;, score=(train=0.955, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=8, n_estimators=8;, score=(train=0.952, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=8, n_estimators=9;, score=(train=0.956, test=0.936) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=8, n_estimators=9;, score=(train=0.955, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=8, n_estimators=9;, score=(train=0.947, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=8, n_estimators=9;, score=(train=0.955, test=0.949) total time=   0.1s\n","[CV 5/5] END criterion=log_loss, max_depth=8, n_estimators=9;, score=(train=0.954, test=0.953) total time=   0.1s\n","[CV 1/5] END criterion=log_loss, max_depth=9, n_estimators=1;, score=(train=0.915, test=0.866) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=9, n_estimators=1;, score=(train=0.898, test=0.895) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=9, n_estimators=1;, score=(train=0.895, test=0.923) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=9, n_estimators=1;, score=(train=0.915, test=0.909) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=9, n_estimators=1;, score=(train=0.896, test=0.869) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=9, n_estimators=2;, score=(train=0.944, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=9, n_estimators=2;, score=(train=0.931, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=9, n_estimators=2;, score=(train=0.934, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=9, n_estimators=2;, score=(train=0.933, test=0.908) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=9, n_estimators=2;, score=(train=0.942, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=9, n_estimators=3;, score=(train=0.953, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=9, n_estimators=3;, score=(train=0.933, test=0.930) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=9, n_estimators=3;, score=(train=0.939, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=9, n_estimators=3;, score=(train=0.928, test=0.913) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=9, n_estimators=3;, score=(train=0.942, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=9, n_estimators=4;, score=(train=0.958, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=9, n_estimators=4;, score=(train=0.946, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=9, n_estimators=4;, score=(train=0.945, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=9, n_estimators=4;, score=(train=0.947, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=9, n_estimators=4;, score=(train=0.950, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=9, n_estimators=5;, score=(train=0.955, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=9, n_estimators=5;, score=(train=0.952, test=0.953) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=9, n_estimators=5;, score=(train=0.947, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=9, n_estimators=5;, score=(train=0.955, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=9, n_estimators=5;, score=(train=0.954, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=9, n_estimators=6;, score=(train=0.958, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=9, n_estimators=6;, score=(train=0.955, test=0.953) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=9, n_estimators=6;, score=(train=0.952, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=9, n_estimators=6;, score=(train=0.955, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=9, n_estimators=6;, score=(train=0.956, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=9, n_estimators=7;, score=(train=0.956, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=9, n_estimators=7;, score=(train=0.949, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=9, n_estimators=7;, score=(train=0.955, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=9, n_estimators=7;, score=(train=0.959, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=9, n_estimators=7;, score=(train=0.956, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=9, n_estimators=8;, score=(train=0.958, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=9, n_estimators=8;, score=(train=0.954, test=0.951) total time=   0.1s\n","[CV 3/5] END criterion=log_loss, max_depth=9, n_estimators=8;, score=(train=0.954, test=0.965) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=9, n_estimators=8;, score=(train=0.956, test=0.944) total time=   0.1s\n","[CV 5/5] END criterion=log_loss, max_depth=9, n_estimators=8;, score=(train=0.953, test=0.946) total time=   0.1s\n","[CV 1/5] END criterion=log_loss, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.965) total time=   0.1s\n","[CV 4/5] END criterion=log_loss, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.948) total time=   0.1s\n","[CV 5/5] END criterion=log_loss, max_depth=9, n_estimators=9;, score=(train=0.956, test=0.955) total time=   0.1s\n","[CV 1/5] END criterion=log_loss, max_depth=10, n_estimators=1;, score=(train=0.919, test=0.857) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=10, n_estimators=1;, score=(train=0.927, test=0.920) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=10, n_estimators=1;, score=(train=0.913, test=0.918) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=10, n_estimators=1;, score=(train=0.908, test=0.895) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=10, n_estimators=1;, score=(train=0.929, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=10, n_estimators=2;, score=(train=0.937, test=0.869) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=10, n_estimators=2;, score=(train=0.941, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=10, n_estimators=2;, score=(train=0.932, test=0.927) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=10, n_estimators=2;, score=(train=0.935, test=0.908) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=10, n_estimators=2;, score=(train=0.942, test=0.925) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=10, n_estimators=3;, score=(train=0.949, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=10, n_estimators=3;, score=(train=0.945, test=0.937) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=10, n_estimators=3;, score=(train=0.941, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=10, n_estimators=3;, score=(train=0.946, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=10, n_estimators=3;, score=(train=0.951, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=10, n_estimators=4;, score=(train=0.952, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=10, n_estimators=4;, score=(train=0.952, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=10, n_estimators=4;, score=(train=0.949, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=10, n_estimators=4;, score=(train=0.956, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=10, n_estimators=4;, score=(train=0.951, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=10, n_estimators=5;, score=(train=0.952, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=10, n_estimators=5;, score=(train=0.953, test=0.944) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=10, n_estimators=5;, score=(train=0.955, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=10, n_estimators=5;, score=(train=0.956, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=10, n_estimators=5;, score=(train=0.955, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=10, n_estimators=6;, score=(train=0.959, test=0.932) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=10, n_estimators=6;, score=(train=0.957, test=0.955) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=10, n_estimators=6;, score=(train=0.958, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=10, n_estimators=6;, score=(train=0.958, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=10, n_estimators=6;, score=(train=0.959, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=10, n_estimators=7;, score=(train=0.958, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=10, n_estimators=7;, score=(train=0.957, test=0.955) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=10, n_estimators=7;, score=(train=0.957, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=10, n_estimators=7;, score=(train=0.959, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=10, n_estimators=7;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=10, n_estimators=8;, score=(train=0.961, test=0.943) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=10, n_estimators=8;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=10, n_estimators=8;, score=(train=0.958, test=0.969) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=10, n_estimators=8;, score=(train=0.958, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=10, n_estimators=8;, score=(train=0.959, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=10, n_estimators=9;, score=(train=0.961, test=0.939) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=10, n_estimators=9;, score=(train=0.957, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=10, n_estimators=9;, score=(train=0.958, test=0.969) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=10, n_estimators=9;, score=(train=0.958, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=10, n_estimators=9;, score=(train=0.959, test=0.958) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=11, n_estimators=1;, score=(train=0.937, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=11, n_estimators=1;, score=(train=0.937, test=0.915) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=11, n_estimators=1;, score=(train=0.930, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=11, n_estimators=1;, score=(train=0.931, test=0.913) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=11, n_estimators=1;, score=(train=0.937, test=0.913) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=11, n_estimators=2;, score=(train=0.947, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=11, n_estimators=2;, score=(train=0.946, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=11, n_estimators=2;, score=(train=0.942, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=11, n_estimators=2;, score=(train=0.940, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=11, n_estimators=2;, score=(train=0.941, test=0.899) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=11, n_estimators=3;, score=(train=0.961, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=11, n_estimators=3;, score=(train=0.953, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=11, n_estimators=3;, score=(train=0.951, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=11, n_estimators=3;, score=(train=0.946, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=11, n_estimators=3;, score=(train=0.958, test=0.925) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=11, n_estimators=4;, score=(train=0.962, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=11, n_estimators=4;, score=(train=0.959, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=11, n_estimators=4;, score=(train=0.955, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=11, n_estimators=4;, score=(train=0.959, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=11, n_estimators=4;, score=(train=0.959, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=11, n_estimators=5;, score=(train=0.962, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=11, n_estimators=5;, score=(train=0.957, test=0.955) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=11, n_estimators=5;, score=(train=0.957, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=11, n_estimators=5;, score=(train=0.959, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=11, n_estimators=5;, score=(train=0.961, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=11, n_estimators=6;, score=(train=0.964, test=0.943) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=11, n_estimators=6;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=11, n_estimators=6;, score=(train=0.959, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=11, n_estimators=6;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=11, n_estimators=6;, score=(train=0.962, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=11, n_estimators=7;, score=(train=0.964, test=0.944) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=11, n_estimators=7;, score=(train=0.961, test=0.958) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=11, n_estimators=7;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=11, n_estimators=7;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=11, n_estimators=7;, score=(train=0.960, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=11, n_estimators=8;, score=(train=0.964, test=0.944) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=11, n_estimators=8;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=11, n_estimators=8;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=11, n_estimators=8;, score=(train=0.964, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=11, n_estimators=8;, score=(train=0.961, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=11, n_estimators=9;, score=(train=0.964, test=0.946) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=11, n_estimators=9;, score=(train=0.959, test=0.953) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=11, n_estimators=9;, score=(train=0.960, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=11, n_estimators=9;, score=(train=0.964, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=11, n_estimators=9;, score=(train=0.963, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=12, n_estimators=1;, score=(train=0.932, test=0.871) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=12, n_estimators=1;, score=(train=0.932, test=0.885) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=12, n_estimators=1;, score=(train=0.932, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=12, n_estimators=1;, score=(train=0.937, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=12, n_estimators=1;, score=(train=0.941, test=0.927) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=12, n_estimators=2;, score=(train=0.950, test=0.878) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=12, n_estimators=2;, score=(train=0.947, test=0.897) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=12, n_estimators=2;, score=(train=0.935, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=12, n_estimators=2;, score=(train=0.940, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=12, n_estimators=2;, score=(train=0.947, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=12, n_estimators=3;, score=(train=0.960, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=12, n_estimators=3;, score=(train=0.955, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=12, n_estimators=3;, score=(train=0.957, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=12, n_estimators=3;, score=(train=0.956, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=12, n_estimators=3;, score=(train=0.961, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=12, n_estimators=4;, score=(train=0.966, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=12, n_estimators=4;, score=(train=0.959, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=12, n_estimators=4;, score=(train=0.957, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=12, n_estimators=4;, score=(train=0.962, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=12, n_estimators=4;, score=(train=0.961, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=12, n_estimators=5;, score=(train=0.966, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=12, n_estimators=5;, score=(train=0.959, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=12, n_estimators=5;, score=(train=0.961, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=12, n_estimators=5;, score=(train=0.966, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=12, n_estimators=5;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=12, n_estimators=6;, score=(train=0.969, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=12, n_estimators=6;, score=(train=0.963, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=12, n_estimators=6;, score=(train=0.963, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=12, n_estimators=6;, score=(train=0.966, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=12, n_estimators=6;, score=(train=0.963, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=12, n_estimators=7;, score=(train=0.969, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=12, n_estimators=7;, score=(train=0.964, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=12, n_estimators=7;, score=(train=0.961, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=12, n_estimators=7;, score=(train=0.967, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=12, n_estimators=7;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=12, n_estimators=8;, score=(train=0.969, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=12, n_estimators=8;, score=(train=0.965, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=12, n_estimators=8;, score=(train=0.961, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=12, n_estimators=8;, score=(train=0.966, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=12, n_estimators=8;, score=(train=0.963, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=12, n_estimators=9;, score=(train=0.969, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=12, n_estimators=9;, score=(train=0.966, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=12, n_estimators=9;, score=(train=0.961, test=0.963) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=12, n_estimators=9;, score=(train=0.966, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=12, n_estimators=9;, score=(train=0.964, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=13, n_estimators=1;, score=(train=0.940, test=0.899) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=13, n_estimators=1;, score=(train=0.939, test=0.895) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=13, n_estimators=1;, score=(train=0.942, test=0.937) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=13, n_estimators=1;, score=(train=0.942, test=0.895) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=13, n_estimators=1;, score=(train=0.938, test=0.927) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=13, n_estimators=2;, score=(train=0.943, test=0.899) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=13, n_estimators=2;, score=(train=0.945, test=0.901) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=13, n_estimators=2;, score=(train=0.946, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=13, n_estimators=2;, score=(train=0.940, test=0.901) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=13, n_estimators=2;, score=(train=0.942, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=13, n_estimators=3;, score=(train=0.962, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=13, n_estimators=3;, score=(train=0.964, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=13, n_estimators=3;, score=(train=0.962, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=13, n_estimators=3;, score=(train=0.961, test=0.927) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=13, n_estimators=3;, score=(train=0.963, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=13, n_estimators=4;, score=(train=0.963, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=13, n_estimators=4;, score=(train=0.964, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=13, n_estimators=4;, score=(train=0.959, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=13, n_estimators=4;, score=(train=0.959, test=0.927) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=13, n_estimators=4;, score=(train=0.960, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=13, n_estimators=5;, score=(train=0.968, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=13, n_estimators=5;, score=(train=0.968, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=13, n_estimators=5;, score=(train=0.964, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=13, n_estimators=5;, score=(train=0.966, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=13, n_estimators=5;, score=(train=0.966, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=13, n_estimators=6;, score=(train=0.969, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=13, n_estimators=6;, score=(train=0.966, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=13, n_estimators=6;, score=(train=0.964, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=13, n_estimators=6;, score=(train=0.967, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=13, n_estimators=6;, score=(train=0.966, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=13, n_estimators=7;, score=(train=0.968, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=13, n_estimators=7;, score=(train=0.968, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=13, n_estimators=7;, score=(train=0.965, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=13, n_estimators=7;, score=(train=0.969, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=13, n_estimators=7;, score=(train=0.966, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=13, n_estimators=8;, score=(train=0.969, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=13, n_estimators=8;, score=(train=0.970, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=13, n_estimators=8;, score=(train=0.965, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=13, n_estimators=8;, score=(train=0.968, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=13, n_estimators=8;, score=(train=0.967, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=13, n_estimators=9;, score=(train=0.970, test=0.936) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=13, n_estimators=9;, score=(train=0.970, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=13, n_estimators=9;, score=(train=0.966, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=13, n_estimators=9;, score=(train=0.969, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=13, n_estimators=9;, score=(train=0.967, test=0.949) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=14, n_estimators=1;, score=(train=0.944, test=0.869) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=14, n_estimators=1;, score=(train=0.944, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=14, n_estimators=1;, score=(train=0.940, test=0.927) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=14, n_estimators=1;, score=(train=0.950, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=14, n_estimators=1;, score=(train=0.949, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=14, n_estimators=2;, score=(train=0.947, test=0.864) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=14, n_estimators=2;, score=(train=0.946, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=14, n_estimators=2;, score=(train=0.939, test=0.911) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=14, n_estimators=2;, score=(train=0.950, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=14, n_estimators=2;, score=(train=0.951, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=14, n_estimators=3;, score=(train=0.967, test=0.911) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=14, n_estimators=3;, score=(train=0.963, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=14, n_estimators=3;, score=(train=0.960, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=14, n_estimators=3;, score=(train=0.963, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=14, n_estimators=3;, score=(train=0.965, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=14, n_estimators=4;, score=(train=0.966, test=0.906) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=14, n_estimators=4;, score=(train=0.963, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=14, n_estimators=4;, score=(train=0.959, test=0.937) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=14, n_estimators=4;, score=(train=0.965, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=14, n_estimators=4;, score=(train=0.962, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=14, n_estimators=5;, score=(train=0.972, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=14, n_estimators=5;, score=(train=0.968, test=0.932) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=14, n_estimators=5;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=14, n_estimators=5;, score=(train=0.970, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=14, n_estimators=5;, score=(train=0.968, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=14, n_estimators=6;, score=(train=0.969, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=14, n_estimators=6;, score=(train=0.969, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=14, n_estimators=6;, score=(train=0.963, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=14, n_estimators=6;, score=(train=0.969, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=14, n_estimators=6;, score=(train=0.968, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=14, n_estimators=7;, score=(train=0.972, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=14, n_estimators=7;, score=(train=0.971, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=14, n_estimators=7;, score=(train=0.965, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=14, n_estimators=7;, score=(train=0.971, test=0.951) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=14, n_estimators=7;, score=(train=0.971, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=14, n_estimators=8;, score=(train=0.973, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=14, n_estimators=8;, score=(train=0.972, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=14, n_estimators=8;, score=(train=0.964, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=14, n_estimators=8;, score=(train=0.970, test=0.949) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=14, n_estimators=8;, score=(train=0.970, test=0.953) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=14, n_estimators=9;, score=(train=0.972, test=0.936) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=14, n_estimators=9;, score=(train=0.971, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=14, n_estimators=9;, score=(train=0.966, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=14, n_estimators=9;, score=(train=0.970, test=0.951) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=14, n_estimators=9;, score=(train=0.970, test=0.948) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=15, n_estimators=1;, score=(train=0.952, test=0.909) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=15, n_estimators=1;, score=(train=0.949, test=0.904) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=15, n_estimators=1;, score=(train=0.946, test=0.913) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=15, n_estimators=1;, score=(train=0.942, test=0.880) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=15, n_estimators=1;, score=(train=0.947, test=0.908) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=15, n_estimators=2;, score=(train=0.952, test=0.913) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=15, n_estimators=2;, score=(train=0.944, test=0.913) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=15, n_estimators=2;, score=(train=0.937, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=15, n_estimators=2;, score=(train=0.942, test=0.897) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=15, n_estimators=2;, score=(train=0.949, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=15, n_estimators=3;, score=(train=0.971, test=0.911) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=15, n_estimators=3;, score=(train=0.966, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=15, n_estimators=3;, score=(train=0.962, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=15, n_estimators=3;, score=(train=0.969, test=0.923) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=15, n_estimators=3;, score=(train=0.968, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=15, n_estimators=4;, score=(train=0.969, test=0.929) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=15, n_estimators=4;, score=(train=0.961, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=15, n_estimators=4;, score=(train=0.963, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=15, n_estimators=4;, score=(train=0.964, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=15, n_estimators=4;, score=(train=0.965, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=15, n_estimators=5;, score=(train=0.973, test=0.927) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=15, n_estimators=5;, score=(train=0.969, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=15, n_estimators=5;, score=(train=0.967, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=15, n_estimators=5;, score=(train=0.972, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=15, n_estimators=5;, score=(train=0.969, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=15, n_estimators=6;, score=(train=0.971, test=0.932) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=15, n_estimators=6;, score=(train=0.967, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=15, n_estimators=6;, score=(train=0.967, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=15, n_estimators=6;, score=(train=0.970, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=15, n_estimators=6;, score=(train=0.970, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=15, n_estimators=7;, score=(train=0.972, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=15, n_estimators=7;, score=(train=0.972, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=15, n_estimators=7;, score=(train=0.969, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=15, n_estimators=7;, score=(train=0.972, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=15, n_estimators=7;, score=(train=0.970, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=15, n_estimators=8;, score=(train=0.972, test=0.936) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=15, n_estimators=8;, score=(train=0.973, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=15, n_estimators=8;, score=(train=0.968, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=15, n_estimators=8;, score=(train=0.970, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=15, n_estimators=8;, score=(train=0.969, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=15, n_estimators=9;, score=(train=0.973, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=15, n_estimators=9;, score=(train=0.974, test=0.949) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=15, n_estimators=9;, score=(train=0.970, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=15, n_estimators=9;, score=(train=0.972, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=15, n_estimators=9;, score=(train=0.972, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=16, n_estimators=1;, score=(train=0.954, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=16, n_estimators=1;, score=(train=0.943, test=0.890) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=16, n_estimators=1;, score=(train=0.935, test=0.895) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=16, n_estimators=1;, score=(train=0.942, test=0.894) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=16, n_estimators=1;, score=(train=0.947, test=0.909) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=16, n_estimators=2;, score=(train=0.947, test=0.887) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=16, n_estimators=2;, score=(train=0.949, test=0.894) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=16, n_estimators=2;, score=(train=0.939, test=0.906) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=16, n_estimators=2;, score=(train=0.941, test=0.899) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=16, n_estimators=2;, score=(train=0.949, test=0.892) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=16, n_estimators=3;, score=(train=0.970, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=16, n_estimators=3;, score=(train=0.969, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=16, n_estimators=3;, score=(train=0.964, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=16, n_estimators=3;, score=(train=0.969, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=16, n_estimators=3;, score=(train=0.966, test=0.925) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=16, n_estimators=4;, score=(train=0.968, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=16, n_estimators=4;, score=(train=0.966, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=16, n_estimators=4;, score=(train=0.962, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=16, n_estimators=4;, score=(train=0.967, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=16, n_estimators=4;, score=(train=0.965, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=16, n_estimators=5;, score=(train=0.973, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=16, n_estimators=5;, score=(train=0.973, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=16, n_estimators=5;, score=(train=0.969, test=0.955) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=16, n_estimators=5;, score=(train=0.973, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=16, n_estimators=5;, score=(train=0.971, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=16, n_estimators=6;, score=(train=0.972, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=16, n_estimators=6;, score=(train=0.973, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=16, n_estimators=6;, score=(train=0.968, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=16, n_estimators=6;, score=(train=0.972, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=16, n_estimators=6;, score=(train=0.969, test=0.932) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=16, n_estimators=7;, score=(train=0.975, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=16, n_estimators=7;, score=(train=0.973, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=16, n_estimators=7;, score=(train=0.969, test=0.956) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=16, n_estimators=7;, score=(train=0.973, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=16, n_estimators=7;, score=(train=0.973, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=16, n_estimators=8;, score=(train=0.973, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=16, n_estimators=8;, score=(train=0.973, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=16, n_estimators=8;, score=(train=0.969, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=16, n_estimators=8;, score=(train=0.974, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=16, n_estimators=8;, score=(train=0.973, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=16, n_estimators=9;, score=(train=0.976, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=16, n_estimators=9;, score=(train=0.975, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=16, n_estimators=9;, score=(train=0.971, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=16, n_estimators=9;, score=(train=0.975, test=0.939) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=16, n_estimators=9;, score=(train=0.974, test=0.941) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=17, n_estimators=1;, score=(train=0.952, test=0.869) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=17, n_estimators=1;, score=(train=0.945, test=0.909) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=17, n_estimators=1;, score=(train=0.944, test=0.908) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=17, n_estimators=1;, score=(train=0.949, test=0.888) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=17, n_estimators=1;, score=(train=0.949, test=0.890) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=17, n_estimators=2;, score=(train=0.951, test=0.864) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=17, n_estimators=2;, score=(train=0.948, test=0.892) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=17, n_estimators=2;, score=(train=0.946, test=0.902) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=17, n_estimators=2;, score=(train=0.950, test=0.906) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=17, n_estimators=2;, score=(train=0.945, test=0.878) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=17, n_estimators=3;, score=(train=0.970, test=0.892) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=17, n_estimators=3;, score=(train=0.969, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=17, n_estimators=3;, score=(train=0.966, test=0.921) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=17, n_estimators=3;, score=(train=0.971, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=17, n_estimators=3;, score=(train=0.968, test=0.918) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=17, n_estimators=4;, score=(train=0.969, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=17, n_estimators=4;, score=(train=0.967, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=17, n_estimators=4;, score=(train=0.968, test=0.934) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=17, n_estimators=4;, score=(train=0.967, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=17, n_estimators=4;, score=(train=0.966, test=0.911) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=17, n_estimators=5;, score=(train=0.975, test=0.913) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=17, n_estimators=5;, score=(train=0.974, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=17, n_estimators=5;, score=(train=0.973, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=17, n_estimators=5;, score=(train=0.971, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=17, n_estimators=5;, score=(train=0.975, test=0.925) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=17, n_estimators=6;, score=(train=0.974, test=0.902) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=17, n_estimators=6;, score=(train=0.972, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=17, n_estimators=6;, score=(train=0.972, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=17, n_estimators=6;, score=(train=0.972, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=17, n_estimators=6;, score=(train=0.973, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=17, n_estimators=7;, score=(train=0.975, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=17, n_estimators=7;, score=(train=0.973, test=0.949) total time=   0.1s\n","[CV 3/5] END criterion=log_loss, max_depth=17, n_estimators=7;, score=(train=0.972, test=0.948) total time=   0.1s\n","[CV 4/5] END criterion=log_loss, max_depth=17, n_estimators=7;, score=(train=0.973, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=17, n_estimators=7;, score=(train=0.975, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=17, n_estimators=8;, score=(train=0.976, test=0.916) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=17, n_estimators=8;, score=(train=0.973, test=0.946) total time=   0.1s\n","[CV 3/5] END criterion=log_loss, max_depth=17, n_estimators=8;, score=(train=0.971, test=0.948) total time=   0.1s\n","[CV 4/5] END criterion=log_loss, max_depth=17, n_estimators=8;, score=(train=0.972, test=0.948) total time=   0.1s\n","[CV 5/5] END criterion=log_loss, max_depth=17, n_estimators=8;, score=(train=0.975, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=17, n_estimators=9;, score=(train=0.977, test=0.922) total time=   0.1s\n","[CV 2/5] END criterion=log_loss, max_depth=17, n_estimators=9;, score=(train=0.975, test=0.948) total time=   0.1s\n","[CV 3/5] END criterion=log_loss, max_depth=17, n_estimators=9;, score=(train=0.973, test=0.949) total time=   0.1s\n","[CV 4/5] END criterion=log_loss, max_depth=17, n_estimators=9;, score=(train=0.977, test=0.941) total time=   0.1s\n","[CV 5/5] END criterion=log_loss, max_depth=17, n_estimators=9;, score=(train=0.977, test=0.935) total time=   0.1s\n","[CV 1/5] END criterion=log_loss, max_depth=18, n_estimators=1;, score=(train=0.948, test=0.864) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=18, n_estimators=1;, score=(train=0.935, test=0.871) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=18, n_estimators=1;, score=(train=0.954, test=0.911) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=18, n_estimators=1;, score=(train=0.950, test=0.887) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=18, n_estimators=1;, score=(train=0.958, test=0.880) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=18, n_estimators=2;, score=(train=0.950, test=0.855) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=18, n_estimators=2;, score=(train=0.935, test=0.882) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=18, n_estimators=2;, score=(train=0.947, test=0.899) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=18, n_estimators=2;, score=(train=0.941, test=0.878) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=18, n_estimators=2;, score=(train=0.950, test=0.869) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=18, n_estimators=3;, score=(train=0.970, test=0.892) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=18, n_estimators=3;, score=(train=0.966, test=0.927) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=18, n_estimators=3;, score=(train=0.968, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=18, n_estimators=3;, score=(train=0.970, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=18, n_estimators=3;, score=(train=0.972, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=18, n_estimators=4;, score=(train=0.967, test=0.904) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=18, n_estimators=4;, score=(train=0.965, test=0.932) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=18, n_estimators=4;, score=(train=0.969, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=18, n_estimators=4;, score=(train=0.969, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=18, n_estimators=4;, score=(train=0.967, test=0.916) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=18, n_estimators=5;, score=(train=0.977, test=0.911) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=18, n_estimators=5;, score=(train=0.972, test=0.937) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=18, n_estimators=5;, score=(train=0.972, test=0.930) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=18, n_estimators=5;, score=(train=0.975, test=0.925) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=18, n_estimators=5;, score=(train=0.976, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=18, n_estimators=6;, score=(train=0.977, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=18, n_estimators=6;, score=(train=0.969, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=18, n_estimators=6;, score=(train=0.973, test=0.932) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=18, n_estimators=6;, score=(train=0.974, test=0.921) total time=   0.1s\n","[CV 5/5] END criterion=log_loss, max_depth=18, n_estimators=6;, score=(train=0.976, test=0.925) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=18, n_estimators=7;, score=(train=0.978, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=18, n_estimators=7;, score=(train=0.973, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=18, n_estimators=7;, score=(train=0.974, test=0.935) total time=   0.1s\n","[CV 4/5] END criterion=log_loss, max_depth=18, n_estimators=7;, score=(train=0.976, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=18, n_estimators=7;, score=(train=0.978, test=0.928) total time=   0.1s\n","[CV 1/5] END criterion=log_loss, max_depth=18, n_estimators=8;, score=(train=0.977, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=18, n_estimators=8;, score=(train=0.974, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=18, n_estimators=8;, score=(train=0.973, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=18, n_estimators=8;, score=(train=0.975, test=0.932) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=18, n_estimators=8;, score=(train=0.974, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=18, n_estimators=9;, score=(train=0.980, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=18, n_estimators=9;, score=(train=0.976, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=18, n_estimators=9;, score=(train=0.975, test=0.941) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=18, n_estimators=9;, score=(train=0.978, test=0.930) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=18, n_estimators=9;, score=(train=0.979, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=19, n_estimators=1;, score=(train=0.956, test=0.880) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=19, n_estimators=1;, score=(train=0.945, test=0.883) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=19, n_estimators=1;, score=(train=0.949, test=0.892) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=19, n_estimators=1;, score=(train=0.958, test=0.918) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=19, n_estimators=1;, score=(train=0.960, test=0.887) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=19, n_estimators=2;, score=(train=0.954, test=0.866) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=19, n_estimators=2;, score=(train=0.944, test=0.892) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=19, n_estimators=2;, score=(train=0.949, test=0.906) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=19, n_estimators=2;, score=(train=0.947, test=0.901) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=19, n_estimators=2;, score=(train=0.950, test=0.874) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=19, n_estimators=3;, score=(train=0.973, test=0.894) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=19, n_estimators=3;, score=(train=0.969, test=0.918) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=19, n_estimators=3;, score=(train=0.970, test=0.930) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=19, n_estimators=3;, score=(train=0.972, test=0.921) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=19, n_estimators=3;, score=(train=0.977, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=19, n_estimators=4;, score=(train=0.971, test=0.882) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=19, n_estimators=4;, score=(train=0.968, test=0.923) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=19, n_estimators=4;, score=(train=0.969, test=0.937) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=19, n_estimators=4;, score=(train=0.970, test=0.914) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=19, n_estimators=4;, score=(train=0.972, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=19, n_estimators=5;, score=(train=0.976, test=0.894) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=19, n_estimators=5;, score=(train=0.975, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=19, n_estimators=5;, score=(train=0.973, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=19, n_estimators=5;, score=(train=0.976, test=0.934) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=19, n_estimators=5;, score=(train=0.979, test=0.927) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=19, n_estimators=6;, score=(train=0.976, test=0.894) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=19, n_estimators=6;, score=(train=0.972, test=0.937) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=19, n_estimators=6;, score=(train=0.973, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=19, n_estimators=6;, score=(train=0.975, test=0.928) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=19, n_estimators=6;, score=(train=0.978, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=19, n_estimators=7;, score=(train=0.978, test=0.911) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=19, n_estimators=7;, score=(train=0.975, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=19, n_estimators=7;, score=(train=0.974, test=0.951) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=19, n_estimators=7;, score=(train=0.976, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=19, n_estimators=7;, score=(train=0.978, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=19, n_estimators=8;, score=(train=0.977, test=0.908) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=19, n_estimators=8;, score=(train=0.975, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=19, n_estimators=8;, score=(train=0.976, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=19, n_estimators=8;, score=(train=0.977, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=19, n_estimators=8;, score=(train=0.977, test=0.930) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=19, n_estimators=9;, score=(train=0.979, test=0.906) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=19, n_estimators=9;, score=(train=0.976, test=0.948) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=19, n_estimators=9;, score=(train=0.977, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=19, n_estimators=9;, score=(train=0.979, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=19, n_estimators=9;, score=(train=0.980, test=0.930) total time=   0.0s\n"]},{"data":{"text/html":["<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n","             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log_loss&#x27;],\n","                         &#x27;max_depth&#x27;: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n","       18, 19]),\n","                         &#x27;n_estimators&#x27;: array([1, 2, 3, 4, 5, 6, 7, 8, 9])},\n","             return_train_score=True, verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n","             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log_loss&#x27;],\n","                         &#x27;max_depth&#x27;: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n","       18, 19]),\n","                         &#x27;n_estimators&#x27;: array([1, 2, 3, 4, 5, 6, 7, 8, 9])},\n","             return_train_score=True, verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"],"text/plain":["GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=42),\n","             param_grid={'criterion': ['gini', 'entropy', 'log_loss'],\n","                         'max_depth': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n","       18, 19]),\n","                         'n_estimators': array([1, 2, 3, 4, 5, 6, 7, 8, 9])},\n","             return_train_score=True, verbose=3)"]},"execution_count":45,"metadata":{},"output_type":"execute_result"}],"source":["# cv= cross validation this checks the accuracy of a model by breaking it into\n","# multiple folds and then selecting different subsets for training and testing\n","# verbose = verbosity it controls how details output we want after the process\n","# It return the train score\n","grid_search_rf=GridSearchCV(rf, param_grid, cv=5, verbose=3, return_train_score=\n","                            True)\n","\n","# after fitting grid_search_rf will contain info of hyperparameter like best hy-\n","# -perparameter and performance metrics\n","grid_search_rf.fit(X_train,y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1715742892636,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"amxtwHIQha0y","outputId":"8bfc696f-cb37-4bee-b7ab-d5509740eea4"},"outputs":[{"name":"stdout","output_type":"stream","text":["Best Parameters: {'criterion': 'gini', 'max_depth': 10, 'n_estimators': 9} with best score 0.9550103070215444\n"]}],"source":["print(f\"Best Parameters: {grid_search_rf.best_params_} with best score {grid_search_rf.best_score_}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1715742892637,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"b4p6pTP-h4i_","outputId":"97c7810a-16db-49b8-de8e-394e53dbcd2d"},"outputs":[{"name":"stdout","output_type":"stream","text":["95.85028478437754\n","\n","              precision    recall  f1-score   support\n","\n","     ALLERGY       1.00      0.96      0.98       321\n","        COLD       0.90      1.00      0.95       307\n","       COVID       0.92      0.97      0.94       298\n","         FLU       1.00      0.88      0.94       303\n","\n","    accuracy                           0.95      1229\n","   macro avg       0.96      0.95      0.95      1229\n","weighted avg       0.96      0.95      0.95      1229\n","\n"]}],"source":["# predecting\n","y_pred = grid_search_rf.predict(X_test)\n","\n","# evaluating\n","print(accuracy_score(y_test,y_pred_test)*100) #y_pred_test don't know from where it came\n","print()\n","print(classification_report(y_test,y_pred))"]},{"cell_type":"markdown","metadata":{"id":"nSyygGz8G0FU"},"source":["## Decision Tree"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5z_8D541G2Ff"},"outputs":[],"source":["from sklearn.tree import DecisionTreeClassifier\n","\n","param_grid={'max_depth':np.arange(1,20),'criterion':[\"gini\",\"entropy\",\"log_loss\"]}\n","dt=DecisionTreeClassifier(random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":4955,"status":"ok","timestamp":1715742897566,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"dwNnQ9KjHb6K","outputId":"bc3d638f-8f3f-4ffc-bffd-9f45467a8b1a"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 57 candidates, totalling 285 fits\n","[CV 1/5] END criterion=gini, max_depth=1;, score=(train=0.379, test=0.392) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=1;, score=(train=0.383, test=0.375) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=1;, score=(train=0.384, test=0.372) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=1;, score=(train=0.379, test=0.391) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=1;, score=(train=0.382, test=0.377) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=2;, score=(train=0.518, test=0.517) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=2;, score=(train=0.519, test=0.514) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=2;, score=(train=0.517, test=0.503) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=2;, score=(train=0.517, test=0.503) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=2;, score=(train=0.521, test=0.504) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=3;, score=(train=0.651, test=0.625) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=3;, score=(train=0.648, test=0.643) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=3;, score=(train=0.646, test=0.639) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=3;, score=(train=0.650, test=0.632) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=3;, score=(train=0.650, test=0.634) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=4;, score=(train=0.782, test=0.739) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=4;, score=(train=0.777, test=0.760) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=4;, score=(train=0.770, test=0.792) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=4;, score=(train=0.776, test=0.763) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=4;, score=(train=0.777, test=0.759) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=5;, score=(train=0.840, test=0.815) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=5;, score=(train=0.837, test=0.815) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=5;, score=(train=0.829, test=0.846) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=5;, score=(train=0.832, test=0.810) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=5;, score=(train=0.836, test=0.827) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=6;, score=(train=0.900, test=0.862) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=6;, score=(train=0.892, test=0.894) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=6;, score=(train=0.888, test=0.901) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=6;, score=(train=0.889, test=0.864) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=6;, score=(train=0.894, test=0.888) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=7;, score=(train=0.921, test=0.890) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=7;, score=(train=0.917, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=7;, score=(train=0.912, test=0.927) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=7;, score=(train=0.913, test=0.894) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=7;, score=(train=0.916, test=0.904) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=8;, score=(train=0.939, test=0.922) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=8;, score=(train=0.939, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=8;, score=(train=0.935, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=8;, score=(train=0.936, test=0.934) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=8;, score=(train=0.939, test=0.934) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=9;, score=(train=0.949, test=0.934) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=9;, score=(train=0.949, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=9;, score=(train=0.945, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=9;, score=(train=0.949, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=9;, score=(train=0.948, test=0.953) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=10;, score=(train=0.961, test=0.949) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=10;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=10;, score=(train=0.955, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=10;, score=(train=0.959, test=0.955) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=10;, score=(train=0.958, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=11;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=11;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=11;, score=(train=0.956, test=0.970) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=11;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=11;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=12;, score=(train=0.963, test=0.944) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=12;, score=(train=0.961, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=12;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=12;, score=(train=0.962, test=0.953) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=12;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=13;, score=(train=0.966, test=0.944) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=13;, score=(train=0.964, test=0.943) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=13;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=13;, score=(train=0.966, test=0.948) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=13;, score=(train=0.964, test=0.946) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=14;, score=(train=0.970, test=0.923) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=14;, score=(train=0.969, test=0.939) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=14;, score=(train=0.964, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=14;, score=(train=0.969, test=0.944) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=14;, score=(train=0.968, test=0.944) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=15;, score=(train=0.972, test=0.927) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=15;, score=(train=0.972, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=15;, score=(train=0.969, test=0.939) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=15;, score=(train=0.971, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=15;, score=(train=0.970, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=16;, score=(train=0.973, test=0.918) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=16;, score=(train=0.973, test=0.927) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=16;, score=(train=0.970, test=0.948) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=16;, score=(train=0.973, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=16;, score=(train=0.972, test=0.918) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=17;, score=(train=0.975, test=0.918) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=17;, score=(train=0.973, test=0.925) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=17;, score=(train=0.970, test=0.942) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=17;, score=(train=0.974, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=17;, score=(train=0.974, test=0.923) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=18;, score=(train=0.977, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=18;, score=(train=0.974, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=18;, score=(train=0.976, test=0.935) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=18;, score=(train=0.976, test=0.906) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=18;, score=(train=0.976, test=0.908) total time=   0.0s\n","[CV 1/5] END criterion=gini, max_depth=19;, score=(train=0.979, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=gini, max_depth=19;, score=(train=0.977, test=0.916) total time=   0.0s\n","[CV 3/5] END criterion=gini, max_depth=19;, score=(train=0.977, test=0.925) total time=   0.0s\n","[CV 4/5] END criterion=gini, max_depth=19;, score=(train=0.979, test=0.902) total time=   0.0s\n","[CV 5/5] END criterion=gini, max_depth=19;, score=(train=0.980, test=0.902) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=1;, score=(train=0.392, test=0.380) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=1;, score=(train=0.389, test=0.392) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=1;, score=(train=0.386, test=0.384) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=1;, score=(train=0.391, test=0.365) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=1;, score=(train=0.392, test=0.380) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=2;, score=(train=0.525, test=0.488) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=2;, score=(train=0.519, test=0.521) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=2;, score=(train=0.582, test=0.565) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=2;, score=(train=0.524, test=0.494) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=2;, score=(train=0.521, test=0.510) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=3;, score=(train=0.720, test=0.686) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=3;, score=(train=0.717, test=0.709) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=3;, score=(train=0.679, test=0.684) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=3;, score=(train=0.716, test=0.705) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=3;, score=(train=0.719, test=0.695) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=4;, score=(train=0.778, test=0.763) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=4;, score=(train=0.777, test=0.765) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=4;, score=(train=0.757, test=0.770) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=4;, score=(train=0.772, test=0.752) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=4;, score=(train=0.778, test=0.763) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=5;, score=(train=0.870, test=0.838) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=5;, score=(train=0.863, test=0.864) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=5;, score=(train=0.852, test=0.866) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=5;, score=(train=0.859, test=0.838) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=5;, score=(train=0.864, test=0.859) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=6;, score=(train=0.908, test=0.878) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=6;, score=(train=0.903, test=0.901) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=6;, score=(train=0.895, test=0.909) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=6;, score=(train=0.883, test=0.867) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=6;, score=(train=0.903, test=0.901) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=7;, score=(train=0.922, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=7;, score=(train=0.919, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=7;, score=(train=0.915, test=0.927) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=7;, score=(train=0.923, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=7;, score=(train=0.918, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=8;, score=(train=0.941, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=8;, score=(train=0.941, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=8;, score=(train=0.937, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=8;, score=(train=0.942, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=8;, score=(train=0.939, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=9;, score=(train=0.951, test=0.932) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=9;, score=(train=0.949, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=9;, score=(train=0.945, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=9;, score=(train=0.950, test=0.951) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=9;, score=(train=0.948, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=10;, score=(train=0.961, test=0.944) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=10;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=10;, score=(train=0.955, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=10;, score=(train=0.959, test=0.955) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=10;, score=(train=0.959, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=11;, score=(train=0.963, test=0.946) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=11;, score=(train=0.961, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=11;, score=(train=0.957, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=11;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=11;, score=(train=0.960, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=12;, score=(train=0.966, test=0.937) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=12;, score=(train=0.963, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=12;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=12;, score=(train=0.966, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=12;, score=(train=0.963, test=0.941) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=13;, score=(train=0.969, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=13;, score=(train=0.968, test=0.932) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=13;, score=(train=0.963, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=13;, score=(train=0.969, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=13;, score=(train=0.967, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=14;, score=(train=0.972, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=14;, score=(train=0.971, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=14;, score=(train=0.966, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=14;, score=(train=0.970, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=14;, score=(train=0.969, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=15;, score=(train=0.972, test=0.927) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=15;, score=(train=0.972, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=15;, score=(train=0.969, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=15;, score=(train=0.973, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=15;, score=(train=0.971, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=16;, score=(train=0.973, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=16;, score=(train=0.973, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=16;, score=(train=0.970, test=0.946) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=16;, score=(train=0.973, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=16;, score=(train=0.972, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=17;, score=(train=0.974, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=17;, score=(train=0.973, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=17;, score=(train=0.970, test=0.937) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=17;, score=(train=0.974, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=17;, score=(train=0.974, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=18;, score=(train=0.976, test=0.906) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=18;, score=(train=0.975, test=0.920) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=18;, score=(train=0.975, test=0.928) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=18;, score=(train=0.976, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=18;, score=(train=0.976, test=0.920) total time=   0.0s\n","[CV 1/5] END criterion=entropy, max_depth=19;, score=(train=0.980, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=entropy, max_depth=19;, score=(train=0.976, test=0.915) total time=   0.0s\n","[CV 3/5] END criterion=entropy, max_depth=19;, score=(train=0.977, test=0.928) total time=   0.0s\n","[CV 4/5] END criterion=entropy, max_depth=19;, score=(train=0.979, test=0.913) total time=   0.0s\n","[CV 5/5] END criterion=entropy, max_depth=19;, score=(train=0.980, test=0.904) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=1;, score=(train=0.392, test=0.380) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=1;, score=(train=0.389, test=0.392) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=1;, score=(train=0.386, test=0.384) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=1;, score=(train=0.391, test=0.365) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=1;, score=(train=0.392, test=0.380) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=2;, score=(train=0.525, test=0.488) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=2;, score=(train=0.519, test=0.521) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=2;, score=(train=0.582, test=0.565) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=2;, score=(train=0.524, test=0.494) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=2;, score=(train=0.521, test=0.510) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=3;, score=(train=0.720, test=0.686) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=3;, score=(train=0.717, test=0.709) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=3;, score=(train=0.679, test=0.684) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=3;, score=(train=0.716, test=0.705) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=3;, score=(train=0.719, test=0.695) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=4;, score=(train=0.778, test=0.763) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=4;, score=(train=0.777, test=0.765) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=4;, score=(train=0.757, test=0.770) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=4;, score=(train=0.772, test=0.752) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=4;, score=(train=0.778, test=0.763) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=5;, score=(train=0.870, test=0.838) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=5;, score=(train=0.863, test=0.864) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=5;, score=(train=0.852, test=0.866) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=5;, score=(train=0.859, test=0.838) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=5;, score=(train=0.864, test=0.859) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=6;, score=(train=0.908, test=0.878) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=6;, score=(train=0.903, test=0.901) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=6;, score=(train=0.895, test=0.909) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=6;, score=(train=0.883, test=0.867) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=6;, score=(train=0.903, test=0.901) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=7;, score=(train=0.922, test=0.895) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=7;, score=(train=0.919, test=0.911) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=7;, score=(train=0.915, test=0.927) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=7;, score=(train=0.923, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=7;, score=(train=0.918, test=0.914) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=8;, score=(train=0.941, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=8;, score=(train=0.941, test=0.936) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=8;, score=(train=0.937, test=0.949) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=8;, score=(train=0.942, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=8;, score=(train=0.939, test=0.939) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=9;, score=(train=0.951, test=0.932) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=9;, score=(train=0.949, test=0.941) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=9;, score=(train=0.945, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=9;, score=(train=0.950, test=0.951) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=9;, score=(train=0.948, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=10;, score=(train=0.961, test=0.944) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=10;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=10;, score=(train=0.955, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=10;, score=(train=0.959, test=0.955) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=10;, score=(train=0.959, test=0.955) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=11;, score=(train=0.963, test=0.946) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=11;, score=(train=0.961, test=0.951) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=11;, score=(train=0.957, test=0.967) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=11;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=11;, score=(train=0.960, test=0.951) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=12;, score=(train=0.966, test=0.937) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=12;, score=(train=0.963, test=0.946) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=12;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=12;, score=(train=0.966, test=0.946) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=12;, score=(train=0.963, test=0.941) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=13;, score=(train=0.969, test=0.930) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=13;, score=(train=0.968, test=0.932) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=13;, score=(train=0.963, test=0.958) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=13;, score=(train=0.969, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=13;, score=(train=0.967, test=0.942) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=14;, score=(train=0.972, test=0.925) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=14;, score=(train=0.971, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=14;, score=(train=0.966, test=0.953) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=14;, score=(train=0.970, test=0.941) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=14;, score=(train=0.969, test=0.937) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=15;, score=(train=0.972, test=0.927) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=15;, score=(train=0.972, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=15;, score=(train=0.969, test=0.944) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=15;, score=(train=0.973, test=0.942) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=15;, score=(train=0.971, test=0.935) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=16;, score=(train=0.973, test=0.915) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=16;, score=(train=0.973, test=0.929) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=16;, score=(train=0.970, test=0.946) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=16;, score=(train=0.973, test=0.937) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=16;, score=(train=0.972, test=0.928) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=17;, score=(train=0.974, test=0.920) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=17;, score=(train=0.973, test=0.934) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=17;, score=(train=0.970, test=0.937) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=17;, score=(train=0.974, test=0.935) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=17;, score=(train=0.974, test=0.921) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=18;, score=(train=0.976, test=0.906) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=18;, score=(train=0.975, test=0.920) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=18;, score=(train=0.975, test=0.928) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=18;, score=(train=0.976, test=0.920) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=18;, score=(train=0.976, test=0.920) total time=   0.0s\n","[CV 1/5] END criterion=log_loss, max_depth=19;, score=(train=0.980, test=0.901) total time=   0.0s\n","[CV 2/5] END criterion=log_loss, max_depth=19;, score=(train=0.976, test=0.915) total time=   0.0s\n","[CV 3/5] END criterion=log_loss, max_depth=19;, score=(train=0.977, test=0.928) total time=   0.0s\n","[CV 4/5] END criterion=log_loss, max_depth=19;, score=(train=0.979, test=0.913) total time=   0.0s\n","[CV 5/5] END criterion=log_loss, max_depth=19;, score=(train=0.980, test=0.904) total time=   0.0s\n"]},{"data":{"text/html":["<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=42),\n","             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log_loss&#x27;],\n","                         &#x27;max_depth&#x27;: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n","       18, 19])},\n","             return_train_score=True, verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" ><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=42),\n","             param_grid={&#x27;criterion&#x27;: [&#x27;gini&#x27;, &#x27;entropy&#x27;, &#x27;log_loss&#x27;],\n","                         &#x27;max_depth&#x27;: array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n","       18, 19])},\n","             return_train_score=True, verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"],"text/plain":["GridSearchCV(cv=5, estimator=DecisionTreeClassifier(random_state=42),\n","             param_grid={'criterion': ['gini', 'entropy', 'log_loss'],\n","                         'max_depth': array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17,\n","       18, 19])},\n","             return_train_score=True, verbose=3)"]},"execution_count":49,"metadata":{},"output_type":"execute_result"}],"source":["grid_search_dt = GridSearchCV(dt, param_grid, cv=5, verbose=3, return_train_score=True)\n","grid_search_dt.fit(X_train,y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":41,"status":"ok","timestamp":1715742898272,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"r-MGllZzHt6V","outputId":"cb3d03e4-a21d-4d85-850c-130bd47397d6"},"outputs":[{"name":"stdout","output_type":"stream","text":["Best Parameters: {'criterion': 'gini', 'max_depth': 11} with best score 0.9588454919702526\n"]}],"source":["print(f\"Best Parameters: {grid_search_dt.best_params_} with best score {grid_search_dt.best_score_}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1715742898273,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"b5n_OyOzH8ed","outputId":"fca8bc53-9028-4e9e-c4cd-36daa8235e99"},"outputs":[{"name":"stdout","output_type":"stream","text":["95.85028478437754\n","\n","              precision    recall  f1-score   support\n","\n","     ALLERGY       1.00      0.96      0.98       321\n","        COLD       0.92      1.00      0.96       307\n","       COVID       0.92      0.97      0.94       298\n","         FLU       1.00      0.90      0.95       303\n","\n","    accuracy                           0.96      1229\n","   macro avg       0.96      0.96      0.96      1229\n","weighted avg       0.96      0.96      0.96      1229\n","\n"]}],"source":["# predicting\n","y_pred =grid_search_dt.predict(X_test)\n","\n","# evaluating\n","print(accuracy_score(y_test,y_pred_test)*100)\n","print()\n","print(classification_report(y_test,y_pred))"]},{"cell_type":"markdown","metadata":{"id":"f2e0QjWJIN8t"},"source":["## SVM"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":27,"status":"ok","timestamp":1715742898273,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"pZs6Fk6pIPvR","outputId":"dd7fbda2-4685-4958-ab75-743ac5a3de51"},"outputs":[{"data":{"text/plain":["array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ])"]},"execution_count":52,"metadata":{},"output_type":"execute_result"}],"source":["from sklearn.svm import SVC\n","\n","# array from 0.01 to 0.1 with step size 0.01\n","mrange=np.arange(0.01, 0.11, 0.01)\n","mrange"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GSOuseGNIZ9_"},"outputs":[],"source":["# C is regularization parameter. it controsl teh trade off b/w maximizing margin\n","# and minimizinf classification error\n","# kernel functions decides the decision boundaries\n","param_grid={'C': mrange, 'kernel':['linear', 'poly', 'rbf', 'sigmoid'],}\n","svc=SVC(random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":134},"executionInfo":{"elapsed":101422,"status":"ok","timestamp":1715742999673,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"c05XVzfPDHGW","outputId":"d8096c2e-69d3-4893-9177-f2ded765c523"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 40 candidates, totalling 200 fits\n"]},{"data":{"text/html":["<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=SVC(random_state=42), n_jobs=-1,\n","             param_grid={&#x27;C&#x27;: array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ]),\n","                         &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;, &#x27;sigmoid&#x27;]},\n","             return_train_score=True, verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=SVC(random_state=42), n_jobs=-1,\n","             param_grid={&#x27;C&#x27;: array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ]),\n","                         &#x27;kernel&#x27;: [&#x27;linear&#x27;, &#x27;poly&#x27;, &#x27;rbf&#x27;, &#x27;sigmoid&#x27;]},\n","             return_train_score=True, verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" ><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" ><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVC</label><div class=\"sk-toggleable__content\"><pre>SVC(random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"],"text/plain":["GridSearchCV(cv=5, estimator=SVC(random_state=42), n_jobs=-1,\n","             param_grid={'C': array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ]),\n","                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']},\n","             return_train_score=True, verbose=3)"]},"execution_count":54,"metadata":{},"output_type":"execute_result"}],"source":["grid_search_svc = GridSearchCV(svc, param_grid, cv=5, verbose=3,\n","                               return_train_score=True,n_jobs=-1)\n","grid_search_svc.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":19,"status":"ok","timestamp":1715742999674,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"R1t4bztbvOSR","outputId":"42e8afa1-21b8-4982-ee17-43b3ee3e7eef"},"outputs":[{"name":"stdout","output_type":"stream","text":["Best Parameters: {'C': 0.09, 'kernel': 'rbf'} with best score 0.9602398282771161\n"]}],"source":["print(f\"Best Parameters: {grid_search_svc.best_params_} with best score {grid_search_svc.best_score_}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":15,"status":"ok","timestamp":1715742999674,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"EF0pj7mWvdN4","outputId":"bfd8a27d-a857-4686-ca0e-d99e31e7abc7"},"outputs":[{"name":"stdout","output_type":"stream","text":["95.85028478437754\n","\n","              precision    recall  f1-score   support\n","\n","     ALLERGY       1.00      0.96      0.98       321\n","        COLD       0.92      1.00      0.96       307\n","       COVID       0.93      0.97      0.95       298\n","         FLU       1.00      0.91      0.95       303\n","\n","    accuracy                           0.96      1229\n","   macro avg       0.96      0.96      0.96      1229\n","weighted avg       0.96      0.96      0.96      1229\n","\n"]}],"source":["y_pred=grid_search_svc.predict(X_test)\n","print(accuracy_score(y_test,y_pred_test)*100)\n","print()\n","print(classification_report(y_test,y_pred))"]},{"cell_type":"markdown","metadata":{"id":"hfdDvf8Av_5K"},"source":["## Logistics Regression"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":13,"status":"ok","timestamp":1715742999674,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"zfGdsEbRwOFa","outputId":"b4bd3694-4a64-467d-8cfe-5f9e2f1dab6f"},"outputs":[{"data":{"text/plain":["array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])"]},"execution_count":57,"metadata":{},"output_type":"execute_result"}],"source":["from sklearn.linear_model import LogisticRegression\n","mrange=np.arange(0.1,1.1,0.1)\n","mrange\n","prange=np.arange(1,15,1)\n","prange"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"XjliKOjtwUkT"},"outputs":[],"source":["param_grid={'C':mrange,'class_weight':['balanced'],'penalty':['l2', 'l1', 'elasticnet'],'solver':['saga'],'multi_class':['auto'],}\n","log=LogisticRegression(random_state=42, max_iter=400)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":33389,"status":"ok","timestamp":1715743033053,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"lxcq8z1VwcRv","outputId":"c1e1d3ff-0546-4238-b4ce-d9245995e452"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 30 candidates, totalling 150 fits\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.954, test=0.937) total time=   0.0s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.954, test=0.955) total time=   0.0s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.952, test=0.963) total time=   0.0s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.954, test=0.949) total time=   0.0s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.954, test=0.951) total time=   0.0s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.954, test=0.930) total time=   0.1s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.949, test=0.956) total time=   0.1s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.946, test=0.946) total time=   0.1s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.952, test=0.949) total time=   0.0s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.950, test=0.953) total time=   0.0s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.941) total time=   0.0s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.955, test=0.969) total time=   0.0s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.951) total time=   0.1s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.955) total time=   0.0s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.946) total time=   0.1s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.1s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.956) total time=   0.1s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.960) total time=   0.1s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.941) total time=   0.1s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.969) total time=   0.0s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.953) total time=   0.0s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.951) total time=   0.2s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.972) total time=   0.2s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.956) total time=   0.2s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.960) total time=   0.2s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.944) total time=   0.1s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.969) total time=   0.1s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.953) total time=   0.0s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.956) total time=   0.1s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.2s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.972) total time=   0.2s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.956) total time=   0.3s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.960) total time=   0.3s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.948) total time=   0.1s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.969) total time=   0.1s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.953) total time=   0.1s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.956) total time=   0.1s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.3s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.4s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.972) total time=   0.3s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.956) total time=   0.4s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.960) total time=   0.4s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.949) total time=   0.1s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.969) total time=   0.1s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.953) total time=   0.1s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.958) total time=   0.1s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.5s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.9s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.972) total time=   0.8s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.956) total time=   1.0s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.960) total time=   0.9s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.949) total time=   0.1s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.970) total time=   0.1s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.955) total time=   0.1s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.958) total time=   0.1s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.6s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.6s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.972) total time=   0.6s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.956) total time=   0.6s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.960) total time=   0.6s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.1s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.970) total time=   0.1s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.955) total time=   0.1s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.958) total time=   0.1s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.6s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.8s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.972) total time=   0.7s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.956) total time=   0.8s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.960) total time=   0.7s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.1s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.970) total time=   0.1s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.955) total time=   0.1s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.958) total time=   0.1s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.8s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   1.7s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.972) total time=   1.9s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.956) total time=   1.8s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.960) total time=   1.9s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.2s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.1s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.970) total time=   0.1s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.955) total time=   0.1s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.958) total time=   0.1s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   1.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.9s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.972) total time=   0.9s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.956) total time=   0.9s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n","50 fits failed out of a total of 150.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","50 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1291, in fit\n","    fold_coefs_ = Parallel(n_jobs=self.n_jobs, verbose=self.verbose, prefer=prefer)(\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 63, in __call__\n","    return super().__call__(iterable_with_config)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1918, in __call__\n","    return output if self.return_generator else list(output)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1847, in _get_sequential_output\n","    res = func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 123, in __call__\n","    return self.function(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 521, in _logistic_regression_path\n","    alpha = (1.0 / C) * (1 - l1_ratio)\n","TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [0.95117208 0.94698542        nan 0.95500848 0.95744933        nan\n"," 0.95570656 0.96023983        nan 0.95675186 0.96023983        nan\n"," 0.95744872 0.96023983        nan 0.9581462  0.96023983        nan\n"," 0.95884428 0.96023983        nan 0.95919271 0.96023983        nan\n"," 0.95919271 0.96023983        nan 0.95919271 0.96023983        nan]\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the train scores are non-finite: [0.95361011 0.9501223         nan 0.95701089 0.95910365        nan\n"," 0.95858051 0.95971402        nan 0.95953969 0.96023735        nan\n"," 0.95971405 0.96023735        nan 0.96015009 0.96023735        nan\n"," 0.96015009 0.96023735        nan 0.96041164 0.96023735        nan\n"," 0.96041164 0.96023735        nan 0.96049886 0.96023735        nan]\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.960) total time=   0.9s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n"]},{"data":{"text/html":["<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=LogisticRegression(max_iter=400, random_state=42),\n","             param_grid={&#x27;C&#x27;: array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ]),\n","                         &#x27;class_weight&#x27;: [&#x27;balanced&#x27;], &#x27;multi_class&#x27;: [&#x27;auto&#x27;],\n","                         &#x27;penalty&#x27;: [&#x27;l2&#x27;, &#x27;l1&#x27;, &#x27;elasticnet&#x27;],\n","                         &#x27;solver&#x27;: [&#x27;saga&#x27;]},\n","             return_train_score=True, verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" ><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=LogisticRegression(max_iter=400, random_state=42),\n","             param_grid={&#x27;C&#x27;: array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ]),\n","                         &#x27;class_weight&#x27;: [&#x27;balanced&#x27;], &#x27;multi_class&#x27;: [&#x27;auto&#x27;],\n","                         &#x27;penalty&#x27;: [&#x27;l2&#x27;, &#x27;l1&#x27;, &#x27;elasticnet&#x27;],\n","                         &#x27;solver&#x27;: [&#x27;saga&#x27;]},\n","             return_train_score=True, verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" ><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=400, random_state=42)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-12\" type=\"checkbox\" ><label for=\"sk-estimator-id-12\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=400, random_state=42)</pre></div></div></div></div></div></div></div></div></div></div>"],"text/plain":["GridSearchCV(cv=5, estimator=LogisticRegression(max_iter=400, random_state=42),\n","             param_grid={'C': array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ]),\n","                         'class_weight': ['balanced'], 'multi_class': ['auto'],\n","                         'penalty': ['l2', 'l1', 'elasticnet'],\n","                         'solver': ['saga']},\n","             return_train_score=True, verbose=3)"]},"execution_count":59,"metadata":{},"output_type":"execute_result"}],"source":["grid_search_log=GridSearchCV(log, param_grid, cv=5, verbose=3, return_train_score=True)\n","grid_search_log.fit(X_train,y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1715743033053,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"O2xBgpZ2wsDc","outputId":"f44ccdbc-9c8d-4f4d-c38e-8d09337072aa"},"outputs":[{"name":"stdout","output_type":"stream","text":["Best Parameters: {'C': 0.30000000000000004, 'class_weight': 'balanced', 'multi_class': 'auto', 'penalty': 'l1', 'solver': 'saga'} with best score 0.9602398282771161\n"]}],"source":["print(f\"Best Parameters: {grid_search_log.best_params_} with best score {grid_search_log.best_score_}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1715743033053,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"VuuCUNZOw6By","outputId":"41aa3b75-e962-43c3-a1fe-67c8938d8df2"},"outputs":[{"name":"stdout","output_type":"stream","text":["95.85028478437754\n","\n","              precision    recall  f1-score   support\n","\n","     ALLERGY       1.00      0.96      0.98       321\n","        COLD       0.92      1.00      0.96       307\n","       COVID       0.93      0.97      0.95       298\n","         FLU       1.00      0.91      0.95       303\n","\n","    accuracy                           0.96      1229\n","   macro avg       0.96      0.96      0.96      1229\n","weighted avg       0.96      0.96      0.96      1229\n","\n"]}],"source":["y_pred = grid_search_log.predict(X_test)\n","print(accuracy_score(y_test,y_pred_test)*100)\n","print()\n","print(classification_report(y_test,y_pred))"]},{"cell_type":"markdown","metadata":{"id":"OrjgufSBxAUu"},"source":["## Naive Bayes"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":21,"status":"ok","timestamp":1715743033054,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"NqFLv8RRxCQj","outputId":"f9cf902e-a44f-48e3-bda5-10d089220ec5"},"outputs":[{"data":{"text/plain":["array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])"]},"execution_count":62,"metadata":{},"output_type":"execute_result"}],"source":["from sklearn.naive_bayes import CategoricalNB\n","mrange = np.arange(0.1, 1.1, 0.1)\n","mrange"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":1577,"status":"ok","timestamp":1715743034611,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"pgVYEvKbxHE-","outputId":"3549370b-02ee-48c7-bf31-784edb4cea27"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.957, test=0.972) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.957, test=0.972) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.972) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.957, test=0.972) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.957, test=0.972) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.957, test=0.972) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.972) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.957, test=0.972) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.957, test=0.972) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.957, test=0.972) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.960, test=0.960) total time=   0.0s\n"]},{"data":{"text/html":["<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=CategoricalNB(),\n","             param_grid={&#x27;alpha&#x27;: array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])},\n","             return_train_score=True, verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-13\" type=\"checkbox\" ><label for=\"sk-estimator-id-13\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=CategoricalNB(),\n","             param_grid={&#x27;alpha&#x27;: array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])},\n","             return_train_score=True, verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-14\" type=\"checkbox\" ><label for=\"sk-estimator-id-14\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: CategoricalNB</label><div class=\"sk-toggleable__content\"><pre>CategoricalNB()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-15\" type=\"checkbox\" ><label for=\"sk-estimator-id-15\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">CategoricalNB</label><div class=\"sk-toggleable__content\"><pre>CategoricalNB()</pre></div></div></div></div></div></div></div></div></div></div>"],"text/plain":["GridSearchCV(cv=5, estimator=CategoricalNB(),\n","             param_grid={'alpha': array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])},\n","             return_train_score=True, verbose=3)"]},"execution_count":63,"metadata":{},"output_type":"execute_result"}],"source":["C_nb=CategoricalNB()\n","\n","# alpha is additive smoothing parameter. smoothing is applied to prevent zero\n","# probabilities where a particular categorical value in test set was not present\n","# in training\n","param_grid={'alpha':mrange}\n","\n","grid_search_C_nb= GridSearchCV(C_nb, param_grid, cv=5, verbose=3, return_train_score=True)\n","grid_search_C_nb.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":33,"status":"ok","timestamp":1715743034612,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"bG-_unv5xlWF","outputId":"26649b99-401b-4f36-9ffa-743fd00b67b7"},"outputs":[{"name":"stdout","output_type":"stream","text":["Best Parameters: {'alpha': 0.1} with best score 0.9602398282771161\n"]}],"source":["print(f\"Best Parameters: {grid_search_C_nb.best_params_} with best score {grid_search_C_nb.best_score_}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1715743034613,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"UTKWG9x8xp8p","outputId":"dd170d67-18c3-4df5-c321-e223b41ce4d0"},"outputs":[{"name":"stdout","output_type":"stream","text":["95.85028478437754\n","\n","              precision    recall  f1-score   support\n","\n","     ALLERGY       1.00      0.96      0.98       321\n","        COLD       0.92      1.00      0.96       307\n","       COVID       0.93      0.97      0.95       298\n","         FLU       1.00      0.91      0.95       303\n","\n","    accuracy                           0.96      1229\n","   macro avg       0.96      0.96      0.96      1229\n","weighted avg       0.96      0.96      0.96      1229\n","\n"]}],"source":["y_pred = grid_search_C_nb.predict(X_test)\n","print(accuracy_score(y_test,y_pred_test)*100)\n","print()\n","print(classification_report(y_test,y_pred))"]},{"cell_type":"markdown","metadata":{"id":"GFXyZLDgxtLZ"},"source":["## KNN"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1715743034613,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"NUwAJoVbxuM8","outputId":"43cdabf0-2f59-4231-ba26-145225a72e65"},"outputs":[{"data":{"text/plain":["array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33,\n","       35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67,\n","       69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])"]},"execution_count":66,"metadata":{},"output_type":"execute_result"}],"source":["from sklearn.neighbors import KNeighborsClassifier\n","mrange = np.arange(1,100,2)\n","mrange"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":134},"executionInfo":{"elapsed":68934,"status":"ok","timestamp":1715743103520,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"U5AYgSH6xy7D","outputId":"5b5addd7-0159-4846-d0b2-bb11f6d2c2b0"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 50 candidates, totalling 250 fits\n"]},{"data":{"text/html":["<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"â–¸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"â–¾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=KNeighborsClassifier(), n_jobs=-1,\n","             param_grid={&#x27;n_neighbors&#x27;: array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33,\n","       35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67,\n","       69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])},\n","             return_train_score=True, verbose=3)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-16\" type=\"checkbox\" ><label for=\"sk-estimator-id-16\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=KNeighborsClassifier(), n_jobs=-1,\n","             param_grid={&#x27;n_neighbors&#x27;: array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33,\n","       35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67,\n","       69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])},\n","             return_train_score=True, verbose=3)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-17\" type=\"checkbox\" ><label for=\"sk-estimator-id-17\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-18\" type=\"checkbox\" ><label for=\"sk-estimator-id-18\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div></div></div></div></div></div>"],"text/plain":["GridSearchCV(cv=5, estimator=KNeighborsClassifier(), n_jobs=-1,\n","             param_grid={'n_neighbors': array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33,\n","       35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67,\n","       69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99])},\n","             return_train_score=True, verbose=3)"]},"execution_count":67,"metadata":{},"output_type":"execute_result"}],"source":["knn = KNeighborsClassifier()\n","\n","# n_neighbors is the no of neighbors to consider while making decision\n","param_grid = {'n_neighbors': mrange,}\n","\n","grid_search_knn = GridSearchCV(knn, param_grid, cv=5, verbose=3,\n","                               return_train_score=True,n_jobs=-1)\n","grid_search_knn.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1715743103521,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"sr0w-vM0x_wZ","outputId":"f5f0b931-32d1-43fd-f1dc-5b0785337483"},"outputs":[{"name":"stdout","output_type":"stream","text":["Best Parameters: {'n_neighbors': 11} with best score 0.8433983374987077\n"]}],"source":["print(f\"Best Parameters: {grid_search_knn.best_params_} with best score {grid_search_knn.best_score_}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"elapsed":30,"status":"ok","timestamp":1715743103521,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"C4-raHfvyImX","outputId":"218c44ff-6f61-420d-8ffe-5ecb7ef7f73b"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe"},"text/html":["\n","  <div id=\"df-ad314c5e-6122-46af-b7b1-14631906cf97\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean_fit_time</th>\n","      <th>std_fit_time</th>\n","      <th>mean_score_time</th>\n","      <th>std_score_time</th>\n","      <th>param_n_neighbors</th>\n","      <th>params</th>\n","      <th>split0_test_score</th>\n","      <th>split1_test_score</th>\n","      <th>split2_test_score</th>\n","      <th>split3_test_score</th>\n","      <th>...</th>\n","      <th>mean_test_score</th>\n","      <th>std_test_score</th>\n","      <th>rank_test_score</th>\n","      <th>split0_train_score</th>\n","      <th>split1_train_score</th>\n","      <th>split2_train_score</th>\n","      <th>split3_train_score</th>\n","      <th>split4_train_score</th>\n","      <th>mean_train_score</th>\n","      <th>std_train_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.014562</td>\n","      <td>0.004128</td>\n","      <td>0.082079</td>\n","      <td>0.005000</td>\n","      <td>1</td>\n","      <td>{'n_neighbors': 1}</td>\n","      <td>0.773519</td>\n","      <td>0.792683</td>\n","      <td>0.820244</td>\n","      <td>0.792321</td>\n","      <td>...</td>\n","      <td>0.791076</td>\n","      <td>0.016567</td>\n","      <td>50</td>\n","      <td>0.980811</td>\n","      <td>0.977758</td>\n","      <td>0.979076</td>\n","      <td>0.981691</td>\n","      <td>0.981691</td>\n","      <td>0.980206</td>\n","      <td>0.001552</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.010678</td>\n","      <td>0.000267</td>\n","      <td>0.086176</td>\n","      <td>0.003353</td>\n","      <td>3</td>\n","      <td>{'n_neighbors': 3}</td>\n","      <td>0.815331</td>\n","      <td>0.834495</td>\n","      <td>0.860384</td>\n","      <td>0.821990</td>\n","      <td>...</td>\n","      <td>0.828394</td>\n","      <td>0.017994</td>\n","      <td>14</td>\n","      <td>0.901875</td>\n","      <td>0.901439</td>\n","      <td>0.903662</td>\n","      <td>0.905841</td>\n","      <td>0.908893</td>\n","      <td>0.904342</td>\n","      <td>0.002754</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.011390</td>\n","      <td>0.001534</td>\n","      <td>0.092954</td>\n","      <td>0.003892</td>\n","      <td>5</td>\n","      <td>{'n_neighbors': 5}</td>\n","      <td>0.825784</td>\n","      <td>0.834495</td>\n","      <td>0.881326</td>\n","      <td>0.823735</td>\n","      <td>...</td>\n","      <td>0.840607</td>\n","      <td>0.021016</td>\n","      <td>5</td>\n","      <td>0.887484</td>\n","      <td>0.879634</td>\n","      <td>0.877942</td>\n","      <td>0.886661</td>\n","      <td>0.884917</td>\n","      <td>0.883328</td>\n","      <td>0.003835</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.010654</td>\n","      <td>0.000588</td>\n","      <td>0.099148</td>\n","      <td>0.015106</td>\n","      <td>7</td>\n","      <td>{'n_neighbors': 7}</td>\n","      <td>0.820557</td>\n","      <td>0.841463</td>\n","      <td>0.877836</td>\n","      <td>0.825480</td>\n","      <td>...</td>\n","      <td>0.840956</td>\n","      <td>0.020091</td>\n","      <td>2</td>\n","      <td>0.873528</td>\n","      <td>0.866550</td>\n","      <td>0.869660</td>\n","      <td>0.873583</td>\n","      <td>0.871840</td>\n","      <td>0.871032</td>\n","      <td>0.002659</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.015891</td>\n","      <td>0.003109</td>\n","      <td>0.136270</td>\n","      <td>0.032968</td>\n","      <td>9</td>\n","      <td>{'n_neighbors': 9}</td>\n","      <td>0.824042</td>\n","      <td>0.834495</td>\n","      <td>0.867365</td>\n","      <td>0.837696</td>\n","      <td>...</td>\n","      <td>0.840608</td>\n","      <td>0.014405</td>\n","      <td>4</td>\n","      <td>0.863498</td>\n","      <td>0.863498</td>\n","      <td>0.857890</td>\n","      <td>0.865737</td>\n","      <td>0.865737</td>\n","      <td>0.863272</td>\n","      <td>0.002871</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.018674</td>\n","      <td>0.005391</td>\n","      <td>0.129111</td>\n","      <td>0.028195</td>\n","      <td>11</td>\n","      <td>{'n_neighbors': 11}</td>\n","      <td>0.832753</td>\n","      <td>0.831010</td>\n","      <td>0.876091</td>\n","      <td>0.830716</td>\n","      <td>...</td>\n","      <td>0.843398</td>\n","      <td>0.017353</td>\n","      <td>1</td>\n","      <td>0.860009</td>\n","      <td>0.860445</td>\n","      <td>0.853095</td>\n","      <td>0.861813</td>\n","      <td>0.857018</td>\n","      <td>0.858476</td>\n","      <td>0.003113</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0.021313</td>\n","      <td>0.007243</td>\n","      <td>0.151049</td>\n","      <td>0.036981</td>\n","      <td>13</td>\n","      <td>{'n_neighbors': 13}</td>\n","      <td>0.824042</td>\n","      <td>0.832753</td>\n","      <td>0.874346</td>\n","      <td>0.839442</td>\n","      <td>...</td>\n","      <td>0.840608</td>\n","      <td>0.017562</td>\n","      <td>3</td>\n","      <td>0.857392</td>\n","      <td>0.852159</td>\n","      <td>0.846992</td>\n","      <td>0.856582</td>\n","      <td>0.852223</td>\n","      <td>0.853070</td>\n","      <td>0.003728</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0.010014</td>\n","      <td>0.000401</td>\n","      <td>0.091472</td>\n","      <td>0.003095</td>\n","      <td>15</td>\n","      <td>{'n_neighbors': 15}</td>\n","      <td>0.827526</td>\n","      <td>0.834495</td>\n","      <td>0.865620</td>\n","      <td>0.835951</td>\n","      <td>...</td>\n","      <td>0.839909</td>\n","      <td>0.013229</td>\n","      <td>6</td>\n","      <td>0.853903</td>\n","      <td>0.850414</td>\n","      <td>0.842197</td>\n","      <td>0.850915</td>\n","      <td>0.849608</td>\n","      <td>0.849408</td>\n","      <td>0.003887</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.010133</td>\n","      <td>0.000223</td>\n","      <td>0.095985</td>\n","      <td>0.004868</td>\n","      <td>17</td>\n","      <td>{'n_neighbors': 17}</td>\n","      <td>0.824042</td>\n","      <td>0.829268</td>\n","      <td>0.869110</td>\n","      <td>0.828970</td>\n","      <td>...</td>\n","      <td>0.835025</td>\n","      <td>0.017203</td>\n","      <td>7</td>\n","      <td>0.851723</td>\n","      <td>0.846925</td>\n","      <td>0.837838</td>\n","      <td>0.846992</td>\n","      <td>0.845684</td>\n","      <td>0.845832</td>\n","      <td>0.004498</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>0.012083</td>\n","      <td>0.003893</td>\n","      <td>0.097490</td>\n","      <td>0.006591</td>\n","      <td>19</td>\n","      <td>{'n_neighbors': 19}</td>\n","      <td>0.820557</td>\n","      <td>0.824042</td>\n","      <td>0.865620</td>\n","      <td>0.835951</td>\n","      <td>...</td>\n","      <td>0.833981</td>\n","      <td>0.016666</td>\n","      <td>9</td>\n","      <td>0.848234</td>\n","      <td>0.843873</td>\n","      <td>0.833915</td>\n","      <td>0.845248</td>\n","      <td>0.841761</td>\n","      <td>0.842606</td>\n","      <td>0.004827</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>0.010206</td>\n","      <td>0.000245</td>\n","      <td>0.094289</td>\n","      <td>0.001173</td>\n","      <td>21</td>\n","      <td>{'n_neighbors': 21}</td>\n","      <td>0.820557</td>\n","      <td>0.822300</td>\n","      <td>0.869110</td>\n","      <td>0.834206</td>\n","      <td>...</td>\n","      <td>0.833982</td>\n","      <td>0.018197</td>\n","      <td>8</td>\n","      <td>0.846053</td>\n","      <td>0.841256</td>\n","      <td>0.831735</td>\n","      <td>0.844377</td>\n","      <td>0.840017</td>\n","      <td>0.840688</td>\n","      <td>0.004966</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>0.010868</td>\n","      <td>0.001195</td>\n","      <td>0.096888</td>\n","      <td>0.001883</td>\n","      <td>23</td>\n","      <td>{'n_neighbors': 23}</td>\n","      <td>0.813589</td>\n","      <td>0.824042</td>\n","      <td>0.865620</td>\n","      <td>0.830716</td>\n","      <td>...</td>\n","      <td>0.832238</td>\n","      <td>0.017645</td>\n","      <td>10</td>\n","      <td>0.844309</td>\n","      <td>0.843437</td>\n","      <td>0.830427</td>\n","      <td>0.840453</td>\n","      <td>0.836530</td>\n","      <td>0.839031</td>\n","      <td>0.005091</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>0.010320</td>\n","      <td>0.000281</td>\n","      <td>0.091074</td>\n","      <td>0.004569</td>\n","      <td>25</td>\n","      <td>{'n_neighbors': 25}</td>\n","      <td>0.811847</td>\n","      <td>0.820557</td>\n","      <td>0.865620</td>\n","      <td>0.827225</td>\n","      <td>...</td>\n","      <td>0.829797</td>\n","      <td>0.018624</td>\n","      <td>11</td>\n","      <td>0.844309</td>\n","      <td>0.838639</td>\n","      <td>0.828684</td>\n","      <td>0.836530</td>\n","      <td>0.837838</td>\n","      <td>0.837200</td>\n","      <td>0.005020</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>0.010410</td>\n","      <td>0.000317</td>\n","      <td>0.095697</td>\n","      <td>0.004467</td>\n","      <td>27</td>\n","      <td>{'n_neighbors': 27}</td>\n","      <td>0.810105</td>\n","      <td>0.820557</td>\n","      <td>0.858639</td>\n","      <td>0.830716</td>\n","      <td>...</td>\n","      <td>0.828750</td>\n","      <td>0.016353</td>\n","      <td>13</td>\n","      <td>0.842128</td>\n","      <td>0.836023</td>\n","      <td>0.828684</td>\n","      <td>0.833915</td>\n","      <td>0.836094</td>\n","      <td>0.835369</td>\n","      <td>0.004323</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>0.010921</td>\n","      <td>0.000817</td>\n","      <td>0.093663</td>\n","      <td>0.003141</td>\n","      <td>29</td>\n","      <td>{'n_neighbors': 29}</td>\n","      <td>0.813589</td>\n","      <td>0.815331</td>\n","      <td>0.858639</td>\n","      <td>0.832461</td>\n","      <td>...</td>\n","      <td>0.829100</td>\n","      <td>0.016292</td>\n","      <td>12</td>\n","      <td>0.840384</td>\n","      <td>0.837767</td>\n","      <td>0.826504</td>\n","      <td>0.830427</td>\n","      <td>0.833043</td>\n","      <td>0.833625</td>\n","      <td>0.004982</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>0.013163</td>\n","      <td>0.002802</td>\n","      <td>0.112079</td>\n","      <td>0.025281</td>\n","      <td>31</td>\n","      <td>{'n_neighbors': 31}</td>\n","      <td>0.810105</td>\n","      <td>0.817073</td>\n","      <td>0.853403</td>\n","      <td>0.827225</td>\n","      <td>...</td>\n","      <td>0.825959</td>\n","      <td>0.014838</td>\n","      <td>15</td>\n","      <td>0.836895</td>\n","      <td>0.836459</td>\n","      <td>0.824760</td>\n","      <td>0.828248</td>\n","      <td>0.828248</td>\n","      <td>0.830922</td>\n","      <td>0.004870</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>0.017446</td>\n","      <td>0.004195</td>\n","      <td>0.150925</td>\n","      <td>0.033703</td>\n","      <td>33</td>\n","      <td>{'n_neighbors': 33}</td>\n","      <td>0.804878</td>\n","      <td>0.818815</td>\n","      <td>0.849913</td>\n","      <td>0.825480</td>\n","      <td>...</td>\n","      <td>0.823866</td>\n","      <td>0.014698</td>\n","      <td>18</td>\n","      <td>0.836023</td>\n","      <td>0.832098</td>\n","      <td>0.823888</td>\n","      <td>0.827376</td>\n","      <td>0.829119</td>\n","      <td>0.829701</td>\n","      <td>0.004129</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>0.020067</td>\n","      <td>0.002732</td>\n","      <td>0.168582</td>\n","      <td>0.016725</td>\n","      <td>35</td>\n","      <td>{'n_neighbors': 35}</td>\n","      <td>0.808362</td>\n","      <td>0.813589</td>\n","      <td>0.851658</td>\n","      <td>0.825480</td>\n","      <td>...</td>\n","      <td>0.824914</td>\n","      <td>0.014954</td>\n","      <td>16</td>\n","      <td>0.834278</td>\n","      <td>0.832534</td>\n","      <td>0.821273</td>\n","      <td>0.825196</td>\n","      <td>0.827812</td>\n","      <td>0.828219</td>\n","      <td>0.004752</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>0.013253</td>\n","      <td>0.003787</td>\n","      <td>0.127036</td>\n","      <td>0.043785</td>\n","      <td>37</td>\n","      <td>{'n_neighbors': 37}</td>\n","      <td>0.810105</td>\n","      <td>0.813589</td>\n","      <td>0.853403</td>\n","      <td>0.821990</td>\n","      <td>...</td>\n","      <td>0.824564</td>\n","      <td>0.015288</td>\n","      <td>17</td>\n","      <td>0.833406</td>\n","      <td>0.832534</td>\n","      <td>0.820401</td>\n","      <td>0.825196</td>\n","      <td>0.825632</td>\n","      <td>0.827434</td>\n","      <td>0.004887</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>0.010589</td>\n","      <td>0.000107</td>\n","      <td>0.092407</td>\n","      <td>0.002595</td>\n","      <td>39</td>\n","      <td>{'n_neighbors': 39}</td>\n","      <td>0.804878</td>\n","      <td>0.811847</td>\n","      <td>0.856894</td>\n","      <td>0.820244</td>\n","      <td>...</td>\n","      <td>0.823170</td>\n","      <td>0.017945</td>\n","      <td>19</td>\n","      <td>0.833842</td>\n","      <td>0.829917</td>\n","      <td>0.819093</td>\n","      <td>0.824760</td>\n","      <td>0.825632</td>\n","      <td>0.826649</td>\n","      <td>0.004982</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>0.010342</td>\n","      <td>0.000347</td>\n","      <td>0.099142</td>\n","      <td>0.005774</td>\n","      <td>41</td>\n","      <td>{'n_neighbors': 41}</td>\n","      <td>0.808362</td>\n","      <td>0.811847</td>\n","      <td>0.856894</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.823169</td>\n","      <td>0.017478</td>\n","      <td>20</td>\n","      <td>0.833842</td>\n","      <td>0.829045</td>\n","      <td>0.816914</td>\n","      <td>0.822581</td>\n","      <td>0.825196</td>\n","      <td>0.825516</td>\n","      <td>0.005736</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>0.010355</td>\n","      <td>0.000192</td>\n","      <td>0.094652</td>\n","      <td>0.003525</td>\n","      <td>43</td>\n","      <td>{'n_neighbors': 43}</td>\n","      <td>0.804878</td>\n","      <td>0.811847</td>\n","      <td>0.853403</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.821774</td>\n","      <td>0.016791</td>\n","      <td>23</td>\n","      <td>0.832534</td>\n","      <td>0.829045</td>\n","      <td>0.818657</td>\n","      <td>0.822581</td>\n","      <td>0.825632</td>\n","      <td>0.825690</td>\n","      <td>0.004842</td>\n","    </tr>\n","    <tr>\n","      <th>22</th>\n","      <td>0.010338</td>\n","      <td>0.000248</td>\n","      <td>0.100862</td>\n","      <td>0.008125</td>\n","      <td>45</td>\n","      <td>{'n_neighbors': 45}</td>\n","      <td>0.801394</td>\n","      <td>0.813589</td>\n","      <td>0.853403</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.821775</td>\n","      <td>0.017389</td>\n","      <td>22</td>\n","      <td>0.832098</td>\n","      <td>0.828609</td>\n","      <td>0.816914</td>\n","      <td>0.823452</td>\n","      <td>0.824760</td>\n","      <td>0.825167</td>\n","      <td>0.005121</td>\n","    </tr>\n","    <tr>\n","      <th>23</th>\n","      <td>0.010168</td>\n","      <td>0.000484</td>\n","      <td>0.096617</td>\n","      <td>0.003004</td>\n","      <td>47</td>\n","      <td>{'n_neighbors': 47}</td>\n","      <td>0.803136</td>\n","      <td>0.810105</td>\n","      <td>0.855148</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.821775</td>\n","      <td>0.018036</td>\n","      <td>21</td>\n","      <td>0.830789</td>\n","      <td>0.828173</td>\n","      <td>0.818657</td>\n","      <td>0.823017</td>\n","      <td>0.823452</td>\n","      <td>0.824818</td>\n","      <td>0.004242</td>\n","    </tr>\n","    <tr>\n","      <th>24</th>\n","      <td>0.011229</td>\n","      <td>0.001079</td>\n","      <td>0.092474</td>\n","      <td>0.005381</td>\n","      <td>49</td>\n","      <td>{'n_neighbors': 49}</td>\n","      <td>0.803136</td>\n","      <td>0.810105</td>\n","      <td>0.855148</td>\n","      <td>0.815009</td>\n","      <td>...</td>\n","      <td>0.820728</td>\n","      <td>0.018111</td>\n","      <td>24</td>\n","      <td>0.829917</td>\n","      <td>0.826864</td>\n","      <td>0.818657</td>\n","      <td>0.823888</td>\n","      <td>0.822581</td>\n","      <td>0.824382</td>\n","      <td>0.003823</td>\n","    </tr>\n","    <tr>\n","      <th>25</th>\n","      <td>0.010421</td>\n","      <td>0.000393</td>\n","      <td>0.093322</td>\n","      <td>0.004778</td>\n","      <td>51</td>\n","      <td>{'n_neighbors': 51}</td>\n","      <td>0.801394</td>\n","      <td>0.810105</td>\n","      <td>0.853403</td>\n","      <td>0.815009</td>\n","      <td>...</td>\n","      <td>0.820031</td>\n","      <td>0.017804</td>\n","      <td>25</td>\n","      <td>0.829917</td>\n","      <td>0.826864</td>\n","      <td>0.816914</td>\n","      <td>0.822581</td>\n","      <td>0.822581</td>\n","      <td>0.823771</td>\n","      <td>0.004409</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>0.010891</td>\n","      <td>0.000215</td>\n","      <td>0.091634</td>\n","      <td>0.003822</td>\n","      <td>53</td>\n","      <td>{'n_neighbors': 53}</td>\n","      <td>0.799652</td>\n","      <td>0.810105</td>\n","      <td>0.849913</td>\n","      <td>0.815009</td>\n","      <td>...</td>\n","      <td>0.818984</td>\n","      <td>0.016891</td>\n","      <td>28</td>\n","      <td>0.828609</td>\n","      <td>0.826428</td>\n","      <td>0.815606</td>\n","      <td>0.819965</td>\n","      <td>0.822581</td>\n","      <td>0.822638</td>\n","      <td>0.004618</td>\n","    </tr>\n","    <tr>\n","      <th>27</th>\n","      <td>0.023130</td>\n","      <td>0.004715</td>\n","      <td>0.149424</td>\n","      <td>0.031192</td>\n","      <td>55</td>\n","      <td>{'n_neighbors': 55}</td>\n","      <td>0.799652</td>\n","      <td>0.811847</td>\n","      <td>0.851658</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.819333</td>\n","      <td>0.017330</td>\n","      <td>27</td>\n","      <td>0.827300</td>\n","      <td>0.825556</td>\n","      <td>0.816478</td>\n","      <td>0.820837</td>\n","      <td>0.822581</td>\n","      <td>0.822550</td>\n","      <td>0.003779</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>0.023598</td>\n","      <td>0.007064</td>\n","      <td>0.173387</td>\n","      <td>0.028918</td>\n","      <td>57</td>\n","      <td>{'n_neighbors': 57}</td>\n","      <td>0.801394</td>\n","      <td>0.810105</td>\n","      <td>0.853403</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.819682</td>\n","      <td>0.017779</td>\n","      <td>26</td>\n","      <td>0.825992</td>\n","      <td>0.824684</td>\n","      <td>0.813426</td>\n","      <td>0.820837</td>\n","      <td>0.823017</td>\n","      <td>0.821591</td>\n","      <td>0.004432</td>\n","    </tr>\n","    <tr>\n","      <th>29</th>\n","      <td>0.017016</td>\n","      <td>0.005180</td>\n","      <td>0.155938</td>\n","      <td>0.035378</td>\n","      <td>59</td>\n","      <td>{'n_neighbors': 59}</td>\n","      <td>0.797909</td>\n","      <td>0.811847</td>\n","      <td>0.848168</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.818286</td>\n","      <td>0.016458</td>\n","      <td>31</td>\n","      <td>0.825556</td>\n","      <td>0.825120</td>\n","      <td>0.812990</td>\n","      <td>0.820401</td>\n","      <td>0.821273</td>\n","      <td>0.821068</td>\n","      <td>0.004523</td>\n","    </tr>\n","    <tr>\n","      <th>30</th>\n","      <td>0.010192</td>\n","      <td>0.000086</td>\n","      <td>0.094991</td>\n","      <td>0.003856</td>\n","      <td>61</td>\n","      <td>{'n_neighbors': 61}</td>\n","      <td>0.797909</td>\n","      <td>0.810105</td>\n","      <td>0.848168</td>\n","      <td>0.818499</td>\n","      <td>...</td>\n","      <td>0.818287</td>\n","      <td>0.016598</td>\n","      <td>29</td>\n","      <td>0.825556</td>\n","      <td>0.823812</td>\n","      <td>0.813426</td>\n","      <td>0.819965</td>\n","      <td>0.821273</td>\n","      <td>0.820806</td>\n","      <td>0.004171</td>\n","    </tr>\n","    <tr>\n","      <th>31</th>\n","      <td>0.009917</td>\n","      <td>0.000401</td>\n","      <td>0.099271</td>\n","      <td>0.008936</td>\n","      <td>63</td>\n","      <td>{'n_neighbors': 63}</td>\n","      <td>0.796167</td>\n","      <td>0.811847</td>\n","      <td>0.848168</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.817938</td>\n","      <td>0.016898</td>\n","      <td>33</td>\n","      <td>0.826428</td>\n","      <td>0.823375</td>\n","      <td>0.813426</td>\n","      <td>0.819093</td>\n","      <td>0.821273</td>\n","      <td>0.820719</td>\n","      <td>0.004377</td>\n","    </tr>\n","    <tr>\n","      <th>32</th>\n","      <td>0.010310</td>\n","      <td>0.000467</td>\n","      <td>0.094573</td>\n","      <td>0.005110</td>\n","      <td>65</td>\n","      <td>{'n_neighbors': 65}</td>\n","      <td>0.794425</td>\n","      <td>0.810105</td>\n","      <td>0.846422</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.816892</td>\n","      <td>0.016870</td>\n","      <td>36</td>\n","      <td>0.827300</td>\n","      <td>0.822939</td>\n","      <td>0.813862</td>\n","      <td>0.819529</td>\n","      <td>0.821273</td>\n","      <td>0.820981</td>\n","      <td>0.004396</td>\n","    </tr>\n","    <tr>\n","      <th>33</th>\n","      <td>0.010760</td>\n","      <td>0.000370</td>\n","      <td>0.096137</td>\n","      <td>0.004690</td>\n","      <td>67</td>\n","      <td>{'n_neighbors': 67}</td>\n","      <td>0.794425</td>\n","      <td>0.813589</td>\n","      <td>0.848168</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.818287</td>\n","      <td>0.017244</td>\n","      <td>29</td>\n","      <td>0.825992</td>\n","      <td>0.822503</td>\n","      <td>0.812554</td>\n","      <td>0.819965</td>\n","      <td>0.821709</td>\n","      <td>0.820545</td>\n","      <td>0.004451</td>\n","    </tr>\n","    <tr>\n","      <th>34</th>\n","      <td>0.010971</td>\n","      <td>0.000534</td>\n","      <td>0.097243</td>\n","      <td>0.005777</td>\n","      <td>69</td>\n","      <td>{'n_neighbors': 69}</td>\n","      <td>0.794425</td>\n","      <td>0.810105</td>\n","      <td>0.849913</td>\n","      <td>0.815009</td>\n","      <td>...</td>\n","      <td>0.817590</td>\n","      <td>0.018138</td>\n","      <td>34</td>\n","      <td>0.825992</td>\n","      <td>0.822067</td>\n","      <td>0.811683</td>\n","      <td>0.820837</td>\n","      <td>0.820837</td>\n","      <td>0.820283</td>\n","      <td>0.004698</td>\n","    </tr>\n","    <tr>\n","      <th>35</th>\n","      <td>0.010834</td>\n","      <td>0.000267</td>\n","      <td>0.099400</td>\n","      <td>0.011449</td>\n","      <td>71</td>\n","      <td>{'n_neighbors': 71}</td>\n","      <td>0.794425</td>\n","      <td>0.811847</td>\n","      <td>0.851658</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.817589</td>\n","      <td>0.018706</td>\n","      <td>35</td>\n","      <td>0.826428</td>\n","      <td>0.820759</td>\n","      <td>0.812119</td>\n","      <td>0.819529</td>\n","      <td>0.819529</td>\n","      <td>0.819673</td>\n","      <td>0.004559</td>\n","    </tr>\n","    <tr>\n","      <th>36</th>\n","      <td>0.012194</td>\n","      <td>0.002785</td>\n","      <td>0.105752</td>\n","      <td>0.021680</td>\n","      <td>73</td>\n","      <td>{'n_neighbors': 73}</td>\n","      <td>0.790941</td>\n","      <td>0.811847</td>\n","      <td>0.851658</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.817940</td>\n","      <td>0.019518</td>\n","      <td>32</td>\n","      <td>0.824684</td>\n","      <td>0.820323</td>\n","      <td>0.810811</td>\n","      <td>0.818657</td>\n","      <td>0.817786</td>\n","      <td>0.818452</td>\n","      <td>0.004499</td>\n","    </tr>\n","    <tr>\n","      <th>37</th>\n","      <td>0.010863</td>\n","      <td>0.000786</td>\n","      <td>0.095055</td>\n","      <td>0.002110</td>\n","      <td>75</td>\n","      <td>{'n_neighbors': 75}</td>\n","      <td>0.790941</td>\n","      <td>0.810105</td>\n","      <td>0.849913</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.816544</td>\n","      <td>0.019041</td>\n","      <td>38</td>\n","      <td>0.825992</td>\n","      <td>0.819887</td>\n","      <td>0.811683</td>\n","      <td>0.816914</td>\n","      <td>0.817350</td>\n","      <td>0.818365</td>\n","      <td>0.004654</td>\n","    </tr>\n","    <tr>\n","      <th>38</th>\n","      <td>0.012689</td>\n","      <td>0.003275</td>\n","      <td>0.162557</td>\n","      <td>0.035248</td>\n","      <td>77</td>\n","      <td>{'n_neighbors': 77}</td>\n","      <td>0.792683</td>\n","      <td>0.810105</td>\n","      <td>0.851658</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.816544</td>\n","      <td>0.019334</td>\n","      <td>39</td>\n","      <td>0.826428</td>\n","      <td>0.819451</td>\n","      <td>0.811247</td>\n","      <td>0.816042</td>\n","      <td>0.818657</td>\n","      <td>0.818365</td>\n","      <td>0.004947</td>\n","    </tr>\n","    <tr>\n","      <th>39</th>\n","      <td>0.017414</td>\n","      <td>0.005324</td>\n","      <td>0.170022</td>\n","      <td>0.034446</td>\n","      <td>79</td>\n","      <td>{'n_neighbors': 79}</td>\n","      <td>0.792683</td>\n","      <td>0.811847</td>\n","      <td>0.849913</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.816892</td>\n","      <td>0.018521</td>\n","      <td>37</td>\n","      <td>0.825120</td>\n","      <td>0.817706</td>\n","      <td>0.810811</td>\n","      <td>0.815170</td>\n","      <td>0.818221</td>\n","      <td>0.817406</td>\n","      <td>0.004664</td>\n","    </tr>\n","    <tr>\n","      <th>40</th>\n","      <td>0.021438</td>\n","      <td>0.005989</td>\n","      <td>0.165091</td>\n","      <td>0.033337</td>\n","      <td>81</td>\n","      <td>{'n_neighbors': 81}</td>\n","      <td>0.790941</td>\n","      <td>0.811847</td>\n","      <td>0.848168</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.816194</td>\n","      <td>0.018373</td>\n","      <td>40</td>\n","      <td>0.824248</td>\n","      <td>0.819014</td>\n","      <td>0.809939</td>\n","      <td>0.816478</td>\n","      <td>0.816914</td>\n","      <td>0.817319</td>\n","      <td>0.004609</td>\n","    </tr>\n","    <tr>\n","      <th>41</th>\n","      <td>0.010669</td>\n","      <td>0.001245</td>\n","      <td>0.098627</td>\n","      <td>0.003950</td>\n","      <td>83</td>\n","      <td>{'n_neighbors': 83}</td>\n","      <td>0.789199</td>\n","      <td>0.810105</td>\n","      <td>0.848168</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.815847</td>\n","      <td>0.018917</td>\n","      <td>41</td>\n","      <td>0.823375</td>\n","      <td>0.819451</td>\n","      <td>0.809503</td>\n","      <td>0.816478</td>\n","      <td>0.816914</td>\n","      <td>0.817144</td>\n","      <td>0.004539</td>\n","    </tr>\n","    <tr>\n","      <th>42</th>\n","      <td>0.010938</td>\n","      <td>0.000649</td>\n","      <td>0.097407</td>\n","      <td>0.005348</td>\n","      <td>85</td>\n","      <td>{'n_neighbors': 85}</td>\n","      <td>0.789199</td>\n","      <td>0.806620</td>\n","      <td>0.846422</td>\n","      <td>0.815009</td>\n","      <td>...</td>\n","      <td>0.813754</td>\n","      <td>0.018588</td>\n","      <td>46</td>\n","      <td>0.824248</td>\n","      <td>0.819887</td>\n","      <td>0.808631</td>\n","      <td>0.815170</td>\n","      <td>0.816478</td>\n","      <td>0.816883</td>\n","      <td>0.005186</td>\n","    </tr>\n","    <tr>\n","      <th>43</th>\n","      <td>0.010551</td>\n","      <td>0.000174</td>\n","      <td>0.101352</td>\n","      <td>0.011788</td>\n","      <td>87</td>\n","      <td>{'n_neighbors': 87}</td>\n","      <td>0.790941</td>\n","      <td>0.808362</td>\n","      <td>0.848168</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.815149</td>\n","      <td>0.018644</td>\n","      <td>42</td>\n","      <td>0.825556</td>\n","      <td>0.817706</td>\n","      <td>0.808631</td>\n","      <td>0.813426</td>\n","      <td>0.816478</td>\n","      <td>0.816359</td>\n","      <td>0.005563</td>\n","    </tr>\n","    <tr>\n","      <th>44</th>\n","      <td>0.011046</td>\n","      <td>0.000936</td>\n","      <td>0.099711</td>\n","      <td>0.003741</td>\n","      <td>89</td>\n","      <td>{'n_neighbors': 89}</td>\n","      <td>0.790941</td>\n","      <td>0.808362</td>\n","      <td>0.846422</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.814800</td>\n","      <td>0.018029</td>\n","      <td>45</td>\n","      <td>0.825556</td>\n","      <td>0.817706</td>\n","      <td>0.809939</td>\n","      <td>0.813862</td>\n","      <td>0.816042</td>\n","      <td>0.816621</td>\n","      <td>0.005169</td>\n","    </tr>\n","    <tr>\n","      <th>45</th>\n","      <td>0.010658</td>\n","      <td>0.000109</td>\n","      <td>0.098696</td>\n","      <td>0.003569</td>\n","      <td>91</td>\n","      <td>{'n_neighbors': 91}</td>\n","      <td>0.789199</td>\n","      <td>0.810105</td>\n","      <td>0.848168</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.815149</td>\n","      <td>0.018999</td>\n","      <td>42</td>\n","      <td>0.824684</td>\n","      <td>0.816398</td>\n","      <td>0.807759</td>\n","      <td>0.815606</td>\n","      <td>0.814298</td>\n","      <td>0.815749</td>\n","      <td>0.005408</td>\n","    </tr>\n","    <tr>\n","      <th>46</th>\n","      <td>0.010448</td>\n","      <td>0.000334</td>\n","      <td>0.096827</td>\n","      <td>0.001996</td>\n","      <td>93</td>\n","      <td>{'n_neighbors': 93}</td>\n","      <td>0.790941</td>\n","      <td>0.808362</td>\n","      <td>0.848168</td>\n","      <td>0.816754</td>\n","      <td>...</td>\n","      <td>0.815149</td>\n","      <td>0.018644</td>\n","      <td>42</td>\n","      <td>0.825120</td>\n","      <td>0.816398</td>\n","      <td>0.806888</td>\n","      <td>0.815170</td>\n","      <td>0.812990</td>\n","      <td>0.815313</td>\n","      <td>0.005895</td>\n","    </tr>\n","    <tr>\n","      <th>47</th>\n","      <td>0.011790</td>\n","      <td>0.003111</td>\n","      <td>0.095176</td>\n","      <td>0.002676</td>\n","      <td>95</td>\n","      <td>{'n_neighbors': 95}</td>\n","      <td>0.789199</td>\n","      <td>0.806620</td>\n","      <td>0.848168</td>\n","      <td>0.815009</td>\n","      <td>...</td>\n","      <td>0.813056</td>\n","      <td>0.019458</td>\n","      <td>47</td>\n","      <td>0.824684</td>\n","      <td>0.816834</td>\n","      <td>0.806452</td>\n","      <td>0.812990</td>\n","      <td>0.813862</td>\n","      <td>0.814964</td>\n","      <td>0.005925</td>\n","    </tr>\n","    <tr>\n","      <th>48</th>\n","      <td>0.010106</td>\n","      <td>0.000397</td>\n","      <td>0.100419</td>\n","      <td>0.008632</td>\n","      <td>97</td>\n","      <td>{'n_neighbors': 97}</td>\n","      <td>0.787456</td>\n","      <td>0.804878</td>\n","      <td>0.848168</td>\n","      <td>0.813264</td>\n","      <td>...</td>\n","      <td>0.812010</td>\n","      <td>0.019977</td>\n","      <td>49</td>\n","      <td>0.825120</td>\n","      <td>0.816398</td>\n","      <td>0.804708</td>\n","      <td>0.813862</td>\n","      <td>0.813862</td>\n","      <td>0.814790</td>\n","      <td>0.006522</td>\n","    </tr>\n","    <tr>\n","      <th>49</th>\n","      <td>0.016386</td>\n","      <td>0.005594</td>\n","      <td>0.155215</td>\n","      <td>0.042857</td>\n","      <td>99</td>\n","      <td>{'n_neighbors': 99}</td>\n","      <td>0.785714</td>\n","      <td>0.804878</td>\n","      <td>0.848168</td>\n","      <td>0.813264</td>\n","      <td>...</td>\n","      <td>0.812010</td>\n","      <td>0.020333</td>\n","      <td>48</td>\n","      <td>0.821631</td>\n","      <td>0.815526</td>\n","      <td>0.805144</td>\n","      <td>0.815170</td>\n","      <td>0.812119</td>\n","      <td>0.813918</td>\n","      <td>0.005364</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>50 rows Ã— 21 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ad314c5e-6122-46af-b7b1-14631906cf97')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-ad314c5e-6122-46af-b7b1-14631906cf97 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-ad314c5e-6122-46af-b7b1-14631906cf97');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a9584dec-3ae3-49f6-9cbe-fa1b320bff83\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a9584dec-3ae3-49f6-9cbe-fa1b320bff83')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a9584dec-3ae3-49f6-9cbe-fa1b320bff83 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"text/plain":["    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n","0        0.014562      0.004128         0.082079        0.005000   \n","1        0.010678      0.000267         0.086176        0.003353   \n","2        0.011390      0.001534         0.092954        0.003892   \n","3        0.010654      0.000588         0.099148        0.015106   \n","4        0.015891      0.003109         0.136270        0.032968   \n","5        0.018674      0.005391         0.129111        0.028195   \n","6        0.021313      0.007243         0.151049        0.036981   \n","7        0.010014      0.000401         0.091472        0.003095   \n","8        0.010133      0.000223         0.095985        0.004868   \n","9        0.012083      0.003893         0.097490        0.006591   \n","10       0.010206      0.000245         0.094289        0.001173   \n","11       0.010868      0.001195         0.096888        0.001883   \n","12       0.010320      0.000281         0.091074        0.004569   \n","13       0.010410      0.000317         0.095697        0.004467   \n","14       0.010921      0.000817         0.093663        0.003141   \n","15       0.013163      0.002802         0.112079        0.025281   \n","16       0.017446      0.004195         0.150925        0.033703   \n","17       0.020067      0.002732         0.168582        0.016725   \n","18       0.013253      0.003787         0.127036        0.043785   \n","19       0.010589      0.000107         0.092407        0.002595   \n","20       0.010342      0.000347         0.099142        0.005774   \n","21       0.010355      0.000192         0.094652        0.003525   \n","22       0.010338      0.000248         0.100862        0.008125   \n","23       0.010168      0.000484         0.096617        0.003004   \n","24       0.011229      0.001079         0.092474        0.005381   \n","25       0.010421      0.000393         0.093322        0.004778   \n","26       0.010891      0.000215         0.091634        0.003822   \n","27       0.023130      0.004715         0.149424        0.031192   \n","28       0.023598      0.007064         0.173387        0.028918   \n","29       0.017016      0.005180         0.155938        0.035378   \n","30       0.010192      0.000086         0.094991        0.003856   \n","31       0.009917      0.000401         0.099271        0.008936   \n","32       0.010310      0.000467         0.094573        0.005110   \n","33       0.010760      0.000370         0.096137        0.004690   \n","34       0.010971      0.000534         0.097243        0.005777   \n","35       0.010834      0.000267         0.099400        0.011449   \n","36       0.012194      0.002785         0.105752        0.021680   \n","37       0.010863      0.000786         0.095055        0.002110   \n","38       0.012689      0.003275         0.162557        0.035248   \n","39       0.017414      0.005324         0.170022        0.034446   \n","40       0.021438      0.005989         0.165091        0.033337   \n","41       0.010669      0.001245         0.098627        0.003950   \n","42       0.010938      0.000649         0.097407        0.005348   \n","43       0.010551      0.000174         0.101352        0.011788   \n","44       0.011046      0.000936         0.099711        0.003741   \n","45       0.010658      0.000109         0.098696        0.003569   \n","46       0.010448      0.000334         0.096827        0.001996   \n","47       0.011790      0.003111         0.095176        0.002676   \n","48       0.010106      0.000397         0.100419        0.008632   \n","49       0.016386      0.005594         0.155215        0.042857   \n","\n","   param_n_neighbors               params  split0_test_score  \\\n","0                  1   {'n_neighbors': 1}           0.773519   \n","1                  3   {'n_neighbors': 3}           0.815331   \n","2                  5   {'n_neighbors': 5}           0.825784   \n","3                  7   {'n_neighbors': 7}           0.820557   \n","4                  9   {'n_neighbors': 9}           0.824042   \n","5                 11  {'n_neighbors': 11}           0.832753   \n","6                 13  {'n_neighbors': 13}           0.824042   \n","7                 15  {'n_neighbors': 15}           0.827526   \n","8                 17  {'n_neighbors': 17}           0.824042   \n","9                 19  {'n_neighbors': 19}           0.820557   \n","10                21  {'n_neighbors': 21}           0.820557   \n","11                23  {'n_neighbors': 23}           0.813589   \n","12                25  {'n_neighbors': 25}           0.811847   \n","13                27  {'n_neighbors': 27}           0.810105   \n","14                29  {'n_neighbors': 29}           0.813589   \n","15                31  {'n_neighbors': 31}           0.810105   \n","16                33  {'n_neighbors': 33}           0.804878   \n","17                35  {'n_neighbors': 35}           0.808362   \n","18                37  {'n_neighbors': 37}           0.810105   \n","19                39  {'n_neighbors': 39}           0.804878   \n","20                41  {'n_neighbors': 41}           0.808362   \n","21                43  {'n_neighbors': 43}           0.804878   \n","22                45  {'n_neighbors': 45}           0.801394   \n","23                47  {'n_neighbors': 47}           0.803136   \n","24                49  {'n_neighbors': 49}           0.803136   \n","25                51  {'n_neighbors': 51}           0.801394   \n","26                53  {'n_neighbors': 53}           0.799652   \n","27                55  {'n_neighbors': 55}           0.799652   \n","28                57  {'n_neighbors': 57}           0.801394   \n","29                59  {'n_neighbors': 59}           0.797909   \n","30                61  {'n_neighbors': 61}           0.797909   \n","31                63  {'n_neighbors': 63}           0.796167   \n","32                65  {'n_neighbors': 65}           0.794425   \n","33                67  {'n_neighbors': 67}           0.794425   \n","34                69  {'n_neighbors': 69}           0.794425   \n","35                71  {'n_neighbors': 71}           0.794425   \n","36                73  {'n_neighbors': 73}           0.790941   \n","37                75  {'n_neighbors': 75}           0.790941   \n","38                77  {'n_neighbors': 77}           0.792683   \n","39                79  {'n_neighbors': 79}           0.792683   \n","40                81  {'n_neighbors': 81}           0.790941   \n","41                83  {'n_neighbors': 83}           0.789199   \n","42                85  {'n_neighbors': 85}           0.789199   \n","43                87  {'n_neighbors': 87}           0.790941   \n","44                89  {'n_neighbors': 89}           0.790941   \n","45                91  {'n_neighbors': 91}           0.789199   \n","46                93  {'n_neighbors': 93}           0.790941   \n","47                95  {'n_neighbors': 95}           0.789199   \n","48                97  {'n_neighbors': 97}           0.787456   \n","49                99  {'n_neighbors': 99}           0.785714   \n","\n","    split1_test_score  split2_test_score  split3_test_score  ...  \\\n","0            0.792683           0.820244           0.792321  ...   \n","1            0.834495           0.860384           0.821990  ...   \n","2            0.834495           0.881326           0.823735  ...   \n","3            0.841463           0.877836           0.825480  ...   \n","4            0.834495           0.867365           0.837696  ...   \n","5            0.831010           0.876091           0.830716  ...   \n","6            0.832753           0.874346           0.839442  ...   \n","7            0.834495           0.865620           0.835951  ...   \n","8            0.829268           0.869110           0.828970  ...   \n","9            0.824042           0.865620           0.835951  ...   \n","10           0.822300           0.869110           0.834206  ...   \n","11           0.824042           0.865620           0.830716  ...   \n","12           0.820557           0.865620           0.827225  ...   \n","13           0.820557           0.858639           0.830716  ...   \n","14           0.815331           0.858639           0.832461  ...   \n","15           0.817073           0.853403           0.827225  ...   \n","16           0.818815           0.849913           0.825480  ...   \n","17           0.813589           0.851658           0.825480  ...   \n","18           0.813589           0.853403           0.821990  ...   \n","19           0.811847           0.856894           0.820244  ...   \n","20           0.811847           0.856894           0.816754  ...   \n","21           0.811847           0.853403           0.816754  ...   \n","22           0.813589           0.853403           0.816754  ...   \n","23           0.810105           0.855148           0.816754  ...   \n","24           0.810105           0.855148           0.815009  ...   \n","25           0.810105           0.853403           0.815009  ...   \n","26           0.810105           0.849913           0.815009  ...   \n","27           0.811847           0.851658           0.816754  ...   \n","28           0.810105           0.853403           0.816754  ...   \n","29           0.811847           0.848168           0.816754  ...   \n","30           0.810105           0.848168           0.818499  ...   \n","31           0.811847           0.848168           0.816754  ...   \n","32           0.810105           0.846422           0.816754  ...   \n","33           0.813589           0.848168           0.816754  ...   \n","34           0.810105           0.849913           0.815009  ...   \n","35           0.811847           0.851658           0.816754  ...   \n","36           0.811847           0.851658           0.816754  ...   \n","37           0.810105           0.849913           0.816754  ...   \n","38           0.810105           0.851658           0.816754  ...   \n","39           0.811847           0.849913           0.816754  ...   \n","40           0.811847           0.848168           0.816754  ...   \n","41           0.810105           0.848168           0.816754  ...   \n","42           0.806620           0.846422           0.815009  ...   \n","43           0.808362           0.848168           0.816754  ...   \n","44           0.808362           0.846422           0.816754  ...   \n","45           0.810105           0.848168           0.816754  ...   \n","46           0.808362           0.848168           0.816754  ...   \n","47           0.806620           0.848168           0.815009  ...   \n","48           0.804878           0.848168           0.813264  ...   \n","49           0.804878           0.848168           0.813264  ...   \n","\n","    mean_test_score  std_test_score  rank_test_score  split0_train_score  \\\n","0          0.791076        0.016567               50            0.980811   \n","1          0.828394        0.017994               14            0.901875   \n","2          0.840607        0.021016                5            0.887484   \n","3          0.840956        0.020091                2            0.873528   \n","4          0.840608        0.014405                4            0.863498   \n","5          0.843398        0.017353                1            0.860009   \n","6          0.840608        0.017562                3            0.857392   \n","7          0.839909        0.013229                6            0.853903   \n","8          0.835025        0.017203                7            0.851723   \n","9          0.833981        0.016666                9            0.848234   \n","10         0.833982        0.018197                8            0.846053   \n","11         0.832238        0.017645               10            0.844309   \n","12         0.829797        0.018624               11            0.844309   \n","13         0.828750        0.016353               13            0.842128   \n","14         0.829100        0.016292               12            0.840384   \n","15         0.825959        0.014838               15            0.836895   \n","16         0.823866        0.014698               18            0.836023   \n","17         0.824914        0.014954               16            0.834278   \n","18         0.824564        0.015288               17            0.833406   \n","19         0.823170        0.017945               19            0.833842   \n","20         0.823169        0.017478               20            0.833842   \n","21         0.821774        0.016791               23            0.832534   \n","22         0.821775        0.017389               22            0.832098   \n","23         0.821775        0.018036               21            0.830789   \n","24         0.820728        0.018111               24            0.829917   \n","25         0.820031        0.017804               25            0.829917   \n","26         0.818984        0.016891               28            0.828609   \n","27         0.819333        0.017330               27            0.827300   \n","28         0.819682        0.017779               26            0.825992   \n","29         0.818286        0.016458               31            0.825556   \n","30         0.818287        0.016598               29            0.825556   \n","31         0.817938        0.016898               33            0.826428   \n","32         0.816892        0.016870               36            0.827300   \n","33         0.818287        0.017244               29            0.825992   \n","34         0.817590        0.018138               34            0.825992   \n","35         0.817589        0.018706               35            0.826428   \n","36         0.817940        0.019518               32            0.824684   \n","37         0.816544        0.019041               38            0.825992   \n","38         0.816544        0.019334               39            0.826428   \n","39         0.816892        0.018521               37            0.825120   \n","40         0.816194        0.018373               40            0.824248   \n","41         0.815847        0.018917               41            0.823375   \n","42         0.813754        0.018588               46            0.824248   \n","43         0.815149        0.018644               42            0.825556   \n","44         0.814800        0.018029               45            0.825556   \n","45         0.815149        0.018999               42            0.824684   \n","46         0.815149        0.018644               42            0.825120   \n","47         0.813056        0.019458               47            0.824684   \n","48         0.812010        0.019977               49            0.825120   \n","49         0.812010        0.020333               48            0.821631   \n","\n","    split1_train_score  split2_train_score  split3_train_score  \\\n","0             0.977758            0.979076            0.981691   \n","1             0.901439            0.903662            0.905841   \n","2             0.879634            0.877942            0.886661   \n","3             0.866550            0.869660            0.873583   \n","4             0.863498            0.857890            0.865737   \n","5             0.860445            0.853095            0.861813   \n","6             0.852159            0.846992            0.856582   \n","7             0.850414            0.842197            0.850915   \n","8             0.846925            0.837838            0.846992   \n","9             0.843873            0.833915            0.845248   \n","10            0.841256            0.831735            0.844377   \n","11            0.843437            0.830427            0.840453   \n","12            0.838639            0.828684            0.836530   \n","13            0.836023            0.828684            0.833915   \n","14            0.837767            0.826504            0.830427   \n","15            0.836459            0.824760            0.828248   \n","16            0.832098            0.823888            0.827376   \n","17            0.832534            0.821273            0.825196   \n","18            0.832534            0.820401            0.825196   \n","19            0.829917            0.819093            0.824760   \n","20            0.829045            0.816914            0.822581   \n","21            0.829045            0.818657            0.822581   \n","22            0.828609            0.816914            0.823452   \n","23            0.828173            0.818657            0.823017   \n","24            0.826864            0.818657            0.823888   \n","25            0.826864            0.816914            0.822581   \n","26            0.826428            0.815606            0.819965   \n","27            0.825556            0.816478            0.820837   \n","28            0.824684            0.813426            0.820837   \n","29            0.825120            0.812990            0.820401   \n","30            0.823812            0.813426            0.819965   \n","31            0.823375            0.813426            0.819093   \n","32            0.822939            0.813862            0.819529   \n","33            0.822503            0.812554            0.819965   \n","34            0.822067            0.811683            0.820837   \n","35            0.820759            0.812119            0.819529   \n","36            0.820323            0.810811            0.818657   \n","37            0.819887            0.811683            0.816914   \n","38            0.819451            0.811247            0.816042   \n","39            0.817706            0.810811            0.815170   \n","40            0.819014            0.809939            0.816478   \n","41            0.819451            0.809503            0.816478   \n","42            0.819887            0.808631            0.815170   \n","43            0.817706            0.808631            0.813426   \n","44            0.817706            0.809939            0.813862   \n","45            0.816398            0.807759            0.815606   \n","46            0.816398            0.806888            0.815170   \n","47            0.816834            0.806452            0.812990   \n","48            0.816398            0.804708            0.813862   \n","49            0.815526            0.805144            0.815170   \n","\n","    split4_train_score  mean_train_score  std_train_score  \n","0             0.981691          0.980206         0.001552  \n","1             0.908893          0.904342         0.002754  \n","2             0.884917          0.883328         0.003835  \n","3             0.871840          0.871032         0.002659  \n","4             0.865737          0.863272         0.002871  \n","5             0.857018          0.858476         0.003113  \n","6             0.852223          0.853070         0.003728  \n","7             0.849608          0.849408         0.003887  \n","8             0.845684          0.845832         0.004498  \n","9             0.841761          0.842606         0.004827  \n","10            0.840017          0.840688         0.004966  \n","11            0.836530          0.839031         0.005091  \n","12            0.837838          0.837200         0.005020  \n","13            0.836094          0.835369         0.004323  \n","14            0.833043          0.833625         0.004982  \n","15            0.828248          0.830922         0.004870  \n","16            0.829119          0.829701         0.004129  \n","17            0.827812          0.828219         0.004752  \n","18            0.825632          0.827434         0.004887  \n","19            0.825632          0.826649         0.004982  \n","20            0.825196          0.825516         0.005736  \n","21            0.825632          0.825690         0.004842  \n","22            0.824760          0.825167         0.005121  \n","23            0.823452          0.824818         0.004242  \n","24            0.822581          0.824382         0.003823  \n","25            0.822581          0.823771         0.004409  \n","26            0.822581          0.822638         0.004618  \n","27            0.822581          0.822550         0.003779  \n","28            0.823017          0.821591         0.004432  \n","29            0.821273          0.821068         0.004523  \n","30            0.821273          0.820806         0.004171  \n","31            0.821273          0.820719         0.004377  \n","32            0.821273          0.820981         0.004396  \n","33            0.821709          0.820545         0.004451  \n","34            0.820837          0.820283         0.004698  \n","35            0.819529          0.819673         0.004559  \n","36            0.817786          0.818452         0.004499  \n","37            0.817350          0.818365         0.004654  \n","38            0.818657          0.818365         0.004947  \n","39            0.818221          0.817406         0.004664  \n","40            0.816914          0.817319         0.004609  \n","41            0.816914          0.817144         0.004539  \n","42            0.816478          0.816883         0.005186  \n","43            0.816478          0.816359         0.005563  \n","44            0.816042          0.816621         0.005169  \n","45            0.814298          0.815749         0.005408  \n","46            0.812990          0.815313         0.005895  \n","47            0.813862          0.814964         0.005925  \n","48            0.813862          0.814790         0.006522  \n","49            0.812119          0.813918         0.005364  \n","\n","[50 rows x 21 columns]"]},"execution_count":69,"metadata":{},"output_type":"execute_result"}],"source":["# data at diff no of neighbors\n","pd.DataFrame(grid_search_knn.cv_results_)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26,"status":"ok","timestamp":1715743103521,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"_zDWgf2-yL6R","outputId":"2baa72b8-6f98-473a-cf84-5574ba1b0f2b"},"outputs":[{"name":"stdout","output_type":"stream","text":["[0.79107637 0.82839448 0.84060723 0.84095566 0.84060784 0.84339834\n"," 0.84060845 0.83990854 0.83502502 0.83398094 0.83398155 0.83223817\n"," 0.82979672 0.82875021 0.82909985 0.8259591  0.82386608 0.8249138\n"," 0.82456416 0.82317043 0.82316921 0.82177427 0.82177488 0.82177548\n"," 0.82072836 0.82003089 0.81898438 0.81933281 0.81968185 0.8182863\n"," 0.81828691 0.81793787 0.81689196 0.81828691 0.81759004 0.81758943\n"," 0.81793969 0.81654414 0.81654353 0.81689196 0.81619449 0.81584667\n"," 0.81375364 0.81514859 0.81479955 0.81514859 0.81514859 0.81305556\n"," 0.81200966 0.81201026]\n","\n","[0.20892363 0.17160552 0.15939277 0.15904434 0.15939216 0.15660166\n"," 0.15939155 0.16009146 0.16497498 0.16601906 0.16601845 0.16776183\n"," 0.17020328 0.17124979 0.17090015 0.1740409  0.17613392 0.1750862\n"," 0.17543584 0.17682957 0.17683079 0.17822573 0.17822512 0.17822452\n"," 0.17927164 0.17996911 0.18101562 0.18066719 0.18031815 0.1817137\n"," 0.18171309 0.18206213 0.18310804 0.18171309 0.18240996 0.18241057\n"," 0.18206031 0.18345586 0.18345647 0.18310804 0.18380551 0.18415333\n"," 0.18624636 0.18485141 0.18520045 0.18485141 0.18485141 0.18694444\n"," 0.18799034 0.18798974]\n"]}],"source":["# mean test score is average accuracy obtained during cross-validation for each\n","# hyperparameter tuning\n","acc = grid_search_knn.cv_results_['mean_test_score']\n","err_rate = 1 - acc\n","print(acc)\n","print()\n","print(err_rate)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"elapsed":1114,"status":"ok","timestamp":1715743104611,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"IS-LxsqMyPSm","outputId":"342de339-9613-41c5-829e-082967a218ba"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1500x600 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# error rate vs no of neighbors graph\n","plt.figure(figsize = (15,6))\n","plt.plot(range(1,100,2),err_rate,color = 'black',linestyle = '--',marker = 'o',markerfacecolor='red',markersize = 8)\n","plt.title('Error Rate vs K')\n","plt.xlabel('K')\n","plt.ylabel('Error Rate')\n","plt.yticks(np.arange(min(err_rate), max(err_rate),0.01))\n","plt.xticks(np.arange(1, 100,2))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"DnG8coXkFVV3"},"source":["##Stacking"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y3ggABG-FY6X"},"outputs":[],"source":["# @title\n","from sklearn.ensemble import StackingClassifier\n","# dtc =  DecisionTreeClassifier()\n","# rfc = RandomForestClassifier()\n","# knn =  KNeighborsClassifier()\n","# C_nb=CategoricalNB()\n","# svc=SVC(random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":622714,"status":"ok","timestamp":1715743727300,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"8fo72S0XF-sa","outputId":"755191b0-f7a0-4ef1-c8fc-f5d22285b0c8"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.957, test=0.965) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.958, test=0.965) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.961, test=0.965) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.960, test=0.965) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.960, test=0.954) total time=   0.0s\n","The accuracy score of GridSearchCV(cv=5, estimator=CategoricalNB(),\n","             param_grid={'alpha': array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1. ])},\n","             return_train_score=True, verbose=3) is: 0.959959498496084\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","The accuracy score of GridSearchCV(cv=5, estimator=SVC(random_state=42), n_jobs=-1,\n","             param_grid={'C': array([0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1 ]),\n","                         'kernel': ['linear', 'poly', 'rbf', 'sigmoid']},\n","             return_train_score=True, verbose=3) is: 0.959959498496084\n"]}],"source":["# # @title\n","# clf = [grid_search_C_nb,grid_search_svc]\n","# for algo in clf:\n","#     score = cross_val_score( algo,X,y,cv = 5,scoring = 'accuracy')\n","#     print(\"The accuracy score of {} is:\".format(algo),score.mean())"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"patMxogTGGjt"},"outputs":[],"source":["# # @title\n","# clf = [('nb',grid_search_C_nb),('svm',grid_search_svc)] #list of (str, estimator)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2883289,"status":"ok","timestamp":1715746610580,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"4Qlb2LbyGM4V","outputId":"07e363cb-0e1d-4ce1-fd13-f272eb606ffc"},"outputs":[{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.957, test=0.963) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.961, test=0.947) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.961, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.957, test=0.965) total time=   0.0s\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.955, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.960, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.955, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.957, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.959, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.953, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.955, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.957, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.959, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.953, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.955, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.952) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.945) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.953, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.955, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.957, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.959, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.953, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.955, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.957, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.959, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.953, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.955, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.957, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.959, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.953, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.955, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.952) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.945) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.953, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.955, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.957, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.959, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.953, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.955, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.957, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.959, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.953, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.955, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.957, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.959, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.956, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.953, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.963, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.963, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.963, test=0.952) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.963, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.963, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.963, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.963, test=0.952) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.963, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.963, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.961, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.963, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.959, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.956, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.958, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.959, test=0.948) total time=   0.0s\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 30 candidates, totalling 150 fits\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.963) total time=   0.1s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.947) total time=   0.1s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.968) total time=   0.1s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.950) total time=   0.1s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.2s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.947) total time=   0.2s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.956, test=0.968) total time=   0.3s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.963) total time=   0.2s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.947) total time=   0.2s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.3s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.947) total time=   0.2s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.963) total time=   0.2s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.947) total time=   0.2s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.5s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.947) total time=   0.2s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.950) total time=   0.4s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.963) total time=   0.2s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.947) total time=   0.2s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.5s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.947) total time=   0.2s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.956, test=0.968) total time=   0.1s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.963) total time=   0.2s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.947) total time=   0.2s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.5s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.947) total time=   0.3s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.956, test=0.968) total time=   0.1s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.963) total time=   0.2s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.947) total time=   0.2s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.9s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.947) total time=   0.7s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.956, test=0.968) total time=   0.3s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.950) total time=   1.0s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.5s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.963) total time=   0.5s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.947) total time=   0.4s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.5s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.947) total time=   0.4s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.963) total time=   0.3s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.947) total time=   0.2s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.4s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.947) total time=   0.4s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.956, test=0.968) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.963) total time=   0.3s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.947) total time=   0.3s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.968) total time=   0.3s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.4s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.947) total time=   0.4s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.956, test=0.968) total time=   0.3s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.963) total time=   0.3s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.947) total time=   0.3s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.956, test=0.968) total time=   0.3s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.950) total time=   0.4s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.5s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.963) total time=   0.8s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.947) total time=   0.8s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.956, test=0.968) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.950) total time=   1.0s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.6s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n","50 fits failed out of a total of 150.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","50 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1291, in fit\n","    fold_coefs_ = Parallel(n_jobs=self.n_jobs, verbose=self.verbose, prefer=prefer)(\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 63, in __call__\n","    return super().__call__(iterable_with_config)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1918, in __call__\n","    return output if self.return_generator else list(output)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1847, in _get_sequential_output\n","    res = func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 123, in __call__\n","    return self.function(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 521, in _logistic_regression_path\n","    alpha = (1.0 / C) * (1 - l1_ratio)\n","TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [0.95848445 0.95848445        nan 0.95848445 0.95848445        nan\n"," 0.95848445 0.95848445        nan 0.95848445 0.95848445        nan\n"," 0.95848445 0.95848445        nan 0.95848445 0.95848445        nan\n"," 0.95848445 0.95848445        nan 0.95848445 0.95848445        nan\n"," 0.95848445 0.95848445        nan 0.95848445 0.95848445        nan]\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the train scores are non-finite: [0.95848586 0.95848586        nan 0.95848586 0.95848586        nan\n"," 0.95848586 0.95848586        nan 0.95848586 0.95848586        nan\n"," 0.95848586 0.95848586        nan 0.95848586 0.95848586        nan\n"," 0.95848586 0.95848586        nan 0.95848586 0.95848586        nan\n"," 0.95848586 0.95848586        nan 0.95848586 0.95848586        nan]\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.958, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.962, test=0.951) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.962, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.958, test=0.965) total time=   0.0s\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.959, test=0.954) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.960, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.959, test=0.954) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.960, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.954) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.952) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.959, test=0.954) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.960, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.959, test=0.954) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.960, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.959, test=0.954) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.960, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.954) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.952) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.959, test=0.954) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.960, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.959, test=0.954) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.960, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.959, test=0.954) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.960, test=0.952) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.959, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.956, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.960, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.961, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.961, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.945) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.961, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.961, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.961, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.945) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.961, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.961, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.955, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.961, test=0.945) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.958, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.955, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.961, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.961, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.961, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.961, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.961, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.961, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.961, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.961, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.961, test=0.948) total time=   0.0s\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 30 candidates, totalling 150 fits\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.1s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.1s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.968) total time=   0.1s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.950) total time=   0.1s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.1s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.1s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.968) total time=   0.1s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.950) total time=   0.1s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.1s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.1s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.968) total time=   0.1s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.950) total time=   0.1s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.3s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.968) total time=   0.3s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.2s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.968) total time=   0.1s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.4s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.2s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.2s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.5s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.2s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.968) total time=   0.1s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.2s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.6s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.4s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.968) total time=   0.3s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.950) total time=   0.8s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.6s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.4s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.4s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.968) total time=   0.4s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.4s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.7s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.3s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.968) total time=   0.2s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.950) total time=   0.4s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.3s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.2s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.968) total time=   0.3s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.5s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.4s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.968) total time=   0.3s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.950) total time=   0.4s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.4s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.3s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.3s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.968) total time=   0.3s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.3s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.5s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.4s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.968) total time=   0.3s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.950) total time=   0.4s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.4s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.3s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.3s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.968) total time=   0.3s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.3s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.7s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.9s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.968) total time=   0.8s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.950) total time=   0.8s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   1.0s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.6s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.951) total time=   0.5s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.968) total time=   0.3s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.950) total time=   0.3s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.965) total time=   0.3s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.951) total time=   0.5s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.968) total time=   0.5s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.950) total time=   0.4s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n","50 fits failed out of a total of 150.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","50 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1291, in fit\n","    fold_coefs_ = Parallel(n_jobs=self.n_jobs, verbose=self.verbose, prefer=prefer)(\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 63, in __call__\n","    return super().__call__(iterable_with_config)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1918, in __call__\n","    return output if self.return_generator else list(output)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1847, in _get_sequential_output\n","    res = func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 123, in __call__\n","    return self.function(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 521, in _logistic_regression_path\n","    alpha = (1.0 / C) * (1 - l1_ratio)\n","TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [0.95972026 0.95972026        nan 0.95972026 0.95972026        nan\n"," 0.95972026 0.95972026        nan 0.95972026 0.95972026        nan\n"," 0.95972026 0.95972026        nan 0.95972026 0.95972026        nan\n"," 0.95972026 0.95972026        nan 0.95972026 0.95972026        nan\n"," 0.95972026 0.95972026        nan 0.95972026 0.95972026        nan]\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the train scores are non-finite: [0.95971932 0.95971932        nan 0.95971932 0.95971932        nan\n"," 0.95971932 0.95971932        nan 0.95971932 0.95971932        nan\n"," 0.95971932 0.95971932        nan 0.95971932 0.95971932        nan\n"," 0.95971932 0.95971932        nan 0.95971932 0.95971932        nan\n"," 0.95971932 0.95971932        nan 0.95971932 0.95971932        nan]\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.965) total time=   0.5s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.961, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.960, test=0.969) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.965, test=0.950) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.961, test=0.965) total time=   0.0s\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.962, test=0.958) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.963, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.960, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.961, test=0.966) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.961, test=0.966) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.966) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.961, test=0.966) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.961, test=0.966) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.961, test=0.966) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.966) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.961, test=0.966) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.961, test=0.966) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.961, test=0.966) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.964, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.961, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.961, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.959, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.967, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.964, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.967, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.964, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.967, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.964, test=0.969) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.967, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.964, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.967, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.964, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.967, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.964, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.967, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.964, test=0.969) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.967, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.964, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.967, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.964, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.967, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.966, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.965, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.964, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.965, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.959, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.965, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.959, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.965, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.969) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.965, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.959, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.965, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.959, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.965, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.959, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.965, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.969) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.965, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.959, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.965, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.959, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.965, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.959, test=0.969) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.965, test=0.948) total time=   0.0s\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 30 candidates, totalling 150 fits\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.1s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.969) total time=   0.1s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.965, test=0.950) total time=   0.1s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.1s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.969) total time=   0.1s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.965, test=0.950) total time=   0.1s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.1s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.969) total time=   0.1s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.965, test=0.950) total time=   0.1s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.962) total time=   1.0s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.969) total time=   0.4s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.965, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.3s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.969) total time=   0.3s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.965, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.962) total time=   1.0s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.969) total time=   0.4s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.965, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.4s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.969) total time=   0.2s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.965, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.962) total time=   0.5s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.969) total time=   0.2s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.965, test=0.950) total time=   0.4s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.4s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.969) total time=   0.2s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.965, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.962) total time=   0.4s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.969) total time=   0.2s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.965, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.4s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.969) total time=   0.2s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.965, test=0.950) total time=   0.2s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.962) total time=   0.4s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.969) total time=   0.3s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.965, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.4s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.969) total time=   0.2s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.965, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.4s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.5s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.962) total time=   0.7s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.969) total time=   0.6s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.965, test=0.950) total time=   1.0s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.8s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.5s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.962) total time=   0.4s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.969) total time=   0.2s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.965, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.3s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.962) total time=   0.5s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.969) total time=   0.3s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.965, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.5s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.3s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.969) total time=   0.2s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.965, test=0.950) total time=   0.3s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.4s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.962) total time=   0.5s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.969) total time=   0.3s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.965, test=0.950) total time=   0.5s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.5s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.3s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.962) total time=   0.3s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.969) total time=   0.2s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.965, test=0.950) total time=   0.3s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.965) total time=   0.3s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.4s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.962) total time=   0.5s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.969) total time=   0.4s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.965, test=0.950) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n","50 fits failed out of a total of 150.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","50 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1291, in fit\n","    fold_coefs_ = Parallel(n_jobs=self.n_jobs, verbose=self.verbose, prefer=prefer)(\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 63, in __call__\n","    return super().__call__(iterable_with_config)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1918, in __call__\n","    return output if self.return_generator else list(output)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1847, in _get_sequential_output\n","    res = func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 123, in __call__\n","    return self.function(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 521, in _logistic_regression_path\n","    alpha = (1.0 / C) * (1 - l1_ratio)\n","TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [0.96215975 0.96215975        nan 0.96215975 0.96215975        nan\n"," 0.96215975 0.96215975        nan 0.96215975 0.96215975        nan\n"," 0.96215975 0.96215975        nan 0.96215975 0.96215975        nan\n"," 0.96215975 0.96215975        nan 0.96215975 0.96215975        nan\n"," 0.96215975 0.96215975        nan 0.96215975 0.96215975        nan]\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the train scores are non-finite: [0.96216046 0.96216046        nan 0.96216046 0.96216046        nan\n"," 0.96216046 0.96216046        nan 0.96216046 0.96216046        nan\n"," 0.96216046 0.96216046        nan 0.96216046 0.96216046        nan\n"," 0.96216046 0.96216046        nan 0.96216046 0.96216046        nan\n"," 0.96200791 0.96216046        nan 0.96200791 0.96216046        nan]\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.965) total time=   0.7s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.960, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.960, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.961, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.960, test=0.965) total time=   0.0s\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.959, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.961, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.961, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.959, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.961, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.961, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.964) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.952) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.959, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.961, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.961, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.959, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.961, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.961, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.959, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.961, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.961, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.964) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.952) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.959, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.961, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.961, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.959, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.961, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.961, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.959, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.961, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.961, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.958, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.962, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.962, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.952) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.962, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.962, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.962, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.952) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.962, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.962, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.959, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.962, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.962, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.959, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.963, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.963, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.963, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.963, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.963, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.963, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.963, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.963, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.963, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.960, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.962, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.961, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.961, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.963, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.960, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.964, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.964, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.964, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.964, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.964, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.964, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.964, test=0.954) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.964, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.964, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.963, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.962, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.961, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.964, test=0.954) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.961, test=0.968) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.959, test=0.960) total time=   0.0s\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 30 candidates, totalling 150 fits\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.1s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.957) total time=   0.1s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.954) total time=   0.1s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.957) total time=   0.2s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.957) total time=   0.1s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.954) total time=   0.1s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.957) total time=   0.2s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.957) total time=   0.1s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.954) total time=   0.1s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.1s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.4s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.957) total time=   0.5s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.4s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.957) total time=   0.2s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.957) total time=   0.5s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.957) total time=   0.2s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.957) total time=   0.5s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.4s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.4s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.4s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.957) total time=   0.4s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.954) total time=   0.4s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.4s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   1.0s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   1.0s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.957) total time=   0.8s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.957) total time=   0.2s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.957) total time=   0.5s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.3s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.957) total time=   0.3s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.954) total time=   0.2s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.957) total time=   0.5s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.954) total time=   0.3s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.3s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.3s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.957) total time=   0.3s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.954) total time=   0.3s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.957) total time=   0.6s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.954) total time=   0.6s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.6s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.5s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.962) total time=   0.5s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.961, test=0.957) total time=   0.5s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.962, test=0.954) total time=   0.5s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.965) total time=   0.4s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   1.0s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.962) total time=   0.6s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.961, test=0.957) total time=   0.5s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.962, test=0.954) total time=   0.4s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.965) total time=   0.3s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n","50 fits failed out of a total of 150.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","50 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1291, in fit\n","    fold_coefs_ = Parallel(n_jobs=self.n_jobs, verbose=self.verbose, prefer=prefer)(\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 63, in __call__\n","    return super().__call__(iterable_with_config)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1918, in __call__\n","    return output if self.return_generator else list(output)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1847, in _get_sequential_output\n","    res = func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 123, in __call__\n","    return self.function(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 521, in _logistic_regression_path\n","    alpha = (1.0 / C) * (1 - l1_ratio)\n","TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [0.96063303 0.96063303        nan 0.96063303 0.96063303        nan\n"," 0.96063303 0.96063303        nan 0.96063303 0.96063303        nan\n"," 0.96063303 0.96063303        nan 0.96063303 0.96063303        nan\n"," 0.96063303 0.96063303        nan 0.96063303 0.96063303        nan\n"," 0.96063303 0.96063303        nan 0.96063303 0.96063303        nan]\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the train scores are non-finite: [0.96063462 0.96063462        nan 0.96063462 0.96063462        nan\n"," 0.96063462 0.96063462        nan 0.96063462 0.96063462        nan\n"," 0.96063462 0.96063462        nan 0.96063462 0.96063462        nan\n"," 0.96063462 0.96063462        nan 0.96063462 0.96063462        nan\n"," 0.96063462 0.96063462        nan 0.96063462 0.96063462        nan]\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.960, test=0.954) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.957, test=0.965) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.958, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.959, test=0.957) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.960, test=0.956) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.960, test=0.954) total time=   0.0s\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.956, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.956, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.964) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.956, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.956, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.956, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.964) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.956, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.956, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.959, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.957, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.956, test=0.964) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.956, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.959, test=0.948) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.957, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.960, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.957, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.960, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.957, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.957, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.960, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.957, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.960, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.957, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.960, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.957, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.957, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.960, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.957, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.960, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.958, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.956, test=0.968) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.959, test=0.952) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.957, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.960, test=0.948) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.958, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.958, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.964) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.958, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.958, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.958, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.964) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.958, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.958, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.958, test=0.964) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.962, test=0.948) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.962, test=0.948) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.959, test=0.960) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.962, test=0.948) total time=   0.0s\n","Fitting 5 folds for each of 10 candidates, totalling 50 fits\n","[CV 1/5] END .....alpha=0.1;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.1;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.1;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.1;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.1;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 1/5] END .....alpha=0.2;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.2;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.2;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.2;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.2;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 1/5] END alpha=0.30000000000000004;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.30000000000000004;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.30000000000000004;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END alpha=0.30000000000000004;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 1/5] END .....alpha=0.4;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.4;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.4;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.4;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.4;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 1/5] END .....alpha=0.5;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.5;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.5;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.5;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.5;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 1/5] END .....alpha=0.6;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.6;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.6;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.6;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.6;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 1/5] END alpha=0.7000000000000001;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END alpha=0.7000000000000001;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END alpha=0.7000000000000001;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END alpha=0.7000000000000001;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 1/5] END .....alpha=0.8;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.8;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.8;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.8;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.8;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 1/5] END .....alpha=0.9;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=0.9;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=0.9;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=0.9;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=0.9;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 1/5] END .....alpha=1.0;, score=(train=0.960, test=0.960) total time=   0.0s\n","[CV 2/5] END .....alpha=1.0;, score=(train=0.959, test=0.962) total time=   0.0s\n","[CV 3/5] END .....alpha=1.0;, score=(train=0.958, test=0.968) total time=   0.0s\n","[CV 4/5] END .....alpha=1.0;, score=(train=0.963, test=0.948) total time=   0.0s\n","[CV 5/5] END .....alpha=1.0;, score=(train=0.959, test=0.962) total time=   0.0s\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 40 candidates, totalling 200 fits\n","Fitting 5 folds for each of 30 candidates, totalling 150 fits\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.1s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.957) total time=   0.1s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.956) total time=   0.1s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.954) total time=   0.1s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.1s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.957) total time=   0.1s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.956) total time=   0.1s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.954) total time=   0.1s\n","[CV 1/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.1, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.1s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.962) total time=   0.1s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.957) total time=   0.1s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.956) total time=   0.1s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.954) total time=   0.1s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.957) total time=   0.2s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.956) total time=   0.1s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.954) total time=   0.2s\n","[CV 1/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.2, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.957) total time=   0.2s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.956) total time=   0.1s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.954) total time=   0.2s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.957) total time=   0.1s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.956) total time=   0.1s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.954) total time=   0.2s\n","[CV 1/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.30000000000000004, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.957) total time=   0.3s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.956) total time=   0.3s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.954) total time=   0.3s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.4s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.957) total time=   0.3s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.956) total time=   0.3s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.954) total time=   0.5s\n","[CV 1/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.4, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.4s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.962) total time=   0.4s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.956) total time=   0.4s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.956) total time=   0.3s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.954) total time=   0.4s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.957) total time=   0.2s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.956) total time=   0.2s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.954) total time=   0.4s\n","[CV 1/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.5, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.956) total time=   0.2s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.956) total time=   0.2s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.954) total time=   0.2s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.962) total time=   0.4s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.957) total time=   0.3s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.956) total time=   0.3s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.954) total time=   0.4s\n","[CV 1/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.6, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.962) total time=   0.2s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.956) total time=   0.2s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.956) total time=   0.2s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.954) total time=   0.2s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.962) total time=   0.5s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.957) total time=   0.4s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.956) total time=   0.4s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.954) total time=   0.4s\n","[CV 1/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.7000000000000001, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.962) total time=   0.3s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.956) total time=   0.2s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.956) total time=   0.2s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.954) total time=   0.2s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.2s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.962) total time=   0.5s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.957) total time=   0.5s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.956) total time=   0.4s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.954) total time=   0.7s\n","[CV 1/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.8, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.4s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.962) total time=   0.5s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.956) total time=   0.5s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.956) total time=   0.4s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.954) total time=   0.5s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.962) total time=   1.0s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.957) total time=   0.8s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.956) total time=   0.5s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.954) total time=   0.5s\n","[CV 1/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=0.9, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.957, test=0.965) total time=   0.3s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.958, test=0.962) total time=   0.3s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.959, test=0.956) total time=   0.3s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.956) total time=   0.2s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l2, solver=saga;, score=(train=0.960, test=0.954) total time=   0.3s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.957, test=0.965) total time=   0.3s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.958, test=0.962) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.959, test=0.957) total time=   0.5s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_sag.py:350: ConvergenceWarning: The max_iter was reached which means the coef_ did not converge\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.956) total time=   0.5s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=l1, solver=saga;, score=(train=0.960, test=0.954) total time=   0.5s\n","[CV 1/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 2/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 3/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 4/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n","[CV 5/5] END C=1.0, class_weight=balanced, multi_class=auto, penalty=elasticnet, solver=saga;, score=(train=nan, test=nan) total time=   0.0s\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py:378: FitFailedWarning: \n","50 fits failed out of a total of 150.\n","The score on these train-test partitions for these parameters will be set to nan.\n","If these failures are not expected, you can try to debug them by setting error_score='raise'.\n","\n","Below are more details about the failures:\n","--------------------------------------------------------------------------------\n","50 fits failed with the following error:\n","Traceback (most recent call last):\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_validation.py\", line 686, in _fit_and_score\n","    estimator.fit(X_train, y_train, **fit_params)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 1291, in fit\n","    fold_coefs_ = Parallel(n_jobs=self.n_jobs, verbose=self.verbose, prefer=prefer)(\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 63, in __call__\n","    return super().__call__(iterable_with_config)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1918, in __call__\n","    return output if self.return_generator else list(output)\n","  File \"/usr/local/lib/python3.10/dist-packages/joblib/parallel.py\", line 1847, in _get_sequential_output\n","    res = func(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/utils/parallel.py\", line 123, in __call__\n","    return self.function(*args, **kwargs)\n","  File \"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py\", line 521, in _logistic_regression_path\n","    alpha = (1.0 / C) * (1 - l1_ratio)\n","TypeError: unsupported operand type(s) for -: 'int' and 'NoneType'\n","\n","  warnings.warn(some_fits_failed_message, FitFailedWarning)\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the test scores are non-finite: [0.95880097 0.95880097        nan 0.95880097 0.95880097        nan\n"," 0.95880097 0.95880097        nan 0.95880097 0.95880097        nan\n"," 0.95849562 0.95880097        nan 0.95849562 0.95880097        nan\n"," 0.95849562 0.95880097        nan 0.95849562 0.95880097        nan\n"," 0.95849562 0.95880097        nan 0.95849562 0.95880097        nan]\n","  warnings.warn(\n","/usr/local/lib/python3.10/dist-packages/sklearn/model_selection/_search.py:952: UserWarning: One or more of the train scores are non-finite: [0.95880361 0.95880361        nan 0.95880361 0.95880361        nan\n"," 0.95880361 0.95880361        nan 0.95880361 0.95880361        nan\n"," 0.95880361 0.95880361        nan 0.95880361 0.95880361        nan\n"," 0.95880361 0.95880361        nan 0.95880361 0.95880361        nan\n"," 0.95880361 0.95880361        nan 0.95880361 0.95880361        nan]\n","  warnings.warn(\n"]},{"name":"stdout","output_type":"stream","text":["The accuracy score of is: 0.959959498496084\n"]}],"source":["# # @title\n","# # lr = LogisticRegression()\n","# stack_model = StackingClassifier( estimators = clf,final_estimator = grid_search_log)\n","# score = cross_val_score(stack_model,X,y,cv = 5,scoring = 'accuracy')\n","# print(\"The accuracy score of is:\",score.mean())"]},{"cell_type":"markdown","metadata":{"id":"UssJTIUTyY0p"},"source":["#6. Best Model"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"H7P9dvqUya62"},"outputs":[],"source":["mdls_val_grid = {}\n","\n","# assigning best validation score of all models\n","for clf in (grid_search_dt, grid_search_rf, grid_search_log,\n","            grid_search_C_nb, grid_search_knn, grid_search_svc):\n","            mdls_val_grid[clf.estimator.__class__.__name__] =  clf.best_score_"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":12,"status":"ok","timestamp":1715746610581,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"uNaDaQFc8_CN","outputId":"decc8de2-0e0f-4f7a-97e8-18409c305e47"},"outputs":[{"data":{"text/plain":["{'LogisticRegression': 0.9602398282771161,\n"," 'CategoricalNB': 0.9602398282771161,\n"," 'SVC': 0.9602398282771161,\n"," 'DecisionTreeClassifier': 0.9588454919702526,\n"," 'RandomForestClassifier': 0.9550103070215444,\n"," 'KNeighborsClassifier': 0.8433983374987077}"]},"execution_count":77,"metadata":{},"output_type":"execute_result"}],"source":["# reverse=true make it in descending order, key func extract value for comapari-\n","# -sion\n","sorted_mdls_val = dict(sorted(mdls_val_grid.items(), key=lambda x: x[1],\n","                              reverse=True))\n","sorted_mdls_val"]},{"cell_type":"markdown","metadata":{"id":"rmzGyp0n9CO6"},"source":["##Plotting Models"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1715746610581,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"pMsbXGkh9FpV","outputId":"508004ca-6c33-4227-9297-5d7d8f0f944d"},"outputs":[{"name":"stdout","output_type":"stream","text":["['LogisticRegression' 'CategoricalNB' 'SVC' 'DecisionTreeClassifier'\n"," 'RandomForestClassifier' 'KNeighborsClassifier']\n","\n","[0.96023983 0.96023983 0.96023983 0.95884549 0.95501031 0.84339834]\n"]}],"source":["mdls = np.array(list(sorted_mdls_val.keys()))\n","mdls_val = np.array(list(sorted_mdls_val.values()))\n","print(mdls)\n","print()\n","print(mdls_val)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2596,"status":"ok","timestamp":1715746613168,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"DE_b4Xqp9IPN","outputId":"89b80604-7190-43a1-fb0b-f8f27411b665"},"outputs":[{"data":{"image/png":"\n","text/plain":["<Figure size 1500x1500 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["plt.figure(figsize = (15,15))\n","plt.bar(mdls, mdls_val, color='green', alpha=0.7)\n","# plt.bar(sorted_mdls_val.keys(), sorted_mdls_val.values())\n","\n","\n","plt.title(\"Accuracy Score of Different Models\")\n","plt.xlabel(\"Models\")\n","plt.ylabel(\"Accuracy Score\")\n","\n","# plt.yticks(np.arange(0, 1, 0.02))\n","plt.ylim(bottom=min(mdls_val) - ((.1/100) * max(mdls_val)) , top=max(mdls_val) + ((.1/100) * max(mdls_val)) )\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1715746613168,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"413mHOpB9MO4","outputId":"e79fa4c0-f25b-4a96-a345-fced1ef3eb5d"},"outputs":[{"data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABO0AAAPxCAYAAACmaFlwAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAADpCklEQVR4nOzdeVyU9f7+8WsGGECEcQEU933XwXI7WZptllbmaa+TZqdd2zynjlqnPfm2HLO9bLFSSltsL8tssdOipTLuCyJqqAgqA7LD3L8//DFHAgzwxnuGeT0fDx/BzYfhmtFL8s39uW+bYRiGAAAAAAAAAPgNu9UBAAAAAAAAAFTG0A4AAAAAAADwMwztAAAAAAAAAD/D0A4AAAAAAADwMwztAAAAAAAAAD/D0A4AAAAAAADwMwztAAAAAAAAAD/D0A4AAAAAAADwMwztAAAAAAAAAD/D0A4AAAA1+vXXX3XSSScpKipKNptNKSkppj3266+/LpvNpvT09ErHH3/8cXXp0kUhISFKTEyUJJWVlemuu+5S+/btZbfbdcEFF5iWI1jV9PrXxv333y+bzWZ+KAAA4MPQDgCAIPL888/LZrNp6NChVkcJOOnp6Zo0aZK6du2qiIgItW7dWiNGjNB9991ndbQGU1paqosvvlgHDhzQk08+qXnz5qljx47Vrv3uu+9ks9l8v8LDw9WqVSudeuqpmjlzprKysmr1Nb/66ivdddddGj58uObOnauZM2dKkl577TU9/vjjuuiii/TGG2/ojjvuMO15mu3zzz/X/fffX+v1p556qmw2m7p3717tx5csWeJ7Xd977z2TUgIAAH8XanUAAABw/CQnJ6tTp05asWKFUlNT1a1bN6sjBYTU1FQNHjxYkZGRuuaaa9SpUyft2bNHq1at0qOPPqoHHnjA6ogNYtu2bdqxY4defvllXXvttbX6nFtvvVWDBw9WeXm5srKy9NNPP+m+++7TrFmz9M477+i0007zrb3qqqt02WWXKTw83Hfsm2++kd1u16uvviqHw1HpeNu2bfXkk0+a9wQbyOeff67nnnuuToO7iIgIpaamasWKFRoyZEiljyUnJysiIkJFRUUmJwUAAP6MoR0AAEFi+/bt+umnn7Ro0SLdcMMNSk5O9tuzxPLz8xUVFWV1DJ8nn3xShw4dUkpKSpUzzfbt23dcsxzP16biuTVr1qzWn3PKKafooosuqnTM7XbrrLPO0oUXXqgNGzYoISFBkhQSEqKQkJAqXzMyMrLSwK7ieF1y/BnDMFRUVKTIyEjTHvNYdO3aVWVlZXr77bcrDe2Kior0wQcfaOzYsXr//fctTAgAAI43tscCABAkkpOT1bx5c40dO1YXXXSRkpOTq12Xk5OjO+64Q506dVJ4eLjatWunCRMmKDs727emqKhI999/v3r06KGIiAglJCTor3/9q7Zt2ybpf1slv/vuu0qPnZ6eLpvNptdff9137Oqrr1bTpk21bds2jRkzRtHR0bryyislST/88IMuvvhidejQQeHh4Wrfvr3uuOMOFRYWVsm9adMmXXLJJYqLi1NkZKR69uypu+++W5L07bffymaz6YMPPqjyeW+99ZZsNpt+/vnnGl+7bdu2qV27dtVuDY2Pj69y7IsvvtDIkSMVHR2tmJgYDR48WG+99ValNe+++65OPPFERUZGKjY2Vn/729+UkZFRac3RXhuv16vZs2erb9++ioiIUKtWrXTDDTfo4MGDNT6PI33zzTc65ZRTFBUVpWbNmmncuHHauHFjpa89cuRISdLFF18sm82mU089tVaP/Ucul0uzZ89WTk6Onn32Wd/xP15TzWazae7cucrPz/dtB61Y8+2332r9+vW+4xV/tmr7OnTq1EnnnnuuvvzySw0aNEiRkZF66aWXJB3+M3/77berffv2Cg8PV7du3fToo4/K6/X6Pr/iz+4TTzyhOXPmqGvXrgoPD9fgwYP166+/VnrdnnvuOd/zqfhVG5dffrkWLlxY6et+8sknKigo0CWXXFLt56xevVrnnHOOYmJi1LRpU51++un65Zdfqqxbv369TjvtNEVGRqpdu3Z6+OGHK32dI33xxRe+PxvR0dEaO3as1q9f/6f5lyxZopNPPlnNmjVT06ZN1bNnT82YMaNWzx0AAFTFmXYAAASJ5ORk/fWvf5XD4dDll1+uF154Qb/++qsGDx7sW3Po0CGdcsop2rhxo6655hqdcMIJys7O1scff6zff/9dsbGxKi8v17nnnqulS5fqsssu02233aa8vDwtWbJE69atU9euXeucraysTKNHj9bJJ5+sJ554Qk2aNJF0eLBVUFCgm266SS1bttSKFSv0zDPP6Pfff9e7777r+/w1a9bolFNOUVhYmK6//np16tRJ27Zt0yeffKJHHnlEp556qtq3b6/k5GSNHz++yuvStWtX/eUvf6kxX8eOHfX111/rm2++qbS9szqvv/66rrnmGvXt21fTp09Xs2bNtHr1ai1evFhXXHGFb82kSZM0ePBgJSUlKTMzU0899ZR+/PFHrV69utIZZTW9NjfccIPvcW699VZt375dzz77rFavXq0ff/xRYWFhNWb8+uuvdc4556hLly66//77VVhYqGeeeUbDhw/XqlWr1KlTJ91www1q27atZs6c6dvy2qpVq6M+96O56KKL9Pe//11fffWVHnnkkWrXzJs3T3PmzNGKFSv0yiuvSJIGDhyoefPm6ZFHHtGhQ4eUlJQkSerdu3edX4fNmzfr8ssv1w033KDrrrtOPXv2VEFBgUaOHKmMjAzdcMMN6tChg3766SdNnz5de/bs0ezZsytlfOutt5SXl6cbbrhBNptNjz32mP76178qLS1NYWFhuuGGG7R7924tWbJE8+bNq9NrdMUVV+j+++/Xd9995/tz9tZbb+n000+vdji8fv16nXLKKYqJidFdd92lsLAwvfTSSzr11FP1/fff+65duXfvXo0aNUplZWWaNm2aoqKiNGfOnGrPMpw3b54mTpyo0aNH69FHH1VBQYFeeOEFnXzyyVq9erU6depUbfb169fr3HPP1YABA/Tggw8qPDxcqamp+vHHH+v0GgAAgCMYAACg0fvtt98MScaSJUsMwzAMr9drtGvXzrjtttsqrbv33nsNScaiRYuqPIbX6zUMwzBee+01Q5Ixa9asGtd8++23hiTj22+/rfTx7du3G5KMuXPn+o5NnDjRkGRMmzatyuMVFBRUOZaUlGTYbDZjx44dvmMjRowwoqOjKx07Mo9hGMb06dON8PBwIycnx3ds3759RmhoqHHfffdV+TpHWrdunREZGWlIMhITE43bbrvN+PDDD438/PxK63Jycozo6Ghj6NChRmFhYbVZSkpKjPj4eKNfv36V1nz66aeGJOPee+/1Havptfnhhx8MSUZycnKl44sXL672+B8lJiYa8fHxxv79+33H3G63YbfbjQkTJviOVfw+vvvuu0d9vNqudblcRvPmzX3vz50715BkbN++3Xds4sSJRlRUVJXPHTlypNG3b99Kx+ryOnTs2NGQZCxevLjS2oceesiIiooytmzZUun4tGnTjJCQEGPnzp2GYfzvz27Lli2NAwcO+NZ99NFHhiTjk08+8R2bPHmyUZf/zT7yuQ0aNMj4+9//bhiGYRw8eNBwOBzGG2+8Ue3re8EFFxgOh8PYtm2b79ju3buN6OhoY8SIEb5jt99+uyHJWL58ue/Yvn37DKfTWen1z8vLM5o1a2Zcd911lfLt3bvXcDqdlY7fd999lZ7jk08+aUgysrKyav28AQDA0bE9FgCAIJCcnKxWrVpp1KhRkg5v27v00ku1YMEClZeX+9a9//77crlcVc5Gq/icijWxsbG65ZZbalxTHzfddFOVY0eeCZSfn6/s7GyddNJJMgxDq1evliRlZWVp2bJluuaaa9ShQ4ca80yYMEHFxcWV7r65cOFClZWV6W9/+9tRs/Xt21cpKSn629/+pvT0dD311FO64IIL1KpVK7388su+dUuWLFFeXp6mTZumiIiIarP89ttv2rdvn26++eZKa8aOHatevXrps88++9PX5t1335XT6dSZZ56p7Oxs368TTzxRTZs21bffflvjc9mzZ49SUlJ09dVXq0WLFr7jAwYM0JlnnqnPP//8qK/FsWjatKny8vJMe7y6vg6dO3fW6NGjqzzGKaecoubNm1d6jDPOOEPl5eVatmxZpfWXXnqpmjdv7nv/lFNOkSSlpaWZ8pyuuOIKLVq0SCUlJXrvvfcUEhJSbR/Ly8v11Vdf6YILLlCXLl18xxMSEnTFFVfov//9r3JzcyUdvjHGsGHDKl0rLy4uzrfVusKSJUuUk5Ojyy+/vNJrERISoqFDhx71z1XF2aEfffRRjdtuAQBA3TC0AwCgkSsvL9eCBQs0atQobd++XampqUpNTdXQoUOVmZmppUuX+tZu27ZN/fr1O+rjbdu2TT179lRoqHlX2QgNDVW7du2qHN+5c6dvuNS0aVPFxcX5rrPm8Xgk/W9Y8me5e/XqpcGDB1e6ll9ycrKGDRtWq7vo9ujRQ/PmzVN2drbWrFmjmTNnKjQ0VNdff72+/vprSfJd0+9oWXbs2CFJ6tmzZ7UZKz5eobrXZuvWrfJ4PIqPj1dcXFylX4cOHTrqzTGO9vV79+6t7Oxs5efn1/j5x+LQoUOKjo427fHq+jp07ty52sdYvHhxlc8/44wzJFW90cgfB8MVA7zaXkvwz1x22WXyeDz64osvlJycrHPPPbfa1ywrK0sFBQU1/j56vV7t2rVL0uHf8+7du1dZ98fP3bp1qyTptNNOq/J6fPXVV0f9c3XppZdq+PDhuvbaa9WqVStddtlleueddxjgAQBwDLimHQAAjdw333yjPXv2aMGCBVqwYEGVjycnJ+uss84y9WvWdMbdkWf1HSk8PFx2u73K2jPPPFMHDhzQv/71L/Xq1UtRUVHKyMjQ1VdfXa9hwIQJE3Tbbbfp999/V3FxsX755ZdKN0aojZCQEPXv31/9+/fXX/7yF40aNUrJycm+IY/ZqnttvF6v4uPja7yZSFxcXINkORalpaXasmXLnw5X66Kur0N113Dzer0688wzddddd1X7GD169Kj0/h/vdlvBMIzaRP5TCQkJOvXUU/Wf//xHP/7443G9Y2xFp+bNm6fWrVtX+fjRBvWRkZFatmyZvv32W3322WdavHixFi5cqNNOO01fffVVja8bAACoGUM7AAAaueTkZMXHx/vuaHmkRYsW6YMPPtCLL76oyMhIde3aVevWrTvq43Xt2lXLly9XaWlpjTc7qDj7KCcnp9LxP55FdjRr167Vli1b9MYbb2jChAm+40uWLKm0rmJr4J/llg6fxTR16lS9/fbbKiwsVFhYmC699NJaZ/qjQYMGSTq85VSS7yYc69atq/HsvYo70G7evLnKTS02b95c7R1q/6hr1676+uuvNXz48GoHUUdz5Nf/o02bNik2NlZRUVF1eszaeO+991RYWFhle+qxOJbX4cjHOHTokKlD12PZJi4d3iJ77bXXqlmzZhozZky1a+Li4tSkSZMafx/tdrvat28v6fDvecVZdEf64+dW/PmNj4+v1+tht9t1+umn6/TTT9esWbM0c+ZM3X333fr2228bbKgNAEBjxvZYAAAascLCQi1atEjnnnuuLrrooiq/pkyZory8PH388ceSpAsvvFBut1sffPBBlceqOJPowgsvVHZ2drVnqFWs6dixo0JCQqpcD+z555+vdfaKM3OOPIPJMAw99dRTldbFxcVpxIgReu2117Rz585q81SIjY3VOeeco/nz5ys5OVlnn322YmNj/zTLDz/8oNLS0irHK67/VrHN8KyzzlJ0dLSSkpJUVFRUbZZBgwYpPj5eL774ooqLi30f/+KLL7Rx40aNHTv2T/NccsklKi8v10MPPVTlY2VlZVWGpUdKSEhQYmKi3njjjUrr1q1bp6+++qrGIdGxcLvduv3229W8eXNNnjzZtMc9ltfhyMf4+eef9eWXX1b5WE5OjsrKyuqcq2LoWZuvX52LLrpI9913n55//nk5HI5q14SEhOiss87SRx99pPT0dN/xzMxMvfXWWzr55JMVExMjSRozZox++eUXrVixwrcuKyuryhmKo0ePVkxMjGbOnFntn/esrKwaMx84cKDKscTEREmq9OccAADUHmfaAQDQiH388cfKy8vT+eefX+3Hhw0bpri4OCUnJ+vSSy/VnXfeqffee08XX3yxrrnmGp144ok6cOCAPv74Y7344otyuVyaMGGC3nzzTU2dOlUrVqzQKaecovz8fH399de6+eabNW7cODmdTl188cV65plnZLPZ1LVrV3366adHvSbWH/Xq1Utdu3bVP//5T2VkZCgmJkbvv/9+tdcOe/rpp3XyySfrhBNO0PXXX6/OnTsrPT1dn332mVJSUiqtnTBhgi666CJJqnbYU51HH31UK1eu1F//+lcNGDBAkrRq1Sq9+eabatGihW6//XZJUkxMjJ588klde+21Gjx4sK644go1b95cbrdbBQUFeuONNxQWFqZHH31UkyZN0siRI3X55ZcrMzNTTz31lDp16qQ77rjjT/OMHDlSN9xwg5KSkpSSkqKzzjpLYWFh2rp1q95991099dRTvudYnccff1znnHOO/vKXv+jvf/+7CgsL9cwzz8jpdOr++++v1WtSkx9++EFFRUUqLy/X/v379eOPP+rjjz+W0+nUBx98UO22y/o61tdBku688059/PHHOvfcc3X11VfrxBNPVH5+vtauXav33ntP6enptRrsHunEE0+UJN16660aPXq0QkJCdNlll9X682v7+/Dwww9ryZIlOvnkk3XzzTcrNDRUL730koqLi/XYY4/51t11112aN2+ezj77bN12222KiorSnDlz1LFjR61Zs8a3LiYmRi+88IKuuuoqnXDCCbrssssUFxennTt36rPPPtPw4cNr3E7+4IMPatmyZRo7dqw6duyoffv26fnnn1e7du108skn1/q5AwCAI1h341oAANDQzjvvPCMiIsLIz8+vcc3VV19thIWFGdnZ2YZhGMb+/fuNKVOmGG3btjUcDofRrl07Y+LEib6PG4ZhFBQUGHfffbfRuXNnIywszGjdurVx0UUXGdu2bfOtycrKMi688EKjSZMmRvPmzY0bbrjBWLdunSHJ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qak1ru3Zs6datmwpScrOztaWLVtqXNutWzfFx8dLkg4cOKBNmzbVuLZLly5q3bq1JMnj8Wj9+vXVrlu5cqU27tqo9le1l81uU2lJqQrLCiWp2i598MEHuvTSSyVJ+fn5crvdNWZo27atOnbsKEkqKirSqlWralzbunVrdenSRdLhwcdvv/1W49r4+Hh169ZNklReXq7ly5fXuLZly5bq2bOnJMkwDP388881rm3evDl/R4i/I45U178jVq5cqdQ9qWr515bKycmR4TVUXFYsm90me55doaGhsofYlTA8QanvpOrHH3/UqFGjanxMAP9T8X0VAAA0LpYO7RYuXKipU6fqxRdf1NChQzV79myNHj1amzdv9v3j+0j33HOP5s+fr5dfflm9evXSl19+qfHjx+unn37SwIEDJUkHDx7U8OHDNWrUKH3xxReKi4vT1q1bg+p/Zn755ReVtiz1ncVgs9sUFR+l9TvWSzmV1+YrX88//7wOHjyoe++913f88ccfr/EshwEDBuiRRx7xvf/kk08qLy+v2rU9evTQf/7zH9/7zz77rLKzs6td26FDBz333HO+91966SX9/vvv1a5t1aqVXnnlFd/7c+fOrXH443Q6NX/+fN/78+fPr3FIExERoXfffdf3/sKFC7Vy5cpq19psNn388ce+9xctWqSffvqp2rWS9P777/susP7JJ5/o22+/rXFtcnKy7x/kixcv1hdffFHj2tdee01xcXGSpG+++UYffPBBjWuff/553z/Ily1bpgULFtS4dtasWerevbsk6eeff9Ybb7xR49qkpCT169dP0uGhy0svvVTj2vvvv983THG73Xr66adrXDtt2jQNHz5c0uHhyGOPPVbj2jvuuEOnnXaaJGnbtm1KSkqqce1NN92kMWPGSJJ27NhR49rU1FQdanPI16XikmLtyvn/Q4ycymvzlV9paJednX3UDBdeeKGuvvrqww+Vk3PUtWPHjtWNN94oSSooKDjq2jPOOEO33XabpP/9oKMmJ598sv71r3/53j/a2sGDB/N3hPg74kh1/Tui4ntTsb1YO1L/MOA78L83e/ToodKWpfrll18UEhKil19+WZGRkYqIiFBERIQiIyN9748dO9aXYc+ePVq3bl2VtRX/jY6O9r1mQGNit9t9P9gBAACNi6VDu1mzZum6667TpEmTJEkvvviiPvvsM7322muaNm1alfXz5s3T3Xff7fvH9k033aSvv/5a//nPf3z/4Hr00UfVvn17zZ071/d5nTt3PmqO4uLiSmd21HSGRaDIyc2RParqzufoptFVjpU1K1OMI0bt27evdLxXr141nhlTcXZQhZ49eyo/P7/atR06dKj0fvfu3X3/ePyjijOfKnTt2lXR0VUzS/KdfVWhc+fONf5jrOJMkAodO3as8QyhirNRKrRv377GM3lsNlul99u1a1fpTKSjrW/Tps1R14aEhPjeTkhIOOraI593fHz8Udce+fzi4uKOujYy8n9b11q2bHnUtRX/yJekFi1aHHXtkb8fzZo1O+raI3//Y2JijrrW6XRW+hpHW3vkEL9JkyY1rt2XvU8F0f/7/Q8JCam2R9LhLumIPxLh4eFHzXDkDybCwsKOuvbIboSEhBx1bZs2bXxv22y2o65t165dpfePtpa/Iw7j74j/qevfERXfmxxhjko98nq9KveWy1t++L8h9hDZm9jlyfXo0KFDysnJUU5OTrWP+5e//MX39qZNm476Q4CpU6f6ztxbvXq1nn/++SpDwIr/nnrqqerVq5ekw2furl+/vsoQ8MjhINcQAwAAQEOw7EYUJSUlatKkid577z1dcMEFvuMTJ05UTk6OPvrooyqf07JlSz322GP6+9//7jv2t7/9Tf/973+Vnp4uSerTp49Gjx6t33//Xd9//73atm2rm2++Wdddd12NWe6//3498MADVY4H6o0okpKS9Povr6vHZT3+dO2WBVt09bCrNX369OOQDAgsdAkwT336dMsttyg7O1uFhYUqKipSYWFhpbeHDx+uhIQESYe3S3/88ceVPl5UVKSioiIVFBRoxowZGjZsmCTp+++/1xNPPFHj1z/yzN1ff/1VDz74YI1rb7zxRo0dO1bS4W3NTz/9dLVnBUZGRmrIkCHq06ePJOnQoUPauHFjtWcFRkREVBrMAgAAwHpW3IjCsjPtsrOzVV5erlatWlU63qpVqxqvRTV69GjNmjVLI0aMUNeuXbV06VItWrRI5eXlvjVpaWl64YUXNHXqVM2YMUO//vqrbr31VjkcDk2cOLHax50+fbqmTp3qez83N7fKWSWBZNiwYUr+LFmFBwoV2SJShteQJ90j6fAd+iquw1V4oFBh+8N8/4gBUBldAsxTnz41bdq0ypmQNUlMTKx0zcMj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Bhyvp+OXbDabevXq5XsbQP3QJcA89AkwB10CzHG8u9S5c2dFR0crLy9PW7duVe/evRv8awLHC9+bzGMzLL5dzdChQzV48GA9++yzkiSv16v27dvrlltu0bRp06qsb9Omje6++25NnjzZd+zCCy9UZGSk5s+f7zt26NAhnXDCCXr++ef18MMPKzExUbNnz65VptzcXDmdTnk8HsXExBzbEwQAAAAA4A8WLFggu92uUaNGKS4uzuo4AP6EFbMiS7fHlpSUaOXKlTrjjDN8x+x2u8444wz9/PPP1X5OcXGxIiIiKh2LjIzUf//730rHJk+erLFjx1Z67JoUFxcrNze30i8AAAAAABrKZZddpksuuYSBHYAaWTq0y87OVnl5uVq1alXpeKtWrbR3795qP2f06NGaNWuWtm7dKq/XqyVLlmjRokXas2ePb82CBQu0atUqJSUl1SpHUlKSnE6n71f79u3r/6T8kGEYyszMVGZmpiw+sRIIaHQJMA99AsxBlwBz0CXAPPTJPH5xI4q6eOqpp9S9e3f16tVLDodDU6ZM0aRJk2S3H34qu3bt0m233abk5OQqZ+TVZPr06fJ4PL5fu3btasincNwZhqHff/9dv//+O4UBjgFdAsxDnwBz0CXAHFZ1KTc3V//973+Vnp5+3L4m0ND43mQeS4d2sbGxCgkJUWZmZqXjmZmZat26dbWfExcXpw8//FD5+fnasWOHNm3apKZNm6pLly6SpJUrV2rfvn064YQTFBoaqtDQUH3//fd6+umnFRoaqvLy8iqPGR4erpiYmEq/AAAAAABoSK+//roeffRRLV261OooAPyQpUM7h8OhE088sdJfUF6vV0uXLtVf/vKXo35uRESE2rZtq7KyMr3//vsaN26cJOn000/X2rVrlZKS4vs1aNAgXXnllUpJSVFISEiDPicAAAAAAGojMTFRkuR2u60NAsAvhVodYOrUqZo4caIGDRqkIUOGaPbs2crPz9ekSZMkSRMmTFDbtm1916dbvny5MjIylJiYqIyMDN1///3yer266667JEnR0dHq169fpa8RFRWlli1bVjkOAAAAAIBVXC6XJGn79u3yeDxyOp0WJwLgTywf2l166aXKysrSvffeq7179yoxMVGLFy/23Zxi586dvuvVSVJRUZHuuecepaWlqWnTphozZozmzZunZs2aWfQMAAAA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rfOMFsAf0CXAPPQJMAddAsxBlxpexSCHLbKNH30yR51ewbKyMs2cOVPXXHONlixZ0lCZAAAAAABAI+NyufThhx8qJSXF6ihAQKjTmXahoaF67LHHVFZW1lB50AAMw9DOnTu1c+dOGYZhdRwgYNElwDz0CTAHXQLMQZeOj379+ikkJET79u3T3r17rY6DBkKfzFPncxVPP/10ff/99+rUqVMDxEFDMAxDWVlZkqR27drJZrNZnAgITHQJMA99AsxBlwBz0KXjIyIiQldccYXi4+MVExNjdRw0EPpknjoP7c455xxNmzZNa9eu1YknnqioqKhKHz///PNNCwcAAAAAABqPSy65xOoIQMCo89Du5ptvliTNmjWrysdsNpvKy8uPPRUAAAAAAAAQxOp891iv11vjLwZ2AAAAAADgaNLS0vTee+8pIyPD6iiAX+P+uwAAAAAA4LiZN2+efvvtN4WEhGj8+PFWxwH8Vp3PtJOk77//Xuedd566deumbt266fzzz9cPP/xgdjYAAAAAANDIuFwuSZLb7bY4CeDf6jy0mz9/vs444ww1adJEt956q2699VZFRkbq9NNP11tvvdUQGQEAAAAAQCORmJgoSVq3bp3KysqsDQP4MZthGEZdPqF37966/vrrdccdd1Q6PmvWLL388svauHGjqQGtkJubK6fTKY/H02huQ11SUiJJcjgcFicBAhtdAsxDnwBz0CXAHHTp+DEMQ1dddZU8Ho+SkpLUr18/qyPBZI2xT1bMiup8pl1aWprOO++8KsfPP/98bd++3ZRQMJ/D4WhUZQGsQpcA89AnwBx0CTAHXTp+bDYbW2QbOfpkjjoP7dq3b6+lS5dWOf7111+rffv2poQCAAAAAACNF0M74M/V+e6x//jHP3TrrbcqJSVFJ510kiTpxx9/1Ouvv66nnnrK9IA4doZh+G6l3bZtW9lsNosTAYGJLgHmoU+AOegSYA66dPxVXNdux44dKikp4aysRoQ+mafOQ7ubbrpJrVu31n/+8x+98847kg5f527hwoUaN26c6QFx7AzDUGZmpiSpTZs2FAaoJ7oEmIc+AeagS4A56NLxFx8fr8cee0zdunVTWFiY1XFgIvpknjoP7SRp/PjxGj9+vNlZAAAAAABAkOjdu7fVEQC/Vudr2v36669avnx5lePLly/Xb7/9ZkooAAAAAAAAIJjV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9ttvN3v37jXG/N/6cezPsGHDjDF21ndjjHnzzTdN48aNTWRkpGnWrJl57733Am6XZN58803Tt29fExcXZ4YNG1bievvzzz+b7t27m9jYWFOlShVz0UUXmV27dhljjPnmm29MRkaGSU5ONtWqVTOXXnqpWblypf++a9asMZLMokWLAi4PGTLEJCQkmK1bt/qXdbvd/vfAmJI/G/75z3+auLi4kv4kgBW7d+82kszMmTNLvH3x4sVGkpk1a1bA9UXZycrKMsYY88ILL5iwsDCzcOHCYo+Rn59f4mcHgteJ9t2mT59uJJlx48YZY069T2LMyfepSrsPd/yyxhizbt0686c//cnEx8ebxMREc80115gtW7b4by/aj3rvvfdMw4YNTVJSkrn22mtNXl5esdd1/L5gUT6+/vpr06FDBxMZGWlmzJhhCgsLzYgRI0xaWpqJiYkx7dq1Mx9//HHAY2VmZpqLL77YxMfHm1q1apnrr7/ebN++3X97abbHxhzd5n366af+yw8//LBp2rSpiY2NNY0aNTJDhw41+fn5/ttt7P+VtK2fMWNGifvKn332mWnfvr2Jjo42jRo1Mk8//XTAPnxJ2+xgVlJmrrzyStO+fXtjjDE7duwwf/3rX03dunVNbGysadOmjfnggw8Clu/evbu5++67zZAhQ0zVqlVN7dq1i71vOTk55g9/+IOJjo42LVu2NN99912xdWXx4sWmR48eJiYmxlSrVs0MHjzYvz93bK3PPfecqVWrlklOTjbPPPOMOXLkiHnooYdM1apVTb169cz48eMDnvv45zlWYWGheeaZZ0y9evVMVFSUcbvd5ptvvvHfXrQ/9dFHH5kLLrjAREdHmwkTJhhjjBk3bpxp0aKFiY6ONs2bNzdjxozx3+/w4cPmzjvvNCkpKSY6Oto0aNDAjBgxwhhz9DPh2HW1YcOGxpjSb8+O32977733TMeOHU1CQoKpXbu2ue666wL2+3bt2mX69etnatSoYWJiYkyTJk3879HJ6jz+vStpf/r4/U9jTv1Z0r17d3PnnXeae++911SvXt1ceOGFJf5tgtmxuXvhhRdMTEyMmTp1asDtl112mWnRooUZMmSI//pPP/3U3wsoMmvWLNOtWzcTExNj6tevb+6+++6Az+njt0FZWVkmIyPDn8Vp06YF/J2L/qZTpkwxF154oYmNjTXt2rUzc+bM8T9G0Wfrp59+apo0aWKio6PNRRddZNavXx9QW1m+I51sfd2wYYOJiooy9913X4nva9G26PjP/pUrV5o//elPplatWiY+Pt6ce+65Ztq0aQH3HTNmjP+11KpVy1x11VX+2z7++GPTpk0b/2dTz549/e/xsX/LAQMGlJjt4zN7qu+gRfV//vnnpmXLliY8PNysWbOmxNd8PJp2/2vjxo0mLi7O3HHHHSYrK8t8+umnpkaNGgEbp5tvvtk0bNjQfP/99yYzM9NcccUVJjEx8YRNu48//tgkJSWZr7/+2qxbt87MmzfPvPPOO8YYY3bu3Gnq169vnn32WbN582azefNmY0zxlfHLL7804eHh5qmnnjLLli0zHo8n4EP32JXF5/OZn376ycTFxZlrr702oO6uXbuan376yaxcudK89NJLJjo62uTk5BhjjjYVwsLCzEsvvWSys7PNmDFjTLVq1Yo17eLj483FF19sFi5caLxerzHGmF69epm+ffua+fPnm5ycHPPggw+a6tWrm507dxpjjGndurW5/vrrTVZWlsnJyTH//ve//TvQl156qendu7dZvHixWbVqlfnPf/5jfvzxR2NM8abdb7/9ZsLCwsyzzz5rsrOzzYQJE0xsbKx/A1v03lerVs2MGTPGrFixwowcOdKEhYWZ5cuXn2SNwNm2c+dO43K5Atbjkrzyyivmhx9+MGvWrDHTp083zZs3N7fffrsx5ujOyOjRo01SUpI/P0U7gDbW96lTp5rIyEgzZswYk52dbV5++WUTHh5ufvjhB/8ykkytWrXM+PHjzapVq8y6deuKrbeLFi0y0dHR5vbbbzcej8csWbLEvP766/6dnE8++cRMmTLFrFixwixatMj07dvXtG3b1hQWFhpjTty0W7hwoUlPTzd33nmnv55TNe127txp+vbta3r06FH6PxZwmo4cOWISEhLMfffdZw4dOlTiMuedd54ZOHBgwHU33nij6dq1q/9yu3btzEUXXVSutaLyONk/XN1ut7nkkkuMMafeJznVPlVp9+GOX7awsNCkp6ebbt26md9++8388ssvpmPHjqZ79+7+5YcNG2YSEhLMlVdeaTIzM81PP/1kUlJSzOOPP17sNZ2oadeuXTvz3XffmZUrV5qdO3eav//976ZFixbm22+/NatWrTITJkww0dHR/qb57t27Tc2aNc1j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M9K7d281bNhQjRs31g033KB//etf/m2C2+1Wz5491bZtW11zzTUaN27cGZ1nsDTfQaWj5209/nO1NGjalaPU1FRlZ2frzTffVGxsrO644w5dcMEFp3Wi09jY2FMuk5ycrCZNmui8887Tv//9b73xxhv6/vvvJR1dmcPDw7VgwYKAjVpWVpZeffXV03o9x25wix67Tp06AY/r8XiUnZ2tIUOGSJKefvppLV26VJdeeql++OEHtWrVSp9++qkk6eabb9bq1at1ww03KDMzU+eee65ef/3106rpeJGRkQGXXS6X1ZnlcOaaNm0ql8ul5cuXn3CZtWvX6rLLLlO7du00ZcoULViwQGPGjJF08hPb2lzfS+P4TBzvVPnt27evdu3apXHjxmnevHmaN2+epNKfvPf555/X5MmTtWjRohJvL/psaNKkiTIyMvTuu+9qxYoVmjx5cqkeHyirmJgY9e7dW08++aTmzJmjm266yX8C9KSkJF199dX+CSkmTJigv/zlL0pISPDfv1mzZif9jACKZGVlqVGjRqXaJynNPlURG/twxzvTfZRjtzlFXwa/+uqrgNe7bNkyffLJJ/5l+vbtW+w9WbFihS644IJSbY9LMnfuXPXv319//OMf9eWXX2rRokV64oknArZdZ3P/b9++fXrmmWcCXmNmZqZWrFihmJiYEt+/UBAfH68mTZrI7XZr/Pjxmjdvnt59911J0ksvvaRXX31VjzzyiGbMmCGPx6M+ffoU2/84W/vVJT1PaZ47JSXFv5/TpEmT0/4bl5SpcePGBaxLS5Ys0S+//CJJ6tChg9asWaPhw4fr4MGD+stf/qKrr776pM9Rlu3Z/v371adPHyUlJelf//qX5s+f789P0d/okksu0bp163T//fdr06ZN6tmzp3/CmrLUeTKn+iwpEmoZK0m9evU0c+ZM/f7777r44otP+I/yCy64QH369NFjjz1W7LZ9+/bp1ltvDXivvV6vVqxYoXPOOeeM6js2V0WNsvLI9PHrwsnW12bNmik3N1ebN28+red46KGH9Omnn2rEiBGaNWuWPB6P2rZt689IYmKiFi5cqA8//FB16tTRU089JbfbrT179ig8PFzTpk3TN998o1atWun1119X8+bNS2yKlkZpv4PGxsaWqUFJ0+5/tWzZUnPnzg34b8js2bOVmJio+vXrq3HjxoqMjNT8+fP9t+fm5p5yyvnY2Fj17dtXr732mmbOnKm5c+cqMzNT0tFO67GjxErSrl07TZ8+vdSvIyEhQffee68eeughGWPUvn17FRYWatu2bQEbtSZNmvi78c2bNw94XZKKXS5Jhw4dtGXLFkVERBR77Bo1aviXa9asme6//3599913uvLKKwNmDkxNTdVtt92mqVOn6sEHH9S4ceNKfK6WLVtq9uzZAdfNnj1bzZo1U3h4eKnfHzivWrVq6tOnj8aMGaP9+/cXu33Pnj1asGCBfD6fXn75ZXXp0kXNmjXTpk2bApYrKT+21vcTrW+tWrU6rdd6svzu3LlT2dnZGjp0qHr27KmWLVue9n94OnXqpCuvvFKPPvpoqZYvysrBgwdP63mAM9WqVauAvA8aNEg///yzvvzyS82ZM0eDBg0KWL5fv376/vvvS2xIHzlypMTPDoSeH374QZmZmbrqqqtKtU9yuvtUJ9uHO1bLli21YcMGbdiwwX/dsmXLtGfPntPebpRWq1atFB0drfXr1xd7vUUj/jp06KClS5cqLS2t2DLx8fGl2h6XZM6cOWrYsKGeeOIJnXvuuWratKnWrVtXbDkb+3+l0aFDB2VnZxd7jU2aNAkYvRXKwsLC9Pjjj2vo0KE6ePCgZs+ercsvv1zXX3+93G63GjdufMrvNMcrWu+P/aJd1Nw6dhmv1xuwfs2ePVthYWEnPVrpTCQlJalu3bqnvR9Xu3Zt1a1bV6tXry62HjVq1Cjg8a+99lqNGzdOkydP1pQpU7Rr1y5JRxsix++blmV7tnz5cu3cuVPPP/+8/vCHP6hFixYljsqtWbOmBgwYoPfff1+jR4/WO++8U6o6T9epPksQqGHDhvrxxx+1ZcuWkzbunn/+ef3nP//R3LlzA67v0KGDli1bVuJnWlRUVLHHad68uTZs2KCtW7f6ryvNd/mSFBQU6LfffvNfzs7O1p49e9SyZUtJZ/Yd6UTr69VXX62oqCi9+OKLJd7vRNui2bNn66abbtIVV1yhtm3bKiUlRWvXrg1YJiIiQr169dKLL76oxYsXa+3atfrhhx8kHW1aZmRk6JlnntGiRYsUFRXlb46frtJ8Bz0TIbkly83NLfafgltuuUUbNmzQ3XffreXLl+vzzz/XsGHD9MADDygsLEyJiYkaMGCAhgwZohkzZmjp0qUaNGiQwsLCTtgtnThxot59910tWbJEq1ev1vvvv6/Y2Fg1bNhQ0tHDJH766Sf9/vvv2rFjR4mPMWzYMH344YcaNmyYsrKylJmZqRdeeOGkr+/WW29VTk6OpkyZombNmql///668cYbNXXqVK1Zs0a//vqrRo4cqa+++kqSdPfdd+vrr7/WqFGjtGLFCr399tv65ptvTtkF7tWrl84//3z9+c9/1nfffae1a9dqzpw5euKJJ/Tbb7/p4MGDuuuuuzRz5kytW7dOs2fP1vz58/2hv++++/Tf//5Xa9as0cKFCzVjxgz/bcd78MEHNX36dA0fPlw5OTmaNGmS3njjDX+HHpXLmDFjVFhYqE6dOmnKlClasWKFsrKy9Nprr+n8889XkyZNdOTIEb3++utavXq1/vnPf2rs2LEBj5GWlqZ9+/Zp+vTp2rFjhw4cOGBtfR8yZIgmTpyot956SytWrNCoUaM0derU017fHnvsMc2fP1933HGHFi9erOXLl+utt97Sjh07VLVqVVWvXl3vvPOOVq5cqR9++EEPPPDAab+Xzz33nH744YeAw0yKHDhwQFu2bNGWLVvk9Xp1++23KyYmRhdddNFpPw9QGjt37tT/+3//T++//74WL16sNWvW6OOPP9aLL76oyy+/3L/cBRdcoCZNmujGG29UixYt/Kd0KHLfffcpIyNDPXv21JgxY+T1erV69Wr9+9//VpcuXbRixYqz/dLgsMOHD2vLli36/ffftXDhQo0YMUKXX365LrvsMt14442n3CeRTm+f6lT7cMfq1auX2rZtq/79+2vhwoX69ddfdeONN6p79+7ldkhmYmKiHnroId1///2aNGmSVq1apYULF+r111/XpEmTJEl33nmndu3apeuuu07z58/XqlWr9N///lcDBw70NxZOtT0uSdOmTbV+/Xp99NFHWrVqlV577bWALzo29/9K46mnntJ7772nZ555RkuXLlVWVpY++ugjDR06tMyPGYyuueYahYeHa8yYMWratKmmTZumOXPmKCsrS7feemvAF/7S6NWrl5o1a6YBAwbI6/Vq1qxZeuKJJwKW6d+/v2JiYjRgwAAtWbJEM2bM0N13360bbrhBtWvXtvnyAgwZMkQvvPCCJk+erOzsbD366KPyeDy69957T3q/Z555RiNHjtRrr72mnJwcZWZmasKECRo1apQkadSoUfrwww+1fPly5eTk6OOPP1ZKSoqqVKki6ei+6fTp07Vlyxb/P2LLsj1r0KCBoqKi/PvBX3zxhYYPHx6wzFNPPaXPP/9cK1eu1NKlS/Xll1/6c3SqOk9XaT5LECg1NVUzZ87Utm3b1KdPH+Xl5RVbpmi78dprrwVc/8gjj2jOnDm66667/CMaP//8c911110lPlfv3r11zjnnaMCAAVq8eLFmz57t//w73VFdkZGRuvvuuzVv3jwtWLBAN910k7p06eI/3Las35FOtr6mpqbqlVde0auvvqpBgwbpxx9/9G87br311mLrfpGmTZtq6tSp/pGI/fr1Cxg1+OWXX+q1116Tx+PRunXr9N5778nn86l58+aaN2+eRowYod9++03r16/X1KlTtX379jJvi0rzHfSMnPZZ8Cq546fsLfoZNGiQmTlzpjnvvPNMVFSUSUlJMY888kjAdPF5eXmmX79+Ji4uzqSkpJhRo0aZTp06mUcffdS/zLEnhfz0009N586dTVJSkomPjzddunQJmEVm7ty5pl27dv4TxBpT8gkWp0yZYtLT001UVJSpUaOGufLKK/23neikpbfeeqtp3bq1KSwsNPn5+eapp54yaWlpJjIy0tSpU8dcccUVZvHixf7l33nnHVOvXj0TGxtr/vznP5u///3vJiUlxX/7sGHDjNvtLvY8eXl55u677zZ169Y1kZGRJjU11fTv39+sX7/eHD582Pz1r381qampJioqytStW9fcdddd/hNo3nXXXeacc84x0dHRpmbNmuaGG24wO3bsMMYUPxGxMUdPbt6qVSsTGRlpGjRoYF566aWAWkqa2OP4E6ui4ti0aZO58847TcOGDU1UVJSpV6+e+dOf/uQ/2fSoUaNMnTp1TGxsrOnTp4957733iq0Tt912m6levbp/inpjjJX13ZjSTWd+/MmGS1pvZ86cabp27Wqio6NNlSpVTJ8+ffy3T5s2zbRs2dJER0ebdu3amZkzZ5Z40tiSJqI41i233BLwHhhz9LPh2M+4qlWrmu7duwfM7gTYdujQIfPoo4+aDh06mOTkZBMXF2eaN29uhg4dag4cOBCw7IgRI4wk8+KLL57wsUaOHGnatm1rYmJiTLVq1UxGRoaZOHFiwLYZwe/YfbeIiAhTs2ZN06tXLzN+/PiAk9efbJ+kyMn2qU5nH+74fY5169aZP/3pTyY+Pt4kJiaaa665xn+ifWNK3o8q6cTWxpx4Iopjty3GHJ1wa/To0aZ58+YmMjLS1KxZ0/Tp08c/E6sxxuTk5JgrrrjCVKlSxcTGxpoWLVqY++67L+AE9afaHhtTfJs3ZMgQU716dZOQkGCuvfZa88orr/hrtrn/V5qJKIwx5ttvvzVdu3Y1sbGxJikpyXTq1Clgtt+SttnB7ESTt4wcOdLUrFnTbNy40Vx++eUmISHB1KpVywwdOtTceOONAfcp6TvG5ZdfHjDza3Z2tunWrZuJiooyzZo1M99++22x93rx4sWmR48e/s/xwYMH+ydTOFGtJT338Zk72d+0sLDQPP3006ZevXomMjLSuN1u88033/hvP9H+lDHG/Otf//J/RlStWtVccMEF/sla3nnnHZOenm7i4+NNUlKS6dmzp1m4cKH/vl988YVp0qSJiYiICMh2abZnx7/mDz74wKSlpZno6Ghz/vnnmy+++KLY5BAtW7Y0sbGxplq1aubyyy83q1evLlWdx793p5qIwphTf5acaiKNUFDSurxx40bTtGlT06VLF3PFFVcUu33NmjX+ySuO9euvv5revXubhIQEEx8fb9q1axcwucrxecjKyjIZGRkmKirKtGjRwvznP/8xksy3337rf57j/6bHf74WfbZOmTLFNG7c2ERHR5tevXoVm227LN+RTra+Fpk2bZrp06ePfzKzFi1amIceesg/q+zxn/1r1qwxPXr0MLGxsSY1NdW88cYbAevhrFmzTPfu3U3VqlVNbGysadeunZk8ebIxxphly5aZPn36mJo1a5ro6GjTrFkz/wQWxpz+RBTGnPo7aGkm0jgRlzGc7bms9u/fr3r16unll18udmhPZTd48GAtX75cs2bNcroUoNyxvgMAAAAIBrNnz1a3bt20cuXKMz4PHpwX4XQBlcmiRYu0fPlyderUSbm5uXr22WclKeCQn8rqH//4h3r37q34+Hh98803mjRpkt58802nywLKBes7AAAAgGDw6aefKiEhQU2bNtXKlSt17733KiMjg4ZdkKBpd5r+8Y9/KDs7W1FRUerYsaNmzZoVMOlCZfXrr7/qxRdf1N69e9W4cWO99tpruvnmm50uCygXrO8AAAAAgsHevXv1yCOPaP369apRo4Z69eqll19+2emyYAmHxwIAAAAAAAAVTEjOHgsAAAAAAABUZDTtAAAAAAAAgAqGph0AAAAAAABQwdC0AwAAAAAAACoYmnYAAAAAAABABUPTDgAAACc1c+ZMuVwu7dmzp9T3SUtL0+jRo8utJgAAgGBH0w4AAKCSu+mmm+RyuXTbbbcVu+3OO++Uy+XSTTfddPYLAwAAQJnRtAMAAAgCqamp+uijj3Tw4EH/dYcOHdIHH3ygBg0aOFgZAAAAyoKmHQAAQBDo0KGDUlNTNXXqVP91U6dOVYMGDdS+fXv/dYcPH9Y999yjWrVqKSYmRt26ddP8+fMDHuvrr79Ws2bNFBsbqx49emjt2rXFnu/nn3/WH/7wB8XGxio1NVX33HOP9u/fX2Jtxhg9/fTTatCggaKjo1W3bl3dc889dl44AABAkKJpBwAAECT+9re/acKECf7L48eP18CBAwOWefjhhzVlyhRNmjRJCxcuVJMmTdSnTx/t2rVLkrRhwwZdeeWV6tu3rzwej26++WY9+uijAY+xatUqXXzxxbrqqqu0ePFiTZ48WT///LPuuuuuEuuaMmWKXnnlFb399ttasWKFPvvsM7Vt29byqwcAAAguNO0AAACCxPXXX6+ff/5Z69at07p16zR79mxdf/31/tv379+vt956Sy+99JIuueQStWrVSuPGjVNsbKzeffddSdJbb72lc845Ry+//LKaN2+u/v37Fzsf3siRI9W/f3/dd999atq0qbp27arXXntN7733ng4dOlSsrvXr1yslJUW9evVSgwYN1KlTJw0ePLhc3wsAAIDKjqYdAABAkKhZs6YuvfRSTZw4URMmTNCll16qGjVq+G9ftWqVjhw5ooyMDP91kZGR6tSpk7KysiRJWVlZ6ty5c8Djnn/++QGXvV6vJk6cqISEBP9Pnz595PP5tGbNmmJ1XXPNNTp48KAaN26swYMH69NPP1VBQYHNlw4AABB0IpwuAAAAAPb87W9/8x+mOmbMmHJ5jn379unWW28t8bx0JU16kZqaquzsbH3//feaNm2a7rjjDr300kv68ccfFRkZWS41AgAAVHaMtAMAAAgiF198sfLz83XkyBH16dMn4LZzzjlHUVFRmj17tv+6I0eOaP78+WrVqpUkqWXLlvr1118D7vfLL78EXO7QoYOWLVumJk2aFPuJiooqsa7Y2Fj17dtXr732mmbOnKm5c+cqMzPTxksGAAAISoy0AwAACCLh4eH+Q13Dw8MDbouPj9ftt9+uIUOGqFq1amrQoIFefPFFHThwQIMGDZIk3XbbbXr55Zc1ZMgQ3XzzzVqwYIEmTpwY8DiPPPKIunTporvuuks333yz4uPjtWzZMk2bNk1vvPFGsZomTpyowsJCde7cWXFxcXr//fcVGxurhg0bls+bAAAAEAQYaQcAABBkkpKSlJSUVOJtzz//vK666irdcMMN6tChg1auXKn//ve/qlq1qqSjh7dOmTJFn332mdxut8aOHasRI0YEPEa7du30448/KicnR3/4wx/Uvn17PfXUU6pbt26Jz1mlShWNGzdOGRkZateunb7//nv95z//UfXq1e2+cAAAgCDiMsYYp4sAAAAAAAAA8H8YaQcAAAAAAABUMDTtAAAAAAAAgAqGph0AAAAAAABQwdC0AwAAAAAAACoYmnYAAAAAAABABUPTDgAAAAAAAKhgaNoBAAAAAAAAFQxNOwAAAAAAAKCCoWkHAAAAAAAAVDA07QAAAAAAAIAKhqYdAAAAAAAAUMH8f/wry7Ww0KSVAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 1500x1200 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# plt.bar(mdls, mdls_val)\n","plt.figure(figsize = (15,12))\n","\n","plt.plot(\n","    mdls,\n","    mdls_val,\n","    color = 'black',\n","    linestyle = '--',\n","    marker = 'o',markerfacecolor='green',\n","    markersize = 8,\n","    alpha=0.7,)\n","\n","\n","\n","for mdl, val in zip(mdls, mdls_val):\n","    plt.axvline(\n","        x = mdl,\n","        ymin = 0,\n","        ymax = val,\n","        linestyle = '--',\n","        alpha=0.2,\n","        color = 'black',)\n","\n","\n","plt.title(\"Accuracy Score of Different Models\")\n","plt.xlabel(\"Models\")\n","plt.ylabel(\"Accuracy Score\")\n","\n","# plt.yticks(np.arange(0, 1, 0.02))\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"ifOAcgNvCiIT"},"source":["#Testing"]},{"cell_type":"code","execution_count":null,"metadata":{"collapsed":true,"id":"wu13X7aG-BRM"},"outputs":[],"source":["# It can be used to reconstruct the model identically.\n","from sklearn.preprocessing import StandardScaler, LabelEncoder\n","\n","colnames=var.columns\n","scaler = StandardScaler()\n","scaler.fit(X_train)\n","n=colnames.shape[0]-1\n","test_input=[]\n","for i in range(n):\n","    print(\"Do you have \", colnames[i], \"?? Enter 1 for Yes and 0 for No-\")\n","    inp=input()\n","    test_input.append(inp)\n","test_input=np.asarray(test_input)\n","test_input = test_input.reshape(1, -1)  #reshaping because right now shape of array is (n,) which has to be converted to (1,n)\n","test_input = scaler.transform(test_input)\n","\n","# label_encoder = LabelEncoder()\n","# var = var.rename(columns={'TYPE' : 'class'})\n","# var['class']= label_encoder.fit_transform(var['class'])\n","# keys = label_encoder.classes_\n","# values = label_encoder.transform(label_encoder.classes_)\n","# dictionary = dict(zip(keys, values))\n","# key_list = list(dictionary.keys()) #make a list of keys\n","# val_list = list(dictionary.values()) #make a list of values\n","\n","\n","# dt=DecisionTreeClassifier(random_state=42,max_depth=12)\n","# dt.fit(X_train,y_train)\n","dt=grid_search_log.predict(test_input)\n","print(\"You have \",dt)"]},{"cell_type":"markdown","metadata":{"id":"i_I7nN-mtOI8"},"source":["#Frontend"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Qy8gDynRmiS4"},"outputs":[],"source":["# Generating the .pkl file for the trained model\n","import pickle\n","\n","# Specify the file name to save the model\n","model_filename = \"decision_tree_model.pkl\"\n","\n","# Save the model to disk\n","with open(model_filename, 'wb') as file:\n","    pickle.dump(grid_search_log, file)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16690,"status":"ok","timestamp":1715747963635,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"zXhAioKAmsm_","outputId":"b1f99027-7d9b-4cb5-e45e-eb97596894a1"},"outputs":[{"name":"stdout","output_type":"stream","text":["\u001b[K\u001b[?25h/tools/node/bin/lt -> /tools/node/lib/node_modules/localtunnel/bin/lt.js\n","+ localtunnel@2.0.2\n","updated 1 package in 1.335s\n","Requirement already satisfied: click in /usr/local/lib/python3.10/dist-packages (8.1.7)\n"]}],"source":["!npm install -g localtunnel\n","!pip install --upgrade click\n","!pip install streamlit -q"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":511,"status":"ok","timestamp":1715749541036,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"},"user_tz":-330},"id":"3UR73Dz5mlvW","outputId":"53287c5f-ccab-4a26-d50c-8847430b0253"},"outputs":[{"name":"stdout","output_type":"stream","text":["Overwriting app.py\n"]}],"source":["%%writefile app.py\n","import streamlit as st\n","import pickle\n","import numpy as np\n","import pandas as pd\n","import csv\n","\n","def main():\n","    html_temp = \"\"\"\n","    <div style=\"background:#025246 ;padding:10px\">\n","    <h2 style=\"color:white;text-align:center;\">Health Symptom Classifier</h2>\n","    </div>\n","    \"\"\"\n","    st.markdown(html_temp, unsafe_allow_html=True)\n","\n","    st.write(\"Please provide your responses to the following symptoms:\")\n","\n","    # Create a form to take responses\n","    form = st.form(key=\"symptoms_form\")\n","    with form:\n","        cough = st.selectbox(\"Do you have Cough?\", (\"Yes\", \"No\"))\n","        muscle_aches = st.selectbox(\"Do you have Muscle Aches?\", (\"Yes\", \"No\"))\n","        tiredness = st.selectbox(\"Do you have Tiredness?\", (\"Yes\", \"No\"))\n","        sore_throat = st.selectbox(\"Do you have Sore Throat?\", (\"Yes\", \"No\"))\n","        runny_nose = st.selectbox(\"Do you have Runny Nose?\", (\"Yes\", \"No\"))\n","        stuffy_nose = st.selectbox(\"Do you have Stuffy Nose?\", (\"Yes\", \"No\"))\n","        fever = st.selectbox(\"Do you have Fever?\", (\"Yes\", \"No\"))\n","        nausea = st.selectbox(\"Do you have Nausea?\", (\"Yes\", \"No\"))\n","        vomiting = st.selectbox(\"Do you have Vomiting?\", (\"Yes\", \"No\"))\n","        diarrhea = st.selectbox(\"Do you have Diarrhea?\", (\"Yes\", \"No\"))\n","        shortness_of_breath = st.selectbox(\"Do you have Shortness of Breath?\", (\"Yes\", \"No\"))\n","        difficulty_breathing = st.selectbox(\"Do you have Difficulty Breathing?\", (\"Yes\", \"No\"))\n","        loss_of_taste = st.selectbox(\"Do you have Loss of Taste?\", (\"Yes\", \"No\"))\n","        loss_of_smell = st.selectbox(\"Do you have Loss of Smell?\", (\"Yes\", \"No\"))\n","        itchy_nose = st.selectbox(\"Do you have Itchy Nose?\", (\"Yes\", \"No\"))\n","        itchy_eyes = st.selectbox(\"Do you have Itchy Eyes?\", (\"Yes\", \"No\"))\n","        itchy_mouth = st.selectbox(\"Do you have Itchy Mouth?\", (\"Yes\", \"No\"))\n","        itchy_inner_ear = st.selectbox(\"Do you have Itchy Inner Ear?\", (\"Yes\", \"No\"))\n","        sneezing = st.selectbox(\"Do you have Sneezing?\", (\"Yes\", \"No\"))\n","        pink_eye = st.selectbox(\"Do you have Pink Eye?\", (\"Yes\", \"No\"))\n","\n","        submit_button = st.form_submit_button(label=\"Submit\")\n","\n","    if submit_button:\n","        # Convert responses to binary values\n","        symptoms = {\n","            \"Cough\": 1 if cough == \"Yes\" else 0,\n","            \"Muscle Aches\": 1 if muscle_aches == \"Yes\" else 0,\n","            \"Tiredness\": 1 if tiredness == \"Yes\" else 0,\n","            \"Sore Throat\": 1 if sore_throat == \"Yes\" else 0,\n","            \"Runny Nose\": 1 if runny_nose == \"Yes\" else 0,\n","            \"Stuffy Nose\": 1 if stuffy_nose == \"Yes\" else 0,\n","            \"Fever\": 1 if fever == \"Yes\" else 0,\n","            \"Nausea\": 1 if nausea == \"Yes\" else 0,\n","            \"Vomiting\": 1 if vomiting == \"Yes\" else 0,\n","            \"Diarrhea\": 1 if diarrhea == \"Yes\" else 0,\n","            \"Shortness of Breath\": 1 if shortness_of_breath == \"Yes\" else 0,\n","            \"Difficulty Breathing\": 1 if difficulty_breathing == \"Yes\" else 0,\n","            \"Loss of Taste\": 1 if loss_of_taste == \"Yes\" else 0,\n","            \"Loss of Smell\": 1 if loss_of_smell == \"Yes\" else 0,\n","            \"Itchy Nose\": 1 if itchy_nose == \"Yes\" else 0,\n","            \"Itchy Eyes\": 1 if itchy_eyes == \"Yes\" else 0,\n","            \"Itchy Mouth\": 1 if itchy_mouth == \"Yes\" else 0,\n","            \"Itchy Inner Ear\": 1 if itchy_inner_ear == \"Yes\" else 0,\n","            \"Sneezing\": 1 if sneezing == \"Yes\" else 0,\n","            \"Pink Eye\": 1 if pink_eye == \"Yes\" else 0,\n","        }\n","\n","        # Load the model\n","        model = pickle.load(open(\"decision_tree_model.pkl\", \"rb\"))\n","\n","        # Perform prediction\n","        input_features = np.array(list(symptoms.values())).reshape(1, -1)\n","        prediction = model.predict_proba(input_features)\n","\n","        # Define the file name\n","        csv_filename = \"responses.csv\"\n","\n","        try:\n","            # Write responses to CSV file\n","            with open(csv_filename, mode=\"a\", newline=\"\") as file:\n","                writer = csv.writer(file)\n","                writer.writerow([symptoms[col] for col in symptoms])\n","\n","            print(\"CSV file written successfully.\")\n","\n","            # Read the CSV file\n","            df = pd.read_csv(\"responses.csv\", header=0)\n","\n","            if df.empty:\n","                st.error(\"The CSV file is empty. Please ensure that it contains data.\")\n","            else:\n","                # Rename columns if needed\n","                new_column_names = [\n","                    \"Cough\", \"Muscle Aches\", \"Tiredness\", \"Sore Throat\", \"Runny Nose\",\n","                    \"Stuffy Nose\", \"Fever\", \"Nausea\", \"Vomiting\", \"Diarrhea\",\n","                    \"Shortness of Breath\", \"Difficulty Breathing\", \"Loss of Taste\",\n","                    \"Loss of Smell\", \"Itchy Nose\", \"Itchy Eyes\", \"Itchy Mouth\",\n","                    \"Itchy Inner Ear\", \"Sneezing\", \"Pink Eye\"\n","                ]\n","                df = df.rename(columns=dict(zip(df.columns, new_column_names)))\n","\n","        except Exception as e:\n","            st.error(f\"An error occurred while reading/writing the CSV file: {e}\")\n","\n","    # Display prediction result\n","    if \"prediction\" in locals():\n","        st.write(\"Probability Distribution:\")\n","        st.write(\"Allergy:\", prediction[0][0])\n","        st.write(\"Cold:\", prediction[0][1])\n","        st.write(\"COVID:\", prediction[0][2])\n","        st.write(\"Flu:\", prediction[0][3])\n","    else:\n","        st.error(\"Please submit the form to make a prediction.\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"157tUmyZm_BK","executionInfo":{"status":"ok","timestamp":1715759877437,"user_tz":-330,"elapsed":7477,"user":{"displayName":"Mohd Affan Siddiqui","userId":"06158387587523708591"}},"outputId":"0bbb5f95-bcd0-4790-db9a-73cf484cf209"},"outputs":[{"output_type":"stream","name":"stdout","text":["/bin/bash: line 1: streamlit: command not found\n","\u001b[K\u001b[?25hnpx: installed 22 in 3.252s\n","your url is: https://ready-games-draw.loca.lt\n","^C\n"]}],"source":["!streamlit run app.py & npx localtunnel --port 8501"]}],"metadata":{"colab":{"collapsed_sections":["fogLXwcjAppC","ds2a0Zb4A1Uv","yDGtV4m3BBzx","cBYRtTpMBSQ1","x2hv5ji3BZT-","3RrlQ2t2BgiS","fgJYdrWhDCXZ","v2yib-fjEDeZ","IIok3tZ1ZNz1","iLQyRScTdIhw","oVMb3IWjRpIr","KV0E2YYgga-w","3Q6xbVCCMzOv","O4PNF7vtU6l_","69QDWV6Mf96W","bVH1VgOOgrJS","0wERcv7Sg7g6","hWi0oII25KDg","nSyygGz8G0FU","f2e0QjWJIN8t","hfdDvf8Av_5K","OrjgufSBxAUu","GFXyZLDgxtLZ","UssJTIUTyY0p","rmzGyp0n9CO6","ifOAcgNvCiIT","i_I7nN-mtOI8"],"provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}